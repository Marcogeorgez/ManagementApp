@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using Blazr.RenderState
@inject IBlazrRenderStateService RenderState
@inject IHostEnvironment HostEnvironment
@inject BrowserInfoService BrowserInfo
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<div id="blazor-error-ui" data-nosnippet>
    @if (HostEnvironment.IsProduction())
    {
        <span>An error has occurred.</span>
    }
    else
    {
        <span>An unhandled exception occurred.</span>
    }
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider CloseButton="true"
MaxWidth="MaxWidth.Medium"
BackdropClick="false"
Position="DialogPosition.Center"
CloseOnEscapeKey="true" />
<MudSnackbarProvider />
<AppUserProvider>
    <CascadingValue Value="_drawerOpen">
        <MudLayout Style="position:absolute;">

            @if (_showSplashScreen && !IsStaticSSR)
            {
                <SplashScreen />
            }
            @if (!IsGuestPage())
            {
                <NavMenu @rendermode="InteractiveServer" />
            }
            @* Conditionally render @Body based on IsStaticSSR to ensure login flow *@
            @if (IsStaticSSR)
            {
                @Body
            }
            else
            {
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                    @Body
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    @Body
                </MudHidden>
            }
            @if (_showBanner)
            {
                <MudPaper Elevation="3" Class="pa-4 mb-4 popup-banner">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body1">Would you like to receive notifications on this device?</MudText>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex gap-2 mt-2">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       OnClick="SubscribeToPush">
                                Yes, enable notifications
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       OnClick="DeclineNotifications">
                                No, thanks
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       OnClick="AskLater">
                                Ask me later
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }

            @*             @if (ProjectState.CurrentProject != null)
            {
                <div class="floating-chat-container">

                    <Chats.ProjectChatDialog Project="@ProjectState.CurrentProject"
                    UserId="@_currentUserId"
                    IsAdminView="@isAdminView"
                    IsClientView="@_isClientView" isEditorView="@_isEditorView"
                     />
                </div>

            }
 *@
            <form id="logoutForm" action="Account/Logout" method="post" style="display:none;">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="" />
            </form>
            <script>
                function submitForm(formId) {
                document.getElementById(formId).submit();
                }
            </script>

        </MudLayout>
    </CascadingValue>
</AppUserProvider>

@code {
    private bool _drawerOpen = false;
    private bool _showSplashScreen = true; // Splash screen visibility state
    private bool _isFirstRender = true; // To track the first render
    private bool IsGuestPage()
    {
        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;
        return currentPath.StartsWith("/guest");
    }
    private async Task SubscribeToPush()
    {
        bool subscriptionSucceeded = await JS.InvokeAsync<bool>("subscribeToPush");

        // Only save to localStorage if subscription was successful
        if (subscriptionSucceeded)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "notificationPreference", "enabled");
            _showBanner = false;
        }
        else
        {
            Snackbar.Add($"An Error has occurred. please contact support!", Severity.Error);
            Console.WriteLine("fail: Error: Subscription failed.");
        }
        _showBanner = false;
    }

    private async Task DeclineNotifications()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "notificationPreference", "declined");
        _showBanner = false;
    }

    private void AskLater()
    {
        _showBanner = false;
        // Don't save to localStorage so it will show again next time
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _showSplashScreen = false;
            StateHasChanged(); // Trigger a UI update
            await Task.Delay(5000);
            // Check if user has already made a choice
            var userChoice = await JS.InvokeAsync<string>("localStorage.getItem", "notificationPreference");
            if (string.IsNullOrEmpty(userChoice))
            {
                _showBanner = true;
                StateHasChanged(); // Trigger a UI update
            }
        }
    }

    private bool IsStaticSSR => NavigationManager.Uri.Contains("/Account");
    private bool _showBanner = false;
    // Missing closing button not working properly in calendar.
    // [CascadingParameter]
    // public ClaimsPrincipal? currentUser { get; set; }
    // [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     currentUser = authState.User;

    //     if (currentUser?.Identity?.IsAuthenticated == true)
    //     {
    //         _currentUserId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
    //         isAdminView = currentUser.IsInRole("Admin");
    //         _isEditorView = currentUser.IsInRole("Editor");
    //         _isClientView = currentUser.IsInRole("Client");

    //         timezoneOffsetMinutes = await JS.InvokeAsync<int>("getTimezoneOffset");
    //     }

    // }
    // [Inject] ProjectState ProjectState { get; set; }
    // public void Dispose()
    // {
    //     ProjectState.OnChange -= HandleProjectStateChange;

    // }


    // private void HandleProjectStateChange()
    // {
    //     InvokeAsync(StateHasChanged);
    // }

    // private bool isAdminView;
    // private bool _isEditorView;
    // private bool _isClientView;
    // private int timezoneOffsetMinutes;
    // private string _currentUserId;
}
