@using LuminaryVisuals.Components.Pages
@using LuminaryVisuals.Components.Shared.Chat
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IBrowserViewportService ViewportService
@inject ProjectState ProjectState
@inject ChatService ChatService
@implements IAsyncDisposable

@* Main Top Bar *@
<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true ;">
    <MudAppBar Elevation="2" Dense="true" Style="margin-left: 0px !important; position:relative; margin-bottom:10px;">
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>
            <MudTooltip Text="Expand Sidebar">
                <MudIconButton Class="" Icon="@Icons.Material.Filled.Menu" Color="Color.Tertiary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            </MudTooltip>
            <MudImage Src="@logoSrc" Alt="Logo" Height="30" Class="fit-image " Style="margin-left:35vw" />
        </MudHidden>

        <MudSpacer />
    </MudAppBar>
</MudHidden>


<MudDrawer Class="" @bind-Open="_drawerOpen" Anchor="@_anchor" Fixed="@isFixed" Variant="@drawer" ClipMode="@_clipMode"
OpenMiniOnHover="@_isMinihover" Elevation="0" >
    <MudThemeProvider IsDarkMode=true Theme="_theme" />

    <MudNavMenu Style="display: flex; flex-direction: column; height:100vh; ">
        <div class="mud-nav-item" style="justify-content:center !important;" >
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>
                <MudIconButton style="margin-left:5px;" Icon="@Icons.Material.Filled.Menu" Color="Color.Tertiary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <div aria-hidden="true" style="flex-grow:.42 !important"></div>
            </MudHidden>
            <MudImage Style="margin:8px 9px 2px 14px;" Src="@logoSrc" Alt="Logo"  Height="25" Class="fit-image mb-2" />
            <MudSpacer />

            <div class="mud-nav-link-text" style="margin:13px -10px 1px 1px;padding-left:4px; display:none;"></div>
        </div>

        <MudSpacer />

        <AuthorizeView Roles="Admin,Client,Editor">
            <MudNavLink OnClick="@profileDialog" Icon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Tertiary" Style="color:var(--mud-palette-action-default)">Profile</MudNavLink>
        </AuthorizeView>
        <AuthorizeView Roles="Admin">
            <MudNavLink Href="admin-dashboard" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Tertiary" Style="color:var(--mud-palette-action-default)">Admin Dashboard</MudNavLink>
        </AuthorizeView>
        <AuthorizeView Roles="Admin,Client,Editor">
            <MudNavLink Href="project" Icon="@Icons.Material.Filled.ViewList" IconColor="Color.Tertiary" Style="color:var(--mud-palette-action-default)">Project</MudNavLink>
            <MudBadge Content="@totalUnreadMessages" Color="Color.Error" Origin="Origin.TopRight" Overlap="true" 
            Bordered="true" Class="mt-1 mr-3" Visible="@(totalUnreadMessages > 0)">
                <MudNavLink OnClick="OpenChatPopup" Icon="@Icons.Material.Filled.Email"IconColor="Color.Tertiary"
                Style="color:var(--mud-palette-action-default)">Messages</MudNavLink>
            </MudBadge>
        </AuthorizeView>

        <MudSpacer />
        <MudNavLink Href="https://docs.google.com/forms/d/e/1FAIpQLSdm_2jk_RSHriEazL4vxlWwcGkKFqQzqlxrrBT6N686pHhydA"
        Icon="@Icons.Material.Filled.BugReport" IconColor="Color.Tertiary" Style="color:var(--mud-palette-action-default)">Report bug</MudNavLink>

    </MudNavMenu>
</MudDrawer>

@code {
    [CascadingParameter]
    public ClaimsPrincipal? currentUser { get; set; }
    bool isLargeScreen = false;
    bool _drawerOpen = false;
    private Anchor _anchor = Anchor.Start;
    private bool isFixed = true;
    private bool _isMinihover = true;
    private DrawerVariant drawer = DrawerVariant.Mini;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;
    private bool _isDarkMode = true;
    private string logoSrc =>  "/Logo.png";
    private string ColorThemeIcon => Icons.Material.Filled.DarkMode;
    private string? currentUrl;
    private string GetLinkClass => _drawerOpen ? "max-w-[200px] flex items-center" : "justify-center";
    private string GetArrowIcon()
    {
        return _drawerOpen ? Icons.Material.Filled.ArrowCircleLeft : Icons.Material.Filled.ArrowCircleRight;
    }
    private string GetArrowIconForMobile()
    {
        return _drawerOpen ? Icons.Material.Filled.ArrowCircleUp : Icons.Material.Filled.ArrowCircleDown;
    }
    const string googleLogo = @"<svg xmlns=""http://www.w3.org/2000/svg"" x=""0px"" y=""0px"" width=""24"" height=""24"" viewBox=""0 0 24 24"">
    <path d=""M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866 c-3.431,0.635-6.862-1.865-7.19-5.339c-0.34-3.595,2.479-6.62,6.005-6.62c1.002,0,1.946,0.246,2.777,0.679 c0.757,0.395,1.683,0.236,2.286-0.368l0,0c0.954-0.954,0.701-2.563-0.498-3.179c-1.678-0.862-3.631-1.264-5.692-1.038 c-4.583,0.502-8.31,4.226-8.812,8.809C1.945,16.9,6.649,22,12.545,22c6.368,0,8.972-4.515,9.499-8.398 c0.242-1.78-1.182-3.352-2.978-3.354l-4.61-0.006C13.401,10.24,12.545,11.095,12.545,12.151z""></path>
</svg>";

    private bool isAdminView;
    private bool isEditorView;
    private bool isClientView;
    private int timezoneOffsetMinutes;
    private string _currentUserId;
    private string _currentRole;
    private int totalUnreadMessages;
    private System.Timers.Timer _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
        if (currentUser.IsInRole("Admin"))
        {
            _currentRole = "Admin";
            isAdminView = true;
        }
        else if (currentUser.IsInRole("Editor"))
        {
            _currentRole = "Editor";
            isEditorView = true;

        }
        else if (currentUser.IsInRole("Client"))
        {
            _currentRole = "Client";
            isClientView = true;
        }
        totalUnreadMessages = await ChatService.GetUnreadMessageCount(_currentUserId);
        SetupPeriodicRefresh();
        Console.WriteLine($"User opened a tab {currentUser!.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!}");

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            isLargeScreen = await ViewportService.IsBreakpointWithinWindowSizeAsync(Breakpoint.MdAndUp);
            if(!isLargeScreen)
            {
                _anchor = Anchor.Top;
                isFixed = true;
                _isMinihover = false;
                drawer = DrawerVariant.Temporary;
                _clipMode = DrawerClipMode.Never;
            }
            StateHasChanged();
        }
    }

    private void OpenChatPopup()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                Position = DialogPosition.BottomRight,
                NoHeader = true
            };
        var parameters = new DialogParameters<ChatProjectListDialog>
        {
            { "userId" , _currentUserId },
            { "isAdminView" , isAdminView },
            { "isEditorView" , isEditorView },
            { "isClientView" , isClientView },
            { "timezoneOffsetMinutes" , timezoneOffsetMinutes },

        };
        DialogService.Show<ChatProjectListDialog>("", parameters, options);
        DrawerToggle();
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task profileDialog()
    {
        var parameters = new DialogParameters
        {
            {"currentUser",currentUser }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
            };

        var dialog = await DialogService.ShowAsync<ProfileDialog>("", parameters, options);
    }
    MudTheme _theme = new MudTheme()
        {
            //  for the background #0d0e19 , for the table background #13131b , for the sidebar #02020a and .
            //for the logos a slightly grayish color will work(not pure white like #efefef ),
            PaletteDark = new PaletteDark()
            {

                Tertiary = "#efefef",
                DrawerBackground = "#02020a",
                AppbarBackground = "#13131b",
                TextPrimary = "#efefef",
                Background = "#13131b",
                Surface = "#0d0e19",
                TableHover = "#666569"
            },

            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Inter", "sans-serif" },
                    FontWeight = 400
                },
            },
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "200px",
            }
        };
    private void SetupPeriodicRefresh()
    {
        _refreshTimer = new System.Timers.Timer(TimeSpan.FromMinutes(2).TotalMilliseconds);

        _refreshTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(async () =>
            {
                await LoadUnreadMessageCount();

            });

        };

        // Enable the timer
        _refreshTimer.Start();
    }

    private async Task LoadUnreadMessageCount()
    {
        try
        {
            Console.WriteLine($"Successfully run the periodic refresh for fetching unread message count.");
            totalUnreadMessages = await ChatService.GetUnreadMessageCount(_currentUserId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Optional: Log the error
            Console.WriteLine($"Error refreshing unread message count: {ex.Message}");
        }
    }

    // Implements IAsyncDisposable to properly clean up the timer
    public async ValueTask DisposeAsync()
    {
        Console.WriteLine("Component disposal started"); // Add logging
        if (_refreshTimer != null)
        {
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
            Console.WriteLine("Timer disposed"); // Add logging
            Console.WriteLine($"User Closed Tab {currentUser!.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!}");
        }
    }

}

