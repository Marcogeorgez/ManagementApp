<div class="project-container">
    <MudBadge Style="width:100%;" Color="Color.Secondary" 
              Visible="@(project?.countUnreadMessages > 0)" 
              Content="@project?.countUnreadMessages"
              Class="unread-badge" Origin="Origin.CenterRight" 
              Bordered="true" Overlap="true">

        <MudBadge Style="width:100%;" 
                  Icon="@(project?.IsPinned == true ? Icons.Material.Outlined.PushPin : Icons.Material.Filled.PushPin)" 
                  Origin="Origin.CenterLeft" 
                  BadgeClass="@(project?.IsPinned == true ? "pinned-badge" : "")" 
                  Bordered="true" 
                  Color="@(project?.IsPinned == true ? Color.Error : Color.Info)" 
                  OnClick="() => PinChat(project)">

            <MudListItem T="int" @key="project?.ProjectId" 
                         Class="@classText" 
                         OnClick="() => OpenProjectChat(project)" 
                         Ripple="false">

                <div class="project-content">
                    <MudText style="max-width:90%;" Typo="Typo.body1">
                        @(IsAdminView || IsEditorView ? $"{project?.Client?.UserName} | {project?.ProjectName}" : project?.ProjectName)
                    </MudText>
                    <MudText Typo="Typo.caption" Class="message-timestamp">
                        @ConvertLocal.ConvertToLocalTime(project?.LastSentMessage, timezoneOffsetMinutes)
                    </MudText>
                </div>
            </MudListItem>
        </MudBadge>
    </MudBadge>
</div>

@code {
    [Parameter] public Project project { get; set; }
    [Parameter] public bool IsAdminView { get; set; }
    [Parameter] public bool IsEditorView { get; set; }
    [Parameter] public EventCallback<Project> OnPinChat { get; set; }
    [Parameter] public EventCallback<Project> OnOpenChat { get; set; }
    [Parameter] public int timezoneOffsetMinutes { get; set; }

    private string classText = "project-item";

    protected override void OnParametersSet()
    {
        var classes = new List<string> { "project-item" };

        if (project != null)
        {
            if (project.MessageRequireApprovalCount > 0 && (IsAdminView || IsEditorView))
                classes.Add("unapproved-message");

            if (project.ProjectId < 0)
                classes.Add("private-border");
        }

        classText = string.Join(" ", classes);
    }

    private async Task PinChat(Project project)
    {
        if (OnPinChat.HasDelegate)
            await OnPinChat.InvokeAsync(project);
    }

    private async Task OpenProjectChat(Project project)
    {
        if (OnOpenChat.HasDelegate)
            await OnOpenChat.InvokeAsync(project);
    }
}