@inject ProjectService ProjectService
@inject ChatService ChatService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ProjectState ProjectState


<MudContainer Class="chat-container" Gutters=false>
    <MudPaper Elevation="0" Class="chat-panel" style="border:0px;">
        <MudPaper Elevation="3" Class="chat-header" Outlined="true">
            <MudText Typo="Typo.h5" Class="projects-title mt-1">
                Your Messages
            </MudText>

            <MudAutocomplete T="string" Label="Search projects" @bind-Value="searchText"
            SearchFunc="@SearchProjects" ResetValueOnEmptyText="true" AdornmentIcon="@Icons.Material.Filled.Search"
            AdornmentColor="Color.Tertiary" Class="mx-4 mb-3"  CoerceText="false" CoerceValue="true" Clearable=true />

            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Info" OnClick="CloseChat" />

        </MudPaper>
        @if (FilteredProjects().Any())
        {
            <MudList T="Project" Class="projects-list" Padding=true Gutters=true>
                @foreach (var project in GetPaginatedProjects())
                {
                    var classText = "project-item" + ( project.MessageRequireApprovalCount > 0 && ( isAdminView || isEditorView ) ? " unapproved-message" : "" );
                    <div class="project-container">
                        <MudBadge Style="width:100%;" Color="Color.Secondary" Visible="project.countUnreadMessages > 0 ? true : false" Content="@project.countUnreadMessages" Class="unread-badge" Origin="Origin.CenterRight" Bordered=true Overlap="true">

                            <MudBadge Style="width:100%;" Icon="@(project.IsPinned ? @Icons.Material.Outlined.PushPin : @Icons.Material.Filled.PushPin)" Origin="Origin.CenterLeft" BadgeClass="@(project.IsPinned ? "pinned-badge" : "")" Bordered=true Color="@(project.IsPinned ? Color.Error:Color.Info)" OnClick="() => PinChat(project)" >

                                <MudListItem @key="project.ProjectId" Class="@classText" OnClick="() => OpenProjectChat(project)" Ripple="false">

                                    <div class="project-content">

                                        <MudText style="max-width:90%;" Typo="Typo.body1">@(isAdminView || isEditorView ? $"{project.Client.UserName} | {project.ProjectName}" : project.ProjectName)</MudText>
                                        <MudText Typo="Typo.caption" Class="message-timestamp">
                                            @ConvertLocal.ConvertToLocalTime(project.LastSentMessage, timezoneOffsetMinutes)
                                        </MudText>
                                    </div>
                                </MudListItem>
                            </MudBadge>
                        </MudBadge>
                    </div>
                }
                @if (GetPageCount() > 1)
                {
                    <MudSpacer />
                    <MudPagination Class="d-flex justify-center mb-5" ShowFirstButton="true" ShowLastButton="true" Rectangular=true
                    Count="@GetPageCount()" SelectedChanged="PageChanged" />
                }
            </MudList>

        }
        else if(!finishLoading)
        {
            <div class="d-flex align-center align-content-center justify-center ">
                <MudText Typo="Typo.h5" Color="Color.Default" Class="ma-5">Currently Loading Your Chats. Please wait for few seconds.</MudText>
                <MudProgressCircular Color="Color.Info" Indeterminate="true" />
            </div>
        }
        else
        {
            <MudAlert Severity="Severity.Normal" Class="no-projects-alert mx-3">Sorry, You've no projects found.</MudAlert>
        }
    </MudPaper>
</MudContainer>


@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public bool isAdminView { get; set; }
    [Parameter] public bool isEditorView { get; set; }
    [Parameter] public bool isClientView { get; set; }
    [Parameter] public int timezoneOffsetMinutes { get; set; }
    [Parameter] public Project SelectedProject { get; set; }
    private int pageSize = 10;
    private int currentPage = 1;
    private List<Project> projects = new List<Project>(); 
    private string MessageRequireApproval = "";
    private bool finishLoading;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProjectState.OnChange += StateHasChanged;
            projects = await ProjectService.GetProjectsForChat(false, userId, isAdminView,isEditorView,isClientView);

            if (projects.Count > 0)
            {
                foreach (var project in projects)
                {
                    var unreadMessageData = await ChatService.GetUnreadMessageCountAndLastMessageTimeAsync(project.ProjectId, userId);
                    project.countUnreadMessages = unreadMessageData.Item1;
                    project.LastSentMessage = unreadMessageData.Item2;
                    project.MessageRequireApprovalCount = unreadMessageData.Item3;
                }


                projects = projects
                    .OrderByDescending(p => p.IsPinned)
                    .ThenByDescending(p => p.countUnreadMessages) // sort by unread messages
                    .ThenByDescending(p => p.LastSentMessage) // then by last message sent
                    .ToList();

            }
        }
        catch (Exception ex)
        {
            projects = new List<Project>();  // Ensures projects are never null
        }
        finally
        {
            finishLoading = true;
            StateHasChanged();
        }
    }

    private string searchText = "";
    private async Task<IEnumerable<string>> SearchProjects(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return new string[] { };
        return projects
        .Select(p => isClientView ? p.ProjectName  : $"{p.Client.UserName} | {p.ProjectName}")
        .Distinct()
        .Where(text => text.Contains(value.Trim(), StringComparison.OrdinalIgnoreCase))
        .ToArray();
    }
    private IEnumerable<Project> FilteredProjects()
    {
        if (string.IsNullOrEmpty(searchText))
            return projects;

        if (searchText.Contains("|") && !isClientView)
        {
            // match starts with "Client.UserName | ProjectName" format
            var parts = searchText.Split("|").Select(s => s.Trim()).ToList();
            if (parts.Count == 2)
            {
                return projects.Where(p =>
                    p.Client.UserName.StartsWith(parts[0], StringComparison.OrdinalIgnoreCase) &&
                    p.ProjectName.StartsWith(parts[1], StringComparison.OrdinalIgnoreCase)
                );
            }
        }

        // Single term search - match either client name or project name
        return projects.Where(p =>
            isClientView ? p.ProjectName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase) :
            p.Client.UserName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase) ||
            p.ProjectName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase)
        );
    }
    private IEnumerable<Project> GetPaginatedProjects()
    {
        var filtered = FilteredProjects().ToList();
        return filtered
            .Skip(( currentPage - 1 ) * pageSize)
            .Take(pageSize);
    }

    private int GetPageCount()
    {
        return (int) Math.Ceiling(FilteredProjects().Count() / (double) pageSize);
    }

    private void PageChanged(int page)
    {
        currentPage = page;
        StateHasChanged();
    }
    private async void OpenProjectChat(Project Project)
    {
        ProjectState.SetProject(Project);
        StateHasChanged();
        MudDialog.Close();

    }
    private async void PinChat(Project Project)
    {
        Project.IsPinned = !Project.IsPinned;
        await ProjectService.TogglePinAsync(userId, Project.ProjectId, Project.IsPinned);
        projects = projects
        .OrderByDescending(p => p.IsPinned)
        .ThenByDescending(p => p.countUnreadMessages) // Sort by unread messages
        .ThenByDescending(p => p.LastSentMessage) // Then by last message sent
        .ToList();
        StateHasChanged();

    }
     private async Task CloseChat()
    {
        MudDialog.Close();
    }



}


<style>
    .mud-dialog-width-md
    {
        padding: 0% !important;
    }
    .chat-container{
        width: 100% !important;
    }
    .mud-badge.mud-badge-icon .mud-icon-badge
    {
        font-size: 16px !important;
    }

    .mud-badge.mud-badge-icon
    {
        width: 30px !important;
        height: 30px !important;
    }
    @@media (max-width: 960px){
        .mud-dialog-container.mud-dialog-bottomright .mud-dialog
        {
            position: absolute !important;
            top: 50% !important;
            left: 50% !important;
            transform: translate(-50%, -50%) !important;
            width: 100vw !important;
        }
    }

    .mud-dialog-container.mud-dialog-bottomright .mud-dialog
    {
        height: 100vh;
        max-height: 100vh;
        width: 45vw;
        bottom:0px;
        right:0px;
    }
</style>