@inject ProjectService ProjectService
@inject ChatService ChatService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

    <MudPaper Elevation="3" Class="chat-header" Outlined="true">
    <MudText Typo="Typo.h5" Class="projects-title">
                <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="mr-3" />
    Projects Chats

    </MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Info" OnClick="CloseChat" />
    </MudPaper>
            @if (projects.Any())
            {
                <div class="chat-panel" style="border:0px; height:inherit!important;padding: 1vw 2vw 0px 2vw;">

                <MudList T="Project" Class="projects-list">
                    @foreach (var project in projects)
                    {
                        var classText = "project-item" + (project.MessageRequireApprovalCount > 0 && (isAdminView|| isEditorView) ? " unapproved-message" : "");
                        <MudListItem Class="@classText" OnClick="() => OpenProjectChat(project.ProjectId)">
                            <div class="project-content">
                            <MudText Typo="Typo.body1">@project.ProjectName</MudText>
                            @if (project.MessageRequireApprovalCount > 0 && (isAdminView|| isEditorView))
                            {
                                <MudBadge Content="@project.MessageRequireApprovalCount" Color="Color.Secondary" Class="badge"/>
                            }
                            @if (project.countUnreadMessages > 0)
                            {
                                <MudBadge Content="@project.countUnreadMessages" Color="Color.Secondary" Class="unread-badge"/>
                            }
                            <MudText Typo="Typo.caption" Class="message-timestamp">@ConvertLocal.ConvertToLocalTime(project.LastSentMessage, timezoneOffsetMinutes)
                            </MudText>
                            
                            </div>
                        </MudListItem>
                    }
                </MudList>
                </div>
            }
            else
            {
                <MudAlert Severity="Severity.Normal" Class="no-projects-alert">>No projects found.</MudAlert>
            }
        

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public bool isAdminView { get; set; }
    [Parameter] public bool isEditorView { get; set; }
    [Parameter] public bool isClientView { get; set; }
    [Parameter] public int timezoneOffsetMinutes { get; set; }
    private List<Project> projects = new List<Project>(); 
    private string MessageRequireApproval = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (isAdminView)
            {
                projects = await ProjectService.GetProjectsAsync();
            }
            else if (isEditorView)
            {
                projects = (await ProjectService.GetProjectsForEditors(false, userId))!;
            }
            else if(isClientView)
            {
                projects = (await ProjectService.GetProjectsForClients(false, userId))!;
            }
            else
            {
                Snackbar.Add("Not authorized! Please contact owner.", Severity.Warning);
            }
            if (projects.Count > 0)
            {
                foreach (var project in projects)
                {
                    var unreadMessageData = await ChatService.GetUnreadMessageCount(project.ProjectId, userId);
                    project.countUnreadMessages = unreadMessageData.Item1;
                    project.LastSentMessage = unreadMessageData.Item2;
                    project.MessageRequireApprovalCount = unreadMessageData.Item3;
                }

                // If there are any unread messages, order by unread messages
                if (projects.Any(p => p.countUnreadMessages > 0))
                {
                    projects = projects.OrderByDescending(p => p.countUnreadMessages).ToList();
                }
                else
                {
                    // If all unread messages count are 0, order by the last sent message timestamp
                    projects = projects.OrderByDescending(p => p.LastSentMessage).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            projects = new List<Project>();  // Ensures projects are never null
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OpenProjectChat(int projectId)
    {
        var parameters = new DialogParameters
        {
            { "ProjectId", projectId },
            { "UserId", userId },
            { "isAdminView" , isAdminView },
            { "isEditorView" , isEditorView },
            { "isClientView" , isClientView },
            { "timezoneOffsetMinutes" , timezoneOffsetMinutes },

        };

        var options = new DialogOptions
            {
                Position = DialogPosition.BottomRight,
                NoHeader = true
            };
        MudDialog.Close();
        DialogService.Show<Chats.ProjectChatDialog>("", parameters, options);
    }
     private async Task CloseChat()
    {
        MudDialog.Close();
    }
}
