@inject ProjectService ProjectService
@inject ChatService ChatService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudPaper Elevation="4" Class="projects-panel">
        <MudText Typo="Typo.h5" Class="projects-title">
                        <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="mr-3" />
            Projects Chats
        </MudText>
            @if (projects.Any())
            {
                <MudList T="Project" Class="projects-list">
                    @foreach (var project in projects)
                    {
                        <MudListItem Class="project-item" OnClick="() => OpenProjectChat(project.ProjectId)">
                            <div class="project-content">
                            <MudText Typo="Typo.body1">@project.ProjectName</MudText>
                            @if (project.countUnreadMessages > 0)
                            {
                                <MudBadge 
                                    Content="@project.countUnreadMessages" 
                                    Color="Color.Secondary" 
                                    Class="unread-badge"
                                />
                            }
                        </div>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <MudAlert Severity="Severity.Normal" Class="no-projects-alert">>No projects found.</MudAlert>
            }
            </MudPaper>
        


@code {
    private List<Project> projects = new List<Project>();  // Initialize as an empty list
    [Parameter] public string userId { get; set; }
    [Parameter] public bool isAdminView { get; set; }
    [Parameter] public bool isEditorView { get; set; }
    [Parameter] public bool isClientView { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (isAdminView)
            {
                projects = await ProjectService.GetProjectsAsync();
            }
            else if (isEditorView)
            {
                projects = (await ProjectService.GetProjectsForEditors(false, userId))!;
            }
            else if(isClientView)
            {
                projects = (await ProjectService.GetProjectsForClients(false, userId))!;
            }
            else
            {
                Snackbar.Add("Not authorized! Please contact owner.", Severity.Warning);
            }
            if (projects.Count > 0)
            {
                foreach (var project in projects)
                {
                    project.countUnreadMessages = await GetUnreadMessageCount(project.ProjectId);
                }
            }
        }
        catch (Exception ex)
        {
            projects = new List<Project>();  // Ensures projects are never null
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OpenProjectChat(int projectId)
    {
        var parameters = new DialogParameters
        {
            { "ProjectId", projectId },
            { "UserId", userId },
            { "isAdminView" , isAdminView },
            { "isEditorView" , isEditorView },
            { "isClientView" , isClientView }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                Position = DialogPosition.BottomRight,
                NoHeader = true
            };
        MudDialog.Close();
        DialogService.Show<ProjectChatDialog>("", parameters, options);
    }

    private async Task<int> GetUnreadMessageCount(int projectId)
    {
        return await ChatService.GetUnreadMessageCountAsync(projectId,userId);
    }
}
