@inject ProjectService ProjectService
@inject ChatService ChatService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ProjectState ProjectState


<MudContainer Class="chat-container" Gutters=false>
    <MudPaper Elevation="0" Class="chat-panel" style="border:0px;">
        <MudPaper Elevation="3" Class="chat-header" Outlined="true">
            <MudText Typo="Typo.h5" Class="projects-title">
                Your Messages
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Info" OnClick="CloseChat" />
        </MudPaper>
        @if (projects.Any())
        {
            <MudList T="Project" Class="projects-list" Padding=true Gutters=true>
                @foreach (var project in GetPaginatedProjects())
                {
                    var classText = "project-item" + (project.MessageRequireApprovalCount > 0 && (isAdminView || isEditorView) ? " unapproved-message" : "");
                    <MudListItem Class="@classText" OnClick="() => OpenProjectChat(project)">
                        <div class="project-content">
                            <MudText Typo="Typo.body1">@(isAdminView ? $"{project.ClientName} | {project.ProjectName}" : project.ProjectName)</MudText>
                            @if (project.countUnreadMessages > 0)
                            {
                                <MudBadge Color="Color.Secondary" Content="@project.countUnreadMessages" Class="unread-badge" />
                            }
                            <MudText Typo="Typo.caption" Class="message-timestamp">
                                @ConvertLocal.ConvertToLocalTime(project.LastSentMessage, timezoneOffsetMinutes)
                            </MudText>
                        </div>
                    </MudListItem>
                }
                @if (GetPageCount() > 1)
                {
                <MudSpacer />
                <MudPagination Class="d-flex justify-center mb-5" ShowFirstButton="true" ShowLastButton="true" Count="@GetPageCount()" SelectedChanged="PageChanged" />
                }
            </MudList>

        }
        else
        {
            <MudAlert Severity="Severity.Normal" Class="no-projects-alert">No projects found.</MudAlert>
        }
    </MudPaper>
</MudContainer>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public bool isAdminView { get; set; }
    [Parameter] public bool isEditorView { get; set; }
    [Parameter] public bool isClientView { get; set; }
    [Parameter] public int timezoneOffsetMinutes { get; set; }
    [Parameter] public Project SelectedProject { get; set; }
    private int pageSize = 10;
    private int currentPage = 1;
    private List<Project> projects = new List<Project>(); 
    private string MessageRequireApproval = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProjectState.OnChange += StateHasChanged;
            if (isAdminView)
            {
                projects = await ProjectService.GetProjectsAsync(false,int.MaxValue);
            }
            else if (isEditorView)
            {
                projects = (await ProjectService.GetProjectsForEditors(false, userId,0))!;
            }
            else if(isClientView)
            {
                projects = (await ProjectService.GetProjectsForClients(false, userId,0))!;
            }
            else
            {
                Snackbar.Add("Not authorized! Please contact owner.", Severity.Warning);
            }
            if (projects.Count > 0)
            {
                foreach (var project in projects)
                {
                    var unreadMessageData = await ChatService.GetUnreadMessageCountAndLastMessageTimeAsync(project.ProjectId, userId);
                    project.countUnreadMessages = unreadMessageData.Item1;
                    project.LastSentMessage = unreadMessageData.Item2;
                    project.MessageRequireApprovalCount = unreadMessageData.Item3;
                }

                // If there are any unread messages, order by unread messages
                if (projects.Any(p => p.countUnreadMessages > 0))
                {
                    projects = projects.OrderByDescending(p => p.countUnreadMessages).ToList();
                }
                else
                {
                    // If all unread messages count are 0, order by the last sent message timestamp
                    projects = projects.OrderByDescending(p => p.LastSentMessage).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            projects = new List<Project>();  // Ensures projects are never null
        }
        finally
        {
            StateHasChanged();
        }
    }
    private IEnumerable<Project> GetPaginatedProjects()
    {
        return projects
            .Skip(( currentPage - 1 ) * pageSize)
            .Take(pageSize);
    }

    private int GetPageCount()
    {
        return (int) Math.Ceiling(projects.Count() / (double) pageSize);
    }

    private void PageChanged(int page)
    {
        currentPage = page;
        StateHasChanged();
    }
    private void OpenProjectChat(Project Project)
    {

        ProjectState.SetProject(Project);
        StateHasChanged();
        MudDialog.Close();

    }
     private async Task CloseChat()
    {
        MudDialog.Close();
    }

}


<style>
    .mud-dialog-width-md
    {
        padding: 0% !important;
    }
    .chat-container{
        width: 100% !important;
    }
    @@media (max-width: 960px){
        .mud-dialog-container.mud-dialog-bottomright .mud-dialog
        {
            position: absolute !important;
            top: 50% !important;
            left: 50% !important;
            transform: translate(-50%, -50%) !important;
            width: 100vw !important;
        }
    }

    .mud-dialog-container.mud-dialog-bottomright .mud-dialog
    {
        height: 100vh;
        max-height: 100vh;
        width: 45vw;
        bottom:0px;
        right:0px;
    }
</style>