@using MudBlazor
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudContainer Class="chat-popup">
            <MudPaper Elevation="4" Class="chat-header">
                <MudText Typo="Typo.h6">Chat</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" 
                               Color="Color.Default" 
                               OnClick="CloseChat"/>
            </MudPaper>
            
            <MudPaper Class="chat-messages" Elevation="0">
                @foreach (var message in _messages)
                {
                    <div class="@(message.Side == MessageSide.Right ? "message-right" : "message-left")">
                        <MudPaper Class="chat-message" Elevation="1">
                            <MudText Typo="Typo.body2">@message.Text</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @message.Username - @message.Timestamp.ToString("HH:mm")
                            </MudText>
                        </MudPaper>
                    </div>
                }
            </MudPaper>


            <MudPaper Class="chat-input-area" Elevation="0">
                <MudTextField @bind-Value="_currentMessage" 
                              Placeholder="Type a message..."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Send"
                              OnAdornmentClick="SendMessage"
                              OnKeyDown="HandleKeyDown"/>
            </MudPaper>
        </MudContainer>
    </DialogContent>
        <DialogActions>
        <MudButton OnClick="CloseChat">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ChatMessage> _messages = new List<ChatMessage>();
    private string _currentMessage = string.Empty;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public enum MessageSide
    {
        Left,
        Right
    }
    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_currentMessage))
        {
            _messages.Add(new ChatMessage 
            { 
                Text = _currentMessage, 
                Username = "You", 
                Timestamp = DateTime.Now,
                    Side = MessageSide.Right
            });
            _currentMessage = string.Empty;

            _messages.Add(new ChatMessage
                {
                    Text = "Hello! How can I help you?",
                    Username = "Support",
                    Timestamp = DateTime.Now,
                    Side = MessageSide.Left
                });
            StateHasChanged();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    private async Task CloseChat()
    {
        if(_currentMessage != string.Empty)
        {
            var parameters = new DialogParameters
        {
            { "Message", "There is an unsend message? Are you sure that you want to close?" }
        };
            var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
            var result = await dialog.Result;
            if( !result.Canceled)
            {
                MudDialog.Close();
            }
            else
            {
                return;
            }
        }
        else
        {
            MudDialog.Close();
        }
    }

    public class ChatMessage 
    {
        public string Text { get; set; }
        public string Username { get; set; }
        public DateTime Timestamp { get; set; }
        public MessageSide Side { get; set; }
    }

}

<style>
    .chat-popup {
        width: 350px;
        height: 500px;
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #e0e0e0;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-input-area {
        padding: 10px;
        border-top: 1px solid #e0e0e0;
    }
</style>