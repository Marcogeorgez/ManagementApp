@using LuminaryVisuals.Data.Entities
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField T="string"
                          Label="Project Name"
                          Value="@newProject.ProjectName"
                          ReadOnly="true" />

            <MudTextField T="string"
                          Label="Description"
                          Value="@newProject.Description"
                          ReadOnly="true" />

            <MudDatePicker Label="Shoot Date"
                           Date="@newProject.ShootDate"
                           ReadOnly="true" />
            <MudDatePicker Label="Due Date"
                           Date="@newProject.DueDate"
                           ReadOnly="true" />

            <MudDatePicker Label="Working Month"
                           Date="@newProject.WorkingMonth"
                           ReadOnly="true" />

            <MudSelect T="ArchiveReason" Label="Reason For Archiving Project" AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="Reason">
                <MudSelectItem Value="ArchiveReason.Paid">Paid</MudSelectItem>
                <MudSelectItem Value="ArchiveReason.Cancelled">Cancelled</MudSelectItem>
                <MudSelectItem Value="ArchiveReason.Deleted">Deleted</MudSelectItem>
            </MudSelect>

        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Large" OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled" Size="Size.Large"  OnClick="@Submit">Archive Project</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Project newProject { get; set; } = new Project();
    private bool success;
    private MudForm form;
    private DateTime _minDate = DateTime.Now.Date;
    private string errorMessage = "";
    private string ErrorMessageDisplay => string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;";
    public ArchiveReason Reason { get; set; }
    public enum ArchiveReason
    {
        Paid = 0,
        Cancelled = 1,
        Deleted = 2
    }
    private string GetDisplayName(ArchiveReason reason)
    {
        return reason switch
        {
            ArchiveReason.Paid => "Paid",
            ArchiveReason.Cancelled => "Cancelled",
            ArchiveReason.Deleted => "Deleted",
            _ => "Unknown"
        };
    }

    protected override void OnInitialized()
    {
        newProject.Archive = new Archive();
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            newProject.Archive.Reason = GetDisplayName(Reason);
            MudDialog.Close(DialogResult.Ok(newProject.Archive.Reason)); // Return the new project to the main component
        }
        else
        {
            errorMessage = "Please fill in all required fields correctly before submitting.";
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel(); // Close without saving
    }
}
