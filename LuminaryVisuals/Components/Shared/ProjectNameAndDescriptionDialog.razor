@using MudBlazor
@using System.Text
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent>
        @if(isViewMode){
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudGrid Spacing="4">
                            <MudItem xs="12" sm="12" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Project Name</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectName) ? "-" : context.ProjectName)</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="12" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Footage Links</MudText>
                                @if (!string.IsNullOrEmpty(context.FootageLink))
                                {
                                    @foreach (var word in context.FootageLink.Split(' '))
                                    {
                                        if (StringHelper.IsLink(word))
                                        {
                                            <MudLink Href="@word" Target="_blank" Typo="Typo.body1">@word</MudLink>
                                        }
                                        else
                                        {
                                            <span> @word </span>
                                        }
                                        <span>&nbsp;</span>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.body1">-</MudText>
                                }
                            </MudItem>

                            <MudItem xs="12" sm="6" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Resolution</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectSpecifications?.Resolution) ? "-" : context.ProjectSpecifications.Resolution)</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Footage Size</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectSpecifications?.Size) ? "-" : context.ProjectSpecifications.Size)</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Number of Cameras</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectSpecifications?.CameraNumber) ? "-" : context.ProjectSpecifications.CameraNumber)</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Color Profile</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectSpecifications?.ColorProfile) ? "-" : context.ProjectSpecifications.ColorProfile)</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6" Style="min-height: 60px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default">Audio Details</MudText>
                                <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(context.ProjectSpecifications?.AudioDetails) ? "-" : context.ProjectSpecifications.AudioDetails)</MudText>
                            </MudItem>

                            <MudItem xs="12" Style="min-height: 100px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-2">Deliverables</MudText>
                                <MudPaper Class="pa-4" Elevation="0" Outlined="true">
                                    @if (!string.IsNullOrEmpty(context.Deliverables))
                                    {
                                        var processedDeliverablesHtml = StringHelper.ProcessDeliverables(context.Deliverables);
                                        <MudHtmlViewer Html="@processedDeliverablesHtml" />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body1">-</MudText>
                                    }
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="12" Style="min-height: 100px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-2">Brief Of The Day and Technical Issues Notes</MudText>
                                <MudPaper Class="pa-4" Elevation="0" Outlined="true">
                                    @if (!string.IsNullOrEmpty(context.Description))
                                    {
                                        var processedBriefDayHtml = StringHelper.ProcessDeliverables(context.Description);
                                        <MudHtmlViewer Html="@processedBriefDayHtml" />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body1">-</MudText>
                                    }
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="12" Style="min-height: 100px">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-2">Music Preferences</MudText>
                                <MudPaper Class="pa-4" Elevation="0" Outlined="true">
                                    @if (!string.IsNullOrEmpty(context.MusicPreference))
                                    {
                                        var processedMusicPreferenceHtml = StringHelper.ProcessDeliverables(context.MusicPreference);
                                        <MudHtmlViewer Html="@processedMusicPreferenceHtml" />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body1">-</MudText>
                                    }
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-2">Revisions</MudText>
                                @if (context.Revisions != null && context.Revisions.Any())
                                {
                                    foreach (var revision in context.Revisions.OrderBy(r => r.RevisionId))
                                    {
                                        <MudExpansionPanel Class="mt-2" Expanded=@(revision == context.Revisions.OrderBy(r => r.RevisionDate).Last())>
                                            <TitleContent>
                                                <div class="d-flex align-center">
                                                    @if (revision.isCompleted)
                                                    {

                                                        <span style="font-weight:bold">
                                                            <MudChip T="int" Variant="Variant.Outlined"
                                                            Color="Color.Success"
                                                            Size="Size.Medium">
                                                                Completed
                                                            </MudChip>
                                                        </span>
                                                    }
                                                    <span class="ml-2">Revision Date: @revision.RevisionDate.ToString("MM-dd-yyyy")</span>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudHtmlViewer Html="@revision.Content" />
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.body1">-</MudText>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>

        }
        else{
            <MudGrid Spacing="1">
                <MudItem xs="12" sm="12">
                    <MudTextField Class="mb-5" Label="Project Name" ReadOnly="!isAdmin"
                    Variant="Variant.Outlined" Disabled=!isAdmin @bind-Value="context.ProjectName"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12">

                    <MudTextField T="string"
                    Label="Footage Link" Placeholder="Add link of your footage" AutoGrow="true"
                    Variant="Variant.Outlined" @bind-Value="context.FootageLink" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                    Label="Add Details of Resolution" Placeholder="Add Details of Footage Resolution"
                    Variant="Variant.Outlined" @bind-Value="context.ProjectSpecifications.Resolution"/>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                    Label="Add Details of Footage size"
                    Placeholder="Add Details of Footage size"
                    Variant="Variant.Outlined"
                    @bind-Value="context.ProjectSpecifications.Size"
                    />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                    Label="Add Details of Footage Number of Cameras"
                    Placeholder="Add Details of Number of cameras"
                    Variant="Variant.Outlined"
                    @bind-Value="context.ProjectSpecifications.CameraNumber"
                    />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                    Label="Add Details of Color profile"
                    Placeholder="Add Details of Color profile for each camera"
                    Variant="Variant.Outlined"
                    @bind-Value="context.ProjectSpecifications.ColorProfile"
                    />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                    Label="Add Audio Details"
                    Placeholder="Add Details about Audio recorders"
                    Variant="Variant.Outlined"
                    @bind-Value="context.ProjectSpecifications.AudioDetails" />
                </MudItem>
                <MudItem xs="12" sm="12" Class="mt-5  flex-column">
                    <MudHtmlEditor Outlined="true" Label="Deliverables" Text="Deliverables" Html="@context.Deliverables" 
                    HtmlChanged="OnDeliverableTextChanged" Resizable="true" style="min-height:100px;"
                    Placeholder="Please write down what the deliverables for this project will be">
                    </MudHtmlEditor>
                </MudItem>

                <MudItem xs="12" sm="12" Class="mt-5  flex-column">
                        <MudHtmlEditor Html="@context.Description"  HtmlChanged="OnNoteTextChanged" style="min-height:200px;"
                                       Label="Brief Of The Day and Technical Issues Notes"
                        Placeholder="Example: This wedding was shot on Oahu, at Ko'olau Ballrooms.
This is the Bride's second marriage, and they're a little older than the usual bride and grooms we have.
This is a Hawaiian Wedding, so segments will have prayers in Hawaiian language, but the rest is in English. The Ceremony is in English, the speeches are in English.
The Bride was married like I said before, so this wedding was quite special because she didn't think she'd ever get married again until she met Keola.">
                        </MudHtmlEditor>
                </MudItem>

                <MudItem xs="12" sm="12" Class="mt-5  flex-column">
                    <MudHtmlEditor Outlined="true" Label="Music Preferences"
                    Text="Music Preferences"
                    Html="@context.MusicPreference"
                    HtmlChanged="OnMusicTextChanged"
                    Resizable="true"
                    style="min-height:50px;"
                    Placeholder="Place link to music here and any comments">
                    </MudHtmlEditor>
                </MudItem>

                <MudItem xs="12" sm="12">
                    <MudText Typo=Typo.body1  Class="mt-5 " >Revisions:

                        @if (context.Revisions != null)
                        {
                            <MudExpansionPanels MultiExpansion=false>
                                @foreach (var revision in context.Revisions.OrderBy(r => r.RevisionDate))
                            {
                                    <MudExpansionPanel class="mb-2 editing"  Expanded=@(revision == context.Revisions.OrderBy(r => r.RevisionDate).Last())>
                                    <TitleContent>
                                        <div class="d-flex align-center">
                                            @if (revision.isCompleted)
                                            {

                                                <span style="font-weight:bold">
                                                    <MudChip T="int" Variant="Variant.Outlined"
                                                    Color="Color.Success"
                                                    Size="Size.Medium">
                                                        Completed
                                                    </MudChip>
                                                </span>
                                            }
                                            <span class="ml-2">Revision Date: @revision.RevisionDate.ToString("MM-dd-yyyy")</span>
                                        </div>
                                    </TitleContent>
                                    <ChildContent>
                                        @if(revision.isCompleted && isClient)
                                        {
                                            <MudHtmlViewer Html="@revision.Content" />
                                            <MudText Color=Color.Error Typo=Typo.caption>This revision is completed, you can't change it anymore, please add a new one if you want.</MudText>
                                        }
                                        else
                                        {

                                            <MudHtmlEditor style="margin-top:10px;" Html="@revision.Content"  HtmlChanged="@(text => OnNoteTextChangedForRevision(revision,text))">
                                            </MudHtmlEditor>

                                            if(!isClient){
                                                if (!revision.isCompleted)
                                                {
                                                    <MudButton class="my-3" Color="Color.Info" Variant=Variant.Filled OnClick="(() => MarkCompleted(revision))">Mark as completed!</MudButton>
                                                }
                                                else
                                                {
                                                    <MudButton class="my-3" Variant=Variant.Filled Color=Color.Warning OnClick="(() => MarkCompleted(revision))">Change to uncompleted!</MudButton>
                                                }
                                            }
                                        }

                                    </ChildContent>
                                </MudExpansionPanel>

                            }
                            </MudExpansionPanels>
                        }


                        <!-- Button to add a new revision -->
                        <MudButton Class="" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddRevision">Add New Revision</MudButton>

                    </MudText>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>

    <DialogActions>
        <MudItem sm="12">
            <MudSwitch @bind-Value="isViewMode" @onclick="ViewMode"
            Disabled="_isToggle"
            Color="Color.Info" UncheckedColor="Color.Default"
            ThumbIcon="@Icons.Material.Filled.Edit">
                @(isViewMode ? "View Mode" : "Edit Mode")
            </MudSwitch>
        </MudItem>
        <MudButton OnClick="@Cancel" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large">Close</MudButton>
        <MudButton OnClick="@Save" Color="Color.Info" Variant="Variant.Filled" Size="Size.Large">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance Dialog { get; set; }
    [Parameter] public Project context { get; set; }
    [Parameter] public string currentRole { get; set; }
    [Parameter] public EventCallback<Project> modifiedProject { get; set; }
    private string projectTitle;
    bool isAdmin = false;
    bool isClient = false;
    bool isViewMode = true;
    bool _isToggle = false;
    private async Task ViewMode()
    {
        _isToggle = true;
        isViewMode = !isViewMode;
        StateHasChanged();
        _isToggle = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isAdmin = currentRole == "Admin";
        isClient = currentRole == "Client";
        projectTitle = context.ProjectName;
        await base.OnInitializedAsync();
    }
    private void AddRevision()
    {
        var newRevision = new Revision
            {
                RevisionDate = DateTime.UtcNow, // Set current date by default
                Content = string.Empty // Empty content initially
            };
        context.Revisions.Add(newRevision);
    }
    private void OnNoteTextChanged(string text)
    {
        if (context != null)
        {
            context.Description = text;
        }
    }
    private void MarkCompleted(Revision revision)
    {
        revision.isCompleted = !revision.isCompleted;
    }
    private void OnNoteTextChangedForMusicPreference(string text)
    {
        if (context != null)
        {
            context.MusicPreference = text;
        }
    }
    private void OnNoteTextChangedForRevision(Revision revision,string text)
    {
        if (context != null)
        {
            revision.Content = text;
            var existingRevision = context.Revisions.FirstOrDefault(r => r.RevisionDate == revision.RevisionDate);
            if (existingRevision != null)
                existingRevision.Content = text;
            else
            {
                context.Revisions.Add(revision);
            }
        }
    }
    private void OnDeliverableTextChanged(string text)
    {
        context.Deliverables = text;
    }
    private void OnMusicTextChanged(string text)
    {
        context.MusicPreference = text;
    }
    private async Task Save()
    {
        if (!isAdmin && projectTitle != context.ProjectName)
        {
            Snackbar.Add("You are not authorized to save changes.", Severity.Error);
            return;
        }
        // Remove revisions with empty content
        context.Revisions = context.Revisions.Where(r => !string.IsNullOrWhiteSpace(r.Content)).ToList();

        await modifiedProject.InvokeAsync(context); // Pass the modified project back
        Snackbar.Add($"Successfully Saved.", Severity.Success);
    }

    private void Cancel()
    {
        Dialog.Close(DialogResult.Cancel());
    }
}
<style>
    .mud-expand-panel .mud-expand-panel-header
    {
        background: #1b1b24;
    }

    .mud-expand-panel.mud-panel-expanded.editing {
        margin:0px 0px 15px 0px !important;
    }
    .mud-expand-panel .mud-expand-panel-content
    {
        padding-bottom: 65px !important;
    }
</style>