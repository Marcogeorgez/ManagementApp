@using MudBlazor
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent> 
    <MudGrid Spacing="1">
       <MudItem xs="12" sm="12">
            <MudTextField Class="mb-5" Label="Project Name" ReadOnly="!isAdmin" Variant="Variant.Outlined" @bind-Value="context.ProjectName"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6">

            <MudTextField T="string"
                          Label="Footage Link"
                          Placeholder="Add link of your footage"
                          Variant="Variant.Outlined"
                          @bind-Value="context.footageLink"
                          AutoGrow=true />
       </MudItem>
        <MudItem xs="12" sm="6">
                <MudTextField T="string"
                              Label="Add Details of Resolution"
                              Placeholder="Add Details of Footage Resolution"
                              Variant="Variant.Outlined"
                              @bind-Value="context.ProjectSpecifications.Resolution"
                              AutoGrow=true />
        </MudItem>

        <MudItem xs="12" sm="6">
        <MudTextField T="string"
                      Label="Add Details of Footage size"
                      Placeholder="Add Details of Footage size"
                      Variant="Variant.Outlined"
                      @bind-Value="context.ProjectSpecifications.Size"
                      AutoGrow=true/>
        </MudItem>

        <MudItem xs="12" sm="6">
        <MudTextField T="string"
                      Label="Add Details of Footage Number of Cameras"
                      Placeholder="Add Details of Number of cameras"
                      Variant="Variant.Outlined"
                      @bind-Value="context.ProjectSpecifications.CameraNumber"
                      AutoGrow=true />
        </MudItem>

        <MudItem xs="12" sm="6">
        <MudTextField T="string"
                      Label="Add Details of Color profile"
                      Placeholder="Add Details of Color profile for each camera"
                      Variant="Variant.Outlined"
                      @bind-Value="context.ProjectSpecifications.ColorProfile"
                      AutoGrow=true/>
        </MudItem>

        <MudItem xs="12" sm="6">
                <MudTextField T="string"
                      Label="Deliverables"
                      Placeholder="Write down what the deliverables for this project will be"
                      Variant="Variant.Outlined"
                      @bind-Value="context.Deliverables"
                      AutoGrow=true />
        </MudItem>

        <MudItem xs="12" sm="12">
        <MudText Class="mb-2">Project Description 
                <MudHtmlEditor Html="@context.Description" HtmlChanged="OnNoteTextChanged" style="height:40vh;">
                    <select class="ql-font">
                        <option value="sans-serif"></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                    <select class="ql-size">
                        <option value="small"></option>
                        <option selected></option>
                        <option value="large"></option>
                        <option value="huge"></option>
                    </select>
                    <MudHtmlToolbarOptions />
                    <button class="ql-list" value="check"></button>
                    <button class="ql-clean">Remove Formatting</button>
                </MudHtmlEditor>
            </MudText>
        </MudItem>

                <MudItem xs="12" sm="12">
            <MudTextField T="string"
                          Class="mt-3 mb-3"
                          Label="Music preferences:"
                          Placeholder="Place links to music here and any comments you might have"
                          Variant="Variant.Outlined"
                          @bind-Value="context.MusicPreference"
                          AutoGrow=true />
                                          </MudItem>

            <MudItem xs="12" sm="12">
            <MudText Typo=Typo.body1  Class="mt-5" >Revisions:

                    @if (context.Revisions != null)
                    {
                        @foreach (var revision in context.Revisions)
                        {
                    <MudExpansionPanel Text="@($"Revision Date: {revision.RevisionDate:MM-dd-yyyy}")">
                        <MudHtmlEditor style="margin-top:10px;" Html="@revision.Content" HtmlChanged="@(text => OnNoteTextChangedForRevision(revision,text))">
                            <select class="ql-font">
                                <option value="sans-serif"></option>
                                <option value="serif"></option>
                                <option value="monospace"></option>
                            </select>
                            <select class="ql-size">
                                <option value="small"></option>
                                <option selected></option>
                                <option value="large"></option>
                                <option value="huge"></option>
                            </select>
                            <MudHtmlToolbarOptions />
                            <button class="ql-list" value="check"></button>
                            <button class="ql-clean">Remove Formatting</button>
                        </MudHtmlEditor>
                    </MudExpansionPanel>

                        }
                    }


            <!-- Button to add a new revision -->
            <MudButton Class="mt-5" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddRevision">Add New Revision</MudButton>

        </MudText>
            </MudItem>
            </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large">Close</MudButton>
        <MudButton OnClick="@Save" Color="Color.Info" Variant="Variant.Filled" Size="Size.Large">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public Project context { get; set; }
    [Parameter] public string currentRole { get; set; }
    [Parameter] public EventCallback<Project> modifiedProject { get; set; }
    private string projectTitle;
    bool isAdmin = false;
    protected override void OnInitialized()
    {
        isAdmin = currentRole == "Admin";
        projectTitle = context.ProjectName;
    }
    private void AddRevision()
    {
        var newRevision = new Revision
            {
                RevisionDate = DateTime.UtcNow, // Set current date by default
                Content = string.Empty // Empty content initially
            };
        context.Revisions.Add(newRevision);
    }
    private void OnNoteTextChanged(string text)
    {
        context.Description = text;
    }
    private void OnNoteTextChangedForRevision(Revision revision,string text)
    {
        revision.Content = text;
        var existingRevision = context.Revisions.FirstOrDefault(r => r.RevisionId == revision.RevisionId);
        if(existingRevision != null)
            existingRevision.Content = text;
        else
        {
            context.Revisions.Add(revision);
        }
    }
    private async Task Save()
    {
        if (!isAdmin && projectTitle != context.ProjectName)
        {
            Snackbar.Add("You are not authorized to save changes.", Severity.Error);
            return;
        }
        // Remove revisions with empty content
        context.Revisions = context.Revisions.Where(r => !string.IsNullOrWhiteSpace(r.Content)).ToList();

        await modifiedProject.InvokeAsync(context); // Pass the modified project back
        Snackbar.Add($"Successfully saved the note.", Severity.Info);
        Dialog.Close(DialogResult.Ok(context));
    }

    private void Cancel()
    {
        Dialog.Close(DialogResult.Cancel());
    }
}
