@using LuminaryVisuals.Data
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudText Class="mb-4">Selected Users:</MudText>
            <MudList T=UserRoleViewModel Dense="true" DisablePadding="true">
                @foreach (var user in SelectedUsers)
                {
                    <MudListItem>
                        <MudText>@user.UserName (@user.UserEmail) - ID: @user.UserId</MudText>
                    </MudListItem>
                }
            </MudList>

            <MudTextField @bind-Value="agencyName"
                         Label="Agency Name"
                         Required="true"
                         RequiredError="Agency name is required!"
                         Class="mt-4"/>

            <MudTextField @bind-Value="agencyEmail"
                         Label="Agency Email"
                         Required="true"
                         RequiredError="Agency email is required!"
                         Class="mt-4"/>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  OnClick="ProcessMigration" 
                  Disabled="@(!CanSubmit())">
            Create Agency
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public IEnumerable<UserRoleViewModel> SelectedUsers { get; set; }

    private string agencyName = "";
    private string agencyEmail = "";

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private bool CanSubmit() => 
        !string.IsNullOrWhiteSpace(agencyName) && 
        !string.IsNullOrWhiteSpace(agencyEmail) && 
        SelectedUsers.Any();

    private async Task ProcessMigration()
    {
        try
        {
            var parameters = new DialogParameters
                {
                    { "Message" , $"Are you sure you want to combine these users into a single agency? This will delete all their current projects and THIS IS IRREVERSIBLE!!! "}
                };
            var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
            var toProceed = await dialog.Result;

            if (toProceed.Canceled || !(bool) toProceed.Data)
            {
                return;
            }


            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            try
            {
                // Create new agency with fresh GUIDs
                var newAgencyId = Guid.NewGuid();
                var newConcurrencyStamp = Guid.NewGuid().ToString();
                var newSecurityStamp = Guid.NewGuid().ToString();

                var newAgency = new ApplicationUser
                    {
                        Id = newAgencyId.ToString(),
                        UserName = agencyName,
                        Email = agencyEmail,
                        ConcurrencyStamp = newConcurrencyStamp,
                        SecurityStamp = newSecurityStamp,
                        EmailConfirmed = true
                    };

                // Get all selected user IDs
                var userIds = SelectedUsers.Select(u => u.UserId).ToList();

                // First, get all Google login providers
                var googleLogins = await context.UserLogins
                    .Where(ul => userIds.Contains(ul.UserId) &&
                           ul.LoginProvider == "Google")
                    .ToListAsync();

                // Remove them from context to prevent deletion
                context.UserLogins.RemoveRange(googleLogins);
                await context.SaveChangesAsync();

                // Create new login providers for the agency
                var newLogins = googleLogins.Select(login => new IdentityUserLogin<string>
                    {
                        LoginProvider = login.LoginProvider,
                        ProviderKey = login.ProviderKey,
                        ProviderDisplayName = login.ProviderDisplayName,
                        UserId = newAgencyId.ToString()
                    }).ToList();

                // Add new agency
                await context.Users.AddAsync(newAgency);
                await context.SaveChangesAsync();

                // Add the new login providers
                await context.UserLogins.AddRangeAsync(newLogins);
                await context.SaveChangesAsync();

                // Fetch and update all projects associated with the migrated users
                var projectsToUpdate = await context.Projects
                    .AsTracking()
                    .Where(p => userIds.Contains(p.ClientId) ||
                                userIds.Contains(p.PrimaryEditorId) ||
                                userIds.Contains(p.SecondaryEditorId))
                    .ToListAsync();

                foreach (var project in projectsToUpdate)
                {
                    // Update ClientId if it matches any of the migrated user IDs
                    if (userIds.Contains(project.ClientId))
                    {
                        project.ClientId = newAgencyId.ToString();
                    }

                    // Update PrimaryEditorId if it matches any of the migrated user IDs
                    if (userIds.Contains(project.PrimaryEditorId))
                    {
                        project.PrimaryEditorId = newAgencyId.ToString();
                    }

                    // Update SecondaryEditorId if it matches any of the migrated user IDs
                    if (userIds.Contains(project.SecondaryEditorId))
                    {
                        project.SecondaryEditorId = newAgencyId.ToString();
                    }
                }

                // Save the changes to projects
                await context.SaveChangesAsync();

                // Delete the users
                var usersToDelete = await context.Users
                    .Where(u => userIds.Contains(u.Id))
                    .ToListAsync();

                context.Users.RemoveRange(usersToDelete);
                await context.SaveChangesAsync();

                await transaction.CommitAsync();

                Snackbar.Add("Agency created successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                throw;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating agency: {ex.Message}", Severity.Error);
        }
    }
}