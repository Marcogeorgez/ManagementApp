@using MudBlazor
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent> 
        <MudTextField Class="mb-10" Label="Project Name" Variant="Variant.Outlined" @bind-Value="context.ProjectName"></MudTextField>

        <MudText Class="mb-2">Project Description 
        <MudHtmlEditor Html="@context.Description" HtmlChanged="OnNoteTextChanged" style="height:40vh;">
            <select class="ql-font">
                <option value="sans-serif"></option>
                <option value="serif"></option>
                <option value="monospace"></option>
            </select>
            <select class="ql-size">
                <option value="small"></option>
                <option selected></option>
                <option value="large"></option>
                <option value="huge"></option>
            </select>
            <MudHtmlToolbarOptions />
            <button class="ql-list" value="check"></button>
            <button class="ql-clean">Remove Formatting</button>    <!-- Removes formatting -->
        </MudHtmlEditor>
        </MudText>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large">Close</MudButton>
        <MudButton OnClick="@Save" Color="Color.Info" Variant="Variant.Filled" Size="Size.Large">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public Project context { get; set; }
    [Parameter] public EventCallback<Project> modifiedProject { get; set; }


    private void OnNoteTextChanged(string text)
    {
        context.Description = text;
    }
    private async Task Save()
    {
        await modifiedProject.InvokeAsync(context); // Pass the modified project back
        Snackbar.Add($"Successfully saved the note.", Severity.Info);
        Dialog.Close(DialogResult.Ok(context));
    }

    private void Cancel()
    {
        Dialog.Close(DialogResult.Cancel());
    }
}
