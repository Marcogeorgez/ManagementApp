@using LuminaryVisuals.Data
@using LuminaryVisuals.Data.Entities
@using MudBlazor
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<MudDialog>
    <DialogContent >
        <MudForm @ref="form" @bind-IsValid="@success" >
        <MudGrid Spacing="1" Justify="Justify.Center">
        <MudItem xs="12">
            <MudTextField T="string"
                          Label="Project Name"
                          Value="@newProject.ProjectName"
                          ReadOnly="true"
                          Variant=Variant.Text
                          Class="d-flex justify-center mud-width-full py-2 mb-2" />
        </MudItem>
        <MudItem xs="12">
            <MudNumericField T="decimal" Required=true
                            @bind-Value="clientDiscount"
                            Label="Client Discount"
                            Variant=Variant.Outlined
                            HelperTextOnFocus=true
                            AdornmentText="%"   
                            Adornment="Adornment.Start"
                            Class="d-flex justify-center mud-width-full  mt-n1" />
        </MudItem>
        <MudItem xs="12">
            @foreach (var (group, index) in groupedOptions.Select((g, i) => (g, i)))
            {
                <MudSelect T="decimal?"
                           AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                           Class="d-flex justify-center mud-width-full py-2"
                           Variant="Variant.Outlined"
                           @bind-Value="selectedMultipliers[index]"
                           Label="@GetParameterLabel(group.CalculationParameterId)">                
                        @foreach (var option in group.Options)
                        {
                            <MudSelectItem Class="" T="decimal?" Value="@option.Multiplier" Ripple=true>
                                @option.OptionName</MudSelectItem>
                        }
                    </MudSelect>
                }
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="int" Required=true Min="0"
                          @bind-Value="_cameraNum"
                          Label="Number of Cameras"
                          Variant=Variant.Outlined
                          Class="d-flex justify-center mud-width-full py-2" />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                          @bind-Value="footageSize"
                          Label="Raw footage size"
                          Variant=Variant.Outlined
                          Adornment="Adornment.End"
                          AdornmentText="GB"
                          Class="d-flex justify-center mud-width-full"  />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                          @bind-Value="Misc"
                          Label="Misc (managmenet, footage handeling, feedback)"
                          Adornment="Adornment.End"
                          AdornmentText="hour"
                          Variant=Variant.Outlined
                          Class="d-flex flex-column  mud-width-full" />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                        @bind-Value="prepartsDurationMinutes"
                        Label="Pre parts Duration Minutes"
                        Variant=Variant.Outlined
                        Adornment="Adornment.End"
                        AdornmentText="min"
                        Class="d-flex flex-column  mud-width-full" />
        </MudItem>
        <MudItem xs="6">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                          @bind-Value="documentryMulticameraDuration"
                          Label="Documentary Multicamera Duration"
                          Variant=Variant.Outlined
                          Adornment="Adornment.End"
                          AdornmentText="hour"
                          Class="d-flex flex-column  mud-width-full" />
                </MudItem>
        <MudItem xs="6">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                              @bind-Value="documentryMulticameraDurationMinutes"
                              Variant=Variant.Outlined
                              Adornment="Adornment.End"
                              AdornmentText="min"
                              Class="d-flex flex-column  mud-width-full py-3" />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                              @bind-Value="hightlightDurationMinutes"
                              Label="Highlights Duration Minutes"
                              Variant=Variant.Outlined
                              Adornment="Adornment.End"
                              AdornmentText="min"
                              Class="d-flex flex-column  mud-width-full" />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Required=true Min="0.0M"
                              @bind-Value="socialMediaDurationMinutes"
                              Label="Social Media Duration Minutes"
                              Variant=Variant.Outlined
                              Adornment="Adornment.End"
                              AdornmentText="min"
                              AdornmentColor="Color.Default"
                              Class="d-flex flex-column  mud-width-full" />
        </MudItem>
        <MudItem xs="12">
                    <MudNumericField T="decimal" Min="0.0M"
                          @bind-Value="@_total"
                          Label="Total Hours"
                          Variant=Variant.Outlined Class="d-flex justify-center mud-width-full" />
        </MudItem>
        <MudButton OnClick="CalculateBillableHours" FullWidth=false  Color="Color.Success" Variant=Variant.Outlined>Calculate Total </MudButton>
        </MudGrid>

    </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Large" OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled" Size="Size.Large" OnClick="@Submit">Save Total Hours</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Project newProject { get; set; } = new Project();
    private bool success;
    private bool _isOverriden;
    private MudForm form;
    private List<GroupedOptionsDto> groupedOptions = new List<GroupedOptionsDto>();
    private List<decimal?> selectedMultipliers;
    private int _cameraNum;
    private decimal footageSize;
    private decimal Misc;
    private decimal prepartsDuration;
    private decimal prepartsDurationMinutes;
    private decimal documentryMulticameraDuration;
    private decimal documentryMulticameraDurationMinutes;
    private decimal hightlightDuration;
    private decimal hightlightDurationMinutes;
    private decimal socialMediaDuration;
    private decimal socialMediaDurationMinutes;
    private decimal clientDiscount;
    private decimal _total;

    protected override async Task OnInitializedAsync()
    {
        using (var context = DbFactory.CreateDbContext())
    {
            groupedOptions = await context.CalculationOption
                .GroupBy(co => co.CalculationParameterId)
                .Select(group => new GroupedOptionsDto
                    {
                        CalculationParameterId = group.Key,
                        Options = group.Select(co => new OptionDto { OptionName = co.OptionName, Multiplier = co.Multiplier }).ToList()
                    })
                .ToListAsync();

            selectedMultipliers = groupedOptions.Select(g => g.Options.First().Multiplier)
            .ToList();
        }
    }
    private void CalculateBillableHours()
    {
        decimal? _cameraValue;
        decimal? highlightsDifficulty = selectedMultipliers[0];
        decimal? prepartsPercentage = selectedMultipliers[1];
        decimal? resolution = selectedMultipliers[2];
        decimal? footageQuality = selectedMultipliers[3];
        decimal? _footageSize = footageSize;
        decimal? _Misc = ( Misc * 60 ); // Calculate it in minutes
        decimal? _prepartsDuration =  prepartsDurationMinutes;// Calculate it in minutes
        decimal? _documentryMulticameraDuration = ( documentryMulticameraDuration * 60 ) + documentryMulticameraDurationMinutes; // Calculate it in minutes
        decimal? _hightlightDuration = hightlightDurationMinutes; // Calculate it in minutes
        decimal? _socialMediaDuration = socialMediaDurationMinutes; // Calculate it in minutes
        decimal? _clientDiscount = ( 1 - (clientDiscount / 100) );


        if (_cameraNum <= 2 && _cameraNum > 0)
            _cameraValue = 1;
        else
            _cameraValue = (_cameraNum - 2) * 0.03m + 1;

        // add as minutes
        if (_footageSize <= 300)
            _footageSize = 0;
        else
            _footageSize = (_footageSize - 300m) * 0.4m; // minutes

        // if <= 40 then * 8 if <= 90 then multiply the rest by 6, if > 90 multiply the rest with 4
        _documentryMulticameraDuration = _documentryMulticameraDuration <= 40
            ? _documentryMulticameraDuration * 8
            : _documentryMulticameraDuration <= 90
                ? ( 40 * 8 ) + ( ( _documentryMulticameraDuration - 40 ) * 6 )
                : ( 40 * 8 ) + ( 50 * 6 ) + ( ( _documentryMulticameraDuration - 90 ) * 4 );

        if(_hightlightDuration <= 3 )
        {
            _hightlightDuration = _hightlightDuration * 160;// mins
        }
        else if (_hightlightDuration <= 7)
        {
            _hightlightDuration = ( 3 * 160 ) + (_hightlightDuration - 3) * 110;// mins
        }
        else
        {
            _hightlightDuration = ( 3 * 160 ) + (4 * 110) + ( _hightlightDuration - 7 ) * 60;// mins
        }

        _hightlightDuration *= prepartsPercentage.Value * highlightsDifficulty.Value;
        _socialMediaDuration *= 30;

        // Calculate the total duration of all components
        var totalDuration = _footageSize + _Misc + _prepartsDuration
                            + _documentryMulticameraDuration
                            + _hightlightDuration
                            + _socialMediaDuration;

        // Calculate the quality multiplier
        var qualityMultiplier = footageQuality!.Value * resolution!.Value
                                * _cameraValue;

        // Combine the total duration with the quality multiplier and multiply the final by the discount
        var adjustedValue = (totalDuration * qualityMultiplier) * _clientDiscount;

        // Convert to hours and round to two decimal places
        _total = Math.Round(adjustedValue.Value / 60, 2);

        StateHasChanged();
    }
    private string GetParameterLabel(int parameterId)
    {
        return parameterId switch
        {
            1 => "Highlights Difficulty",
            2 => "Pre-Parts Percentage",
            3 => "Resolution",
            4 => "Footage Quality",
            _ => $"Group {parameterId}"
        };
    }

    public class GroupedOptionsDto
    {
        public int CalculationParameterId { get; set; }
        public List<OptionDto> Options { get; set; }
    }

    public class OptionDto
    {
        public string OptionName { get; set; }
        public decimal? Multiplier { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            newProject.ClientBillableHours = _total;
            MudDialog.Close(DialogResult.Ok(newProject)); 
        }
        else
        {
            var errorMessage = "Please fill in all required fields correctly before submitting.";
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}