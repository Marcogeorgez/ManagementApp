@using LuminaryVisuals.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ISnackbar Snackbar
@inject INotificationService notificationService
@inject CloudflareR2Service cloudflareR2Service
<MudContainer Gutters=false>
    <MudExpansionPanels MultiExpansion="true" Elevation="0">
        <MudText Style="margin-top:5px;" class="ml-3 mt-3" Typo="Typo.h5">Preferences Checklist:</MudText>
        <MudForm @ref="form" Model="@preferences">
            <MudExpansionPanel Text="General Notes" Class="">
                <MudHtmlEditor Outlined="true" Label="General Notes"
                Text="General Notes"
                Html="@preferences.GeneralNotes" OnFileUpload="cloudflareR2Service.UploadFileAsync" 
                HtmlChanged="OnGeneralNoteChange"
                Resizable="true"
                style="min-height:150px; padding-bottom:25px;"
                Placeholder="Please write down any notes you have">
                </MudHtmlEditor>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Links">
                <!-- Website Link -->
                <MudText Typo="Typo.h6">Website Link:</MudText>
                <MudTextField Class="mx-10" Label="Website Link" @bind-Value="preferences.WebsiteLink" Variant="Variant.Outlined" />

                <MudText Typo="Typo.h6" Class="mt-3">Your Dropbox Preview Folder:</MudText>
                @if (currentUser.IsInRole("Admin"))
                {
                    <MudTextField Class="mx-10" T="string" Clearable=true MaxLines=6
                    @bind-Value="preferences.FolderLink" Variant="Variant.Outlined" Placeholder="Link is not assigned yet, please wait while we assign you one." />


                }
                else
                {
                    <TextWithLinks Content="@(string.IsNullOrEmpty(preferences.FolderLink) ? "Link is not assigned yet." :
                            preferences.FolderLink)" />
                }
                <MudText Typo="Typo.h6" Class="mt-3">Your Dropbox Paid Folder:</MudText>
                @if (currentUser.IsInRole("Admin")){
                    <MudTextField Class="mx-10" T="string" Clearable=true MaxLines=6
                    @bind-Value="preferences.PaidFolderLink" Variant="Variant.Outlined" Placeholder="Link is not assigned yet, please wait while we assign you one." />


                    <MudTextField Class="mx-10 my-8" T="string" Clearable=true MaxLines=6 Label="Dropbox Preview Folder Path:"
                    @bind-Value="preferences.PreviewFolderPath" Variant="Variant.Outlined" Placeholder="Path to preview dropbox folder. Ex: FirstFolder/SecondFolder/" />
                    <MudTextField Class="mx-10" T="string" Clearable=true MaxLines=6 Label="Dropbox Paid Folder Path:"
                    @bind-Value="preferences.PaidFolderPath" Variant="Variant.Outlined" Placeholder="Path to paid dropbox folder. Ex: FirstFolder/SecondFolder/" />

                }
                else{
                    <TextWithLinks Content="@(string.IsNullOrEmpty(preferences.PaidFolderLink) ? "Link is not assigned yet." :
                            preferences.PaidFolderLink)" />
                }
            </MudExpansionPanel>
            <MudExpansionPanel Text="Highlights Film">
                <!-- Video Structure -->
                <MudText Typo="Typo.h6">
                    How you like to structure the videos:
                </MudText>
                <MudRadioGroup T="string" @bind-Value="preferences.VideoStructure" >
                    <MudStack Spacing="0" Class="ml-md-10" AlignItems="AlignItems.Start" Row=true>
                        @foreach (var structure in VideoStructureOptions)
                        {
                            <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                        }
                        <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.VideoStructure = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                    </MudStack>
                </MudRadioGroup>

                <!-- Transitions Checklist -->
                <MudText Typo="Typo.h6" Class="mt-3">
                    Transitions VFX to use/avoid:
                </MudText>
                <MudGrid Spacing=4 Class="px-md-10 py-md-2 flex-column flex-md-row">
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Cross Fades:
                        </MudText>
                        <MudRadioGroup T="string" @bind-Value="preferences.CrossFades">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>

                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.CrossFades = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />

                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Fades to Black:
                        </MudText>
                        <MudRadioGroup T="string" @bind-Value="preferences.FadeToBlack">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>

                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                    <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.FadeToBlack = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Black and White:
                        </MudText>
                        <MudRadioGroup T="string" @bind-Value="preferences.BlackAndWhite">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>

                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                    <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.BlackAndWhite = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Double exposure:
                        </MudText>
                        <MudRadioGroup T="string" @bind-Value="preferences.DoubleExposure">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>

                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                    <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.DoubleExposure = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Masking transitions:
                        </MudText>
                        <MudRadioGroup T="string" @bind-Value="preferences.MaskingTransitions">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>
                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.MaskingTransitions = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />

                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Lens flares:
                        </MudText>
                        <MudRadioGroup T="string" Name="Lens flares" @bind-Value="preferences.LensFlares">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>
                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.LensFlares = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />

                            </MudStack>

                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Old Film look:
                        </MudText>
                        <MudRadioGroup T="string" Name="Old Film look" @bind-Value="preferences.OldFilmLook">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>
                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.OldFilmLook = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />

                            </MudStack>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.body1">
                            Picture in picture:
                        </MudText>
                        <MudRadioGroup T="string" Name="Picture in picture" @bind-Value="preferences.PictureInPicture">
                            <MudStack Spacing="0" Class="" AlignItems="AlignItems.Start" Row=true>
                                @foreach (var structure in Options)
                                {
                                    <MudRadio Color="Color.Info" Value="@structure">@structure.ToString()</MudRadio>
                                }
                                    <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.PictureInPicture = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                            </MudStack>

                        </MudRadioGroup>
                    </MudItem>
                </MudGrid>
                <!-- Other Transitions comments -->
                <MudText Class="ml-md-10 ml-2 mt-2" Typo=" Typo.body1">
                    Transitions Comments:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10" T="string" AutoGrow="true"
                Clearable=true MaxLines=6 Style="min-height:80px"  @bind-Value="preferences.OtherTransitions" Variant="Variant.Outlined"
                Placeholder="Ex: With transitions i love them, but i don’t want to go too overboard, I want to keep it more elegant, simple but with a touch of your transitions where you think it would work best.">
                </MudTextField>

                <!-- speeches from the day in the highlights film -->
                <MudRadioGroup T="string" @bind-Value="preferences.UseSpeeches">
                    <MudText Typo="Typo.h6" Class="mt-3 mb-3">
                        Do you like to use speeches from the day in the highlights film:
                    </MudText>
                    <MudStack Spacing="0" Class="ml-md-10 ml-2 mb-2" AlignItems="AlignItems.Start"  Row=false>
                        @foreach (var speech in speeches)
                        {
                            <MudRadio Color="Color.Info" Value="@speech">@speech.ToString()</MudRadio>
                        }
                            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.SettingsBackupRestore" OnClick="@(() => preferences.UseSpeeches = null)" />
                    </MudStack>
                </MudRadioGroup>
                <MudText Class="ml-md-10 ml-2 mt-2" Typo=" Typo.body1">
                    Comments on the use of speeches:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10" T="string" AutoGrow="true"  Clearable=true MaxLines=6
                @bind-Value="preferences.SpeechComments" Variant="Variant.Outlined" Placeholder="">
                </MudTextField>
                <!-- Emphasis on sound design:-->
                <MudRadioGroup T="string" @bind-Value="preferences.SoundDesignEmphasis">
                    <MudText Typo="Typo.h6" Class="mt-3 mb-3">
                        Emphasis on sound design:
                    </MudText>
                    <MudStack Spacing="0" Class="ml-md-10 ml-2 mb-2" AlignItems="AlignItems.Start"  Row=false>
                        @foreach (var _soundDesign in soundDesign)
                        {
                            <MudRadio Color="Color.Info" Value="@_soundDesign">@_soundDesign.ToString()</MudRadio>
                        }
                            <MudIconButton Color="Color.Primary" OnClick="@(() => preferences.SoundDesignEmphasis = null)" Icon="@Icons.Material.Filled.SettingsBackupRestore" />
                    </MudStack>
                </MudRadioGroup>
                <MudText Class="ml-md-10 ml-2 mt-2" Typo=" Typo.body1">
                    Comments on the use of sound deign:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10" T="string" AutoGrow="true" Clearable=true MaxLines=6  @bind-Value="preferences.SoundDesignComments" Variant="Variant.Outlined" Placeholder="">
                </MudTextField>

                <MudText Typo="Typo.h6" Class="mt-5">
                    Music genres or favorite artist + music licensing sites to use:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10 mt-3" T="string" AutoGrow="true"Clearable=true MaxLines=6  @bind-Value="preferences.musicLicensingSites" Variant="Variant.Outlined" Placeholder="">
                </MudTextField>
                <MudText Typo="Typo.h6" Class="mt-5">
                    Samples of songs/films with songs you like:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10 mt-3" T="string" AutoGrow="true" Clearable=true MaxLines=6 @bind-Value="preferences.SongSamples" Variant="Variant.Outlined" Placeholder="">
                </MudTextField>

                <MudText Typo="Typo.h6" Class="mt-5">
                    Please provide us with your LUTs and references of how you like the color to look like:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10 mt-3" T="string" AutoGrow="true" Clearable=true MaxLines=6 @bind-Value="preferences.ColorReferences" Variant="Variant.Outlined" Placeholder="">
                </MudTextField>

                <MudText Typo="Typo.h6" Class="mt-5">
                    Links to films you like or previous edits:
                </MudText>
                <MudTextField Class="ml-md-10 ml-2 mr-10 mt-3" T="string" AutoGrow="true" Clearable=true MaxLines=6 @bind-Value="preferences.FilmReferences" Variant="Variant.Outlined"
                Placeholder="Please include the links and a few comments on what makes these films appeal to you.">
                </MudTextField>
            </MudExpansionPanel>
            <!-- End:-->
            <MudExpansionPanel Text="Documentary film guidelines (length, editing pre parts,link to samples):">
                <MudText Typo="Typo.h6" Class="mt-5">
                    Sample documentary edits for reference by Lumianry Visuals:
                </MudText>
                <MudContainer Class="ml-5">
                    <MudLink Class="mt-5" Color="Color.Info" Href="https://www.dropbox.com/scl/fo/cci4a6gh80peazb8qf887/AKBjCHu4-hJkWC3ZRx_EDOM?rlkey=tf5n1yrr9c1zwv96cqzoyaqgk&st=mwe4pe68&dl=0">
                        Example 1 (redirect to dropbox)
                    </MudLink>
                    <br />
                    <MudLink Color="Color.Info"  Href="https://www.dropbox.com/scl/fi/51ww6bl6ry1f7znwndo8l/Matt-Vanessa-Full-Documentary-Edit-02.mp4?rlkey=qhu5etpvkyxm99e1ec1j7ye9b&st=27yis1xd&dl=0 ">
                        Example 2 (redirect to dropbox)
                    </MudLink>
                    <MudText Typo="Typo.h6" Class="mt-5">
                        It all varies on what happens on the day of the event. Above I have linked two samples.<br />
                        The idea is simple, <u>Document EVERYTHING</u>: <br />
                    </MudText>
                    <MudText Class="mr-8 ml-8">
                        Getting ready moments <br />
                        Short casual interviews with any of the guests/bridal party/ couple etc if any<br />
                        Gift exchange<br />
                    </MudText>
                    <MudText Class="mr-8 ml-8" Color="Color.Success">
                        First look <InfoTooltipForClientEditingGuidelines TooltipText="@_LavalierMic" /><br />
                    </MudText>
                    <MudText Class="mr-8 ml-8">
                        Moments during photoshoot <br />
                        Details shots  from the decoration of the ceremony and people gathering<br />
                    </MudText>
                    <MudText Class="mr-8 ml-8" Color="Color.Success">
                        Entrances to the ceremony <InfoTooltipForClientEditingGuidelines TooltipText="@_LavalierMic" /><br />
                        Ceremony <InfoTooltipForClientEditingGuidelines TooltipText="@_LavalierMic" /><br />
                        Ceremony Exit <InfoTooltipForClientEditingGuidelines TooltipText="@_LavalierMic" /><br />
                    </MudText>
                    <MudText Class="mr-8 ml-8">
                        Cocktail hour shots with people hanging around<br />
                        Detail shots of the venue<br />
                        People getting inside the venue<br />

                    </MudText>
                    <MudText Class="mr-8 ml-8" Color="Color.Success">
                        Entrances of the bridal party and couple <InfoTooltipForClientEditingGuidelines TooltipText="@_recordedAudio" /> <br />
                        First Dance <InfoTooltipForClientEditingGuidelines TooltipText="@_djAudio" /> <br />
                        Parent Dances <InfoTooltipForClientEditingGuidelines TooltipText="@_djAudio" /><br />
                        Cake cutting <InfoTooltipForClientEditingGuidelines TooltipText="@_djAudio" /> <br />
                        Toasts  <InfoTooltipForClientEditingGuidelines TooltipText="@_djAudio" /><br />
                    </MudText>
                    <MudText Class="mr-8 ml-8">
                        Dancing clips<br />
                    </MudText>
                    <MudText Class="mt-2">
                        Highlighted in <span style="color: var(--mud-palette-success) !important">Green</span> must be recorded with at least two cameras. At least one of the cameras should have a good angle at specific time.
                    </MudText>
                </MudContainer>
                <MudText Typo="Typo.h6" Class="mt-5">
                    Client Samples:
                </MudText>
                <MudTextField T="string" Clearable=true MaxLines=6 AutoGrow="true" @bind-Value="preferences.ClientSamples" Variant="Variant.Outlined"
                Placeholder="Write if you have any samples on what you prefer">
                </MudTextField>
            </MudExpansionPanel>

            @if(currentUser.IsInRole("Admin"))
            {
                <MudExpansionPanel Text="Payonner Details" Class="">
                    <MudTextField Class="mx-10 my-3" Label="Payonner Company Name" @bind-Value="payoneerSettings.CompanyName" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Payonner Company URL" @bind-Value="payoneerSettings.CompanyUrl" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Payonner First Name" @bind-Value="payoneerSettings.FirstName" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Payonner Last Name" @bind-Value="payoneerSettings.LastName" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Payonner Email" @bind-Value="payoneerSettings.Email" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Payonner Currency" @bind-Value="payoneerSettings.Currency" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Bill Address" @bind-Value="payoneerSettings.Address" Variant="Variant.Outlined" />
                    <MudTextField Class="mx-10 my-3" Label="Tax Id" @bind-Value="payoneerSettings.TaxId" Variant="Variant.Outlined" />

                </MudExpansionPanel>
            }
            <!-- Save Button -->
            <MudItem xs="12" Class="d-flex align-self-center">
                <MudButton Class="my-5 d-flex align-end justify-center object-right py-1" Variant="Variant.Outlined" Color="Color.Info" OnClick="SavePreferences">Save Preferences</MudButton>
            </MudItem>
        </MudForm>
    </MudExpansionPanels>
</MudContainer>
@code {
    private MudForm form;
    private static readonly string[] VideoStructureOptions = new[]
    {
        "Linear",
        "Hybrid",
    };
    private void ResetVideoStructure(ref object perferenceValue)
    {
        perferenceValue = null;
    }
    private static readonly string[] Options = new[]
    {
        "Yes",
        "No",
        "Few",
    };
    private static readonly string[] speeches = new[]
    {
        "No, music only",
        "Only when they have said something really cool",
        "Yes, a few from each moment of the day",
        "Yes, put great emphasis on them, built the film around speeches of the day",
    };
    private static readonly string[] soundDesign = new[]
    {
        "Only music, no other sounds",
        "A few audio from the day would be nice, documentary feel (Only if there’s something good to use)",
        "High focus on sound design",
    };
    private const string _djAudio = "(Requires: External Recorded Audio from DJ/LAVALIER MIC from the person talking!)";
    private const string _recordedAudio = "(Requires: External Recorded Audio!)";
    private const string _LavalierMic = "(Requires: Audio from Lavalier mic from the person talking!)";


    private ClientEditingGuidelines? preferences = new();
    private ClientEditingGuidelines? originalPreferences = new();

    [Inject] PayoneerSettingsService payoneerSettingsService { get; set; } = default!;
    private PayoneerSettings? payoneerSettings = new();

    [Parameter] public ClaimsPrincipal? currentUser { get; set; }
    private string? _currentUserId; // current user id to check if he is an admin/client

    [Parameter] public string userId { get; set; } = default!;// userId which is the preferences for

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(userId))
        {
            preferences = await GetPreferences(userId);
            originalPreferences = preferences is not null ? Clone(preferences) : new();

            _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
            payoneerSettings = await payoneerSettingsService.GetSettingsForUserAsync(userId);
            if (payoneerSettings is null)
            {
                payoneerSettings = await payoneerSettingsService.CreateSettingsAsync(userId);
            }

        }
    }
    private void OnGeneralNoteChange(string text)
    {
        preferences.GeneralNotes = text;
    }
    private async Task SavePreferences()
    {
        try
        {
            preferences.UpdatedAt = DateTime.UtcNow;
            preferences.UserId = userId;
            using var context = DbFactory.CreateDbContext();
            if (preferences.Id == 0)
            {
                // New preferences
                context.ClientEditingGuidelines.Add(preferences);
            }
            else
            {
                // Update existing preferences
                context.ClientEditingGuidelines.Update(preferences);
            }
            await context.SaveChangesAsync();
            await payoneerSettingsService.UpdateSettingsAsync(payoneerSettings!);
            Snackbar.Add($"We have saved your preferences successfully!", Severity.Info);
            var clientUser = await context.Users.FirstOrDefaultAsync(u => u.Id == userId); // which is getting updated notification for (client)
                                                                                           // _currentUserId: Id of current user (admin/client)
            var changedProperties = GetChangedProperties();
            await notificationService.ClientPreferencesUpdated(clientUser!, _currentUserId!,changedProperties);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add("Sorry, We couldn't update your preferences, Please reload to try again or contact support!", Severity.Error);
        }

    }
    private async Task<ClientEditingGuidelines> GetPreferences(string _userId)
    {
        using var context = DbFactory.CreateDbContext();
        if(_userId != null)
        {
            preferences = await context.ClientEditingGuidelines
            .FirstOrDefaultAsync(ceg => ceg.UserId == _userId);
        }
        if(preferences != null)
        {
            return preferences;
        }
        else
        {
            return new ClientEditingGuidelines();
        }
    }

    private void OnValidated()
    {
        Console.WriteLine("Form validated!");
    }

    private ClientEditingGuidelines Clone(ClientEditingGuidelines source)
    {
        return new ClientEditingGuidelines
            {
                Id = source.Id,
                UserId = source.UserId,
                VideoStructure = source.VideoStructure,
                CrossFades = source.CrossFades,
                FadeToBlack = source.FadeToBlack,
                BlackAndWhite = source.BlackAndWhite,
                DoubleExposure = source.DoubleExposure,
                MaskingTransitions = source.MaskingTransitions,
                LensFlares = source.LensFlares,
                OldFilmLook = source.OldFilmLook,
                PictureInPicture = source.PictureInPicture,
                OtherTransitions = source.OtherTransitions,
                TransitionComments = source.TransitionComments,
                UseSpeeches = source.UseSpeeches,
                SpeechComments = source.SpeechComments,
                SoundDesignEmphasis = source.SoundDesignEmphasis,
                SoundDesignComments = source.SoundDesignComments,
                musicLicensingSites = source.musicLicensingSites,
                SongSamples = source.SongSamples,
                ColorReferences = source.ColorReferences,
                FilmReferences = source.FilmReferences,
                ClientSamples = source.ClientSamples,
                GeneralNotes = source.GeneralNotes,

            };
    }
    private Dictionary<string, string> GetChangedProperties()
    {
        var changedProperties = new Dictionary<string, string>();

        if (originalPreferences is null || preferences is null)
            return changedProperties;

        var properties = typeof(ClientEditingGuidelines).GetProperties();
        foreach (var property in properties)
        {
            if (property.Name is "CreatedAt" or "UpdatedAt" or "Id" or "UserId" or "WebsiteLink" or "FolderLink" or "PaidFolderLink" or "PaidFolderPath" or "PreviewFolderPath")
                continue; // Skipping metadata fields

            var originalValue = property.GetValue(originalPreferences)?.ToString();
            var newValue = property.GetValue(preferences)?.ToString();

            if (originalValue != newValue)
            {
                var formattedPropertyName = StringHelper.AddSpacesBetweenCapitals(property.Name);

                changedProperties[formattedPropertyName] = newValue ?? string.Empty;
            }
        }
        return changedProperties;
    }
}

<style>
    div.mud-grid.mud-grid-spacing-xs-2 {
        align-items: center;
    }
</style>