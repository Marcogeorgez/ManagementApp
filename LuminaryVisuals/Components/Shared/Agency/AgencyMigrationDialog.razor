@using LuminaryVisuals.Data
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IDialogService DialogService


<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudForm @ref="form" @bind-IsValid="@isFormValid" @bind-Errors="@formErrors" ValidationDelay="0">
                <MudTextField T="string"
                              @bind-Value="agencyName"
                              Label="Agency Name"
                              Required="true"
                              RequiredError="Agency name is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateAgencyName))" />

                <MudTextField T="string"
                              @bind-Value="agencyEmail"
                              Label="Agency Email"
                              Required="true"
                              RequiredError="Agency email is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateAgencyEmail))"/>

                <MudText Class="mb-4 mt-4">Selected Users:</MudText>
                <MudList T=UserRoleViewModel Dense="true" DisablePadding="true">
                    @foreach (var user in SelectedUsers)
                    {
                        <MudListItem>
                            <MudText>@user.UserName (@user.UserEmail) - ID: @user.UserId</MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="ProcessMigration"
                   Disabled="@(!CanSubmit())">
            Create Agency
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public IEnumerable<UserRoleViewModel> SelectedUsers { get; set; }

    private MudForm form;
    private string[] formErrors = Array.Empty<string>();
    private bool isFormValid;

    private string agencyName = string.Empty;
    private string agencyEmail = string.Empty;

    private void Cancel() => MudDialog.Cancel();

    private bool CanSubmit() =>
        isFormValid;

    private IEnumerable<string> ValidateAgencyName(string name)
    {
        var isNameTaken = UserManager.Users.Any(u => u.UserName == name);
        if (string.IsNullOrWhiteSpace(name))
            yield return "Agency name is required";
        else if (name.Length < 3)
            yield return "Agency name must be at least 3 characters long";
        else if (name.Length > 100)
            yield return "Agency name cannot exceed 100 characters";
        else if (isNameTaken)
            yield return "Agency name is already taken! Please choose different name.";
    }

    private  IEnumerable<string> ValidateAgencyEmail(string email)
    {
        var isEmailTaken = UserManager.Users.Any(u => u.Email == email);
        if (string.IsNullOrWhiteSpace(email))
            yield return "Agency name is required";
        else if (email.Length < 3)
            yield return "Agency name must be at least 3 characters long";
        else if (email.Length > 100)
            yield return "Agency name cannot exceed 100 characters";
        else if (isEmailTaken)
            yield return "Email cannot exceed 256 characters.";
    }

    private async Task ProcessMigration()
    {
        try
        {
            if (!isFormValid)
            {
                Snackbar.Add("Please correct the form errors and ensure users are selected", Severity.Warning);
                return;
            }
            var confirmationResult = await ShowConfirmationDialog();

            if (!confirmationResult)
                return;

            await MigrateUsersToNewAgency();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating agency: {ex.Message}", Severity.Error);
        }
    }

    private async Task<bool> ShowConfirmationDialog()
    {
        var parameters = new DialogParameters
        {
            { "Message", "Are you sure you want to combine these users into a single agency? All of their projects will be assigned to the new agency." }
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
        var result = await dialog.Result;

        return !result.Canceled && (bool) result.Data;
    }

    private async Task MigrateUsersToNewAgency()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        await using var transaction = await context.Database.BeginTransactionAsync();

        try
        {

            var userIds = SelectedUsers.Select(u => u.UserId).ToList();

            var googleLogins = await FetchAndRemoveGoogleLogins(context, userIds);

            var users = await context.Users
            .Where(u => userIds.Contains(u.Id))
            .ToListAsync();

            await SaveMigratedUsers(context, googleLogins, users);

            var newAgencyId = Guid.NewGuid();
            var newAgency = CreateNewAgency(newAgencyId);

            var newLogins = CreateNewLogins(googleLogins, newAgencyId);
            await AssignRoleToUser(newAgency, "Client");

            await SaveNewAgencyAndLogins(context, newAgency, newLogins);
            await UpdateProjectOwnership(context, userIds, newAgencyId);
            await DeleteOldUsers(context, userIds);

            await transaction.CommitAsync();

            Snackbar.Add("Agency created successfully!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch
        {
            await transaction.RollbackAsync();
            throw;
        }
    }

    private ApplicationUser CreateNewAgency(Guid newAgencyId) => new()
        {
            Id = newAgencyId.ToString(),
            UserName = agencyName,
            Email = agencyEmail,
            ConcurrencyStamp = Guid.NewGuid().ToString(),
            SecurityStamp = Guid.NewGuid().ToString(),
            EmailConfirmed = true
        };

    private async Task<List<IdentityUserLogin<string>>> FetchAndRemoveGoogleLogins(ApplicationDbContext context, List<string> userIds)
    {
        var googleLogins = await context.UserLogins
            .Where(ul => userIds.Contains(ul.UserId) && ul.LoginProvider == "Google")
            .ToListAsync();

        context.UserLogins.RemoveRange(googleLogins);
        await context.SaveChangesAsync();

        return googleLogins;
    }
    private async Task AssignRoleToUser(ApplicationUser user, string roleName)
    {
        var roleExist = await RoleManager.RoleExistsAsync(roleName);
        if (!roleExist)
        {
            var role = new IdentityRole(roleName);
            await RoleManager.CreateAsync(role);
        }

        if (!await UserManager.IsInRoleAsync(user, roleName))
        {
            await UserManager.AddToRoleAsync(user, roleName);
        }
    }

    private List<IdentityUserLogin<string>> CreateNewLogins(List<IdentityUserLogin<string>> googleLogins, Guid newAgencyId) =>
        googleLogins.Select(login => new IdentityUserLogin<string>
            {
                LoginProvider = login.LoginProvider,
                ProviderKey = login.ProviderKey,
                ProviderDisplayName = login.ProviderDisplayName,
                UserId = newAgencyId.ToString()
            }).ToList();

    private async Task SaveNewAgencyAndLogins(ApplicationDbContext context, ApplicationUser newAgency, List<IdentityUserLogin<string>> newLogins)
    {
        await context.Users.AddAsync(newAgency);
        await context.SaveChangesAsync();

        await context.UserLogins.AddRangeAsync(newLogins);
        await context.SaveChangesAsync();
    }

    private async Task SaveMigratedUsers(ApplicationDbContext context, List<IdentityUserLogin<string>> googleLogins, List<ApplicationUser> users)
    {
        var googleProviderKeys = googleLogins.Select(login => login.ProviderKey).ToList();

        // Fetch existing migrated users based on the provider keys
        var existingMigratedUsers = await context.MigratedUsers
            .Where(mu => googleProviderKeys.Contains(mu.GoogleProviderKey))
            .ToListAsync();

        // Create new entries for logins that do not exist in the database
        var newMigratedUsers = googleLogins
            .Where(login => !existingMigratedUsers.Any(mu => mu.GoogleProviderKey == login.ProviderKey))
            .Select(login =>
            {
                var user = users.FirstOrDefault(u => u.Id == login.UserId);
                return new MigratedUser
                    {
                        GoogleProviderKey = login.ProviderKey,
                        Name = user?.UserName,
                        Email = user?.Email,
                        MigrationDate = DateTime.UtcNow
                    };
            }).ToList();

        // Add only new entries to the context
        context.MigratedUsers.AddRange(newMigratedUsers);

        // Save changes if there are new entries
        if (newMigratedUsers.Any())
            await context.SaveChangesAsync();
    }

    private async Task UpdateProjectOwnership(ApplicationDbContext context, List<string> userIds, Guid newAgencyId)
    {
        var projectsToUpdate = await context.Projects
            .AsTracking()
            .Where(p => userIds.Contains(p.ClientId) ||
                        userIds.Contains(p.PrimaryEditorId) ||
                        userIds.Contains(p.SecondaryEditorId))
            .ToListAsync();

        foreach (var project in projectsToUpdate)
        {
            project.ClientId = userIds.Contains(project.ClientId) ? newAgencyId.ToString() : project.ClientId;
            project.PrimaryEditorId = userIds.Contains(project.PrimaryEditorId) ? newAgencyId.ToString() : project.PrimaryEditorId;
            project.SecondaryEditorId = userIds.Contains(project.SecondaryEditorId) ? newAgencyId.ToString() : project.SecondaryEditorId;
        }

        await context.SaveChangesAsync();
    }

    private async Task DeleteOldUsers(ApplicationDbContext context, List<string> userIds)
    {
        var usersToDelete = await context.Users
            .Where(u => userIds.Contains(u.Id))
            .ToListAsync();

        context.Users.RemoveRange(usersToDelete);
        await context.SaveChangesAsync();
    }
}