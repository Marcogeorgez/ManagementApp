@using LuminaryVisuals.Data.Entities
@using MudBlazor
@using System.Text

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid Spacing="1">
                <MudItem xs="12" sm="12">
                    <MudTextField T="string"
                                  Label="Project Name"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.ProjectName"
                                  Required="true"
                                  AutoGrow="true" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Shoot Date"
                                   Variant="Variant.Outlined"
                                   Date="newProject.ShootDate" Editable=false
                                   DateChanged="@(date =>{newProject.ShootDate = date;
                                        if (date.HasValue)
                                        {
                                           newProject.DueDate = date.Value.AddDays(WeeksToDueDateDefault != 0 ?
                                               (WeeksToDueDateDefault * 7) : 28);
                                         }
                                         })"
                Required="true" />
                </MudItem>
                @if (!_isClientView)
                {
                    <MudItem xs
                    ="12" sm
                    ="6">
                        <MudDatePicker Label="Due Date"
                                   Variant="Variant.Outlined"
                                   Class="d-flex flex-column mud-width-full"
                                   Date="newProject.DueDate"
                                   Editable="false"
                                   DateChanged="@(date => newProject.DueDate = date)"
                                   Required="true" />
                </MudItem>
                }

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Footage Link"
                                  Placeholder="Add link of your footage"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.FootageLink"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  AutoGrow="true" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Resolution"
                                  Placeholder="Add Details of Footage Resolution"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.ProjectSpecifications.Resolution"
                                  AutoGrow="true"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  RequiredError="This is required when the status of project is not 'Upcoming'" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Footage Size"
                                  Placeholder="Add Details of Footage size"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.ProjectSpecifications.Size"
                                  AutoGrow="true"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  RequiredError="This is required when the status of project is not 'Upcoming'" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Number of Cameras"
                                  Placeholder="Add Details of Number of cameras"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.ProjectSpecifications.CameraNumber"
                                  AutoGrow="true"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  RequiredError="This is required when the status of project is not 'Upcoming'" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Color Profile"
                                  Placeholder="Add Details of Color profile for each camera"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.ProjectSpecifications.ColorProfile"
                                  AutoGrow="true"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  RequiredError="This is required when the status of project is not 'Upcoming'" />
                </MudItem>
                @if (!_isClientView)
                {
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Working Month"
                                       Variant="Variant.Outlined"
                                       Date="newProject.WorkingMonth"
                                       DateChanged="@(date => newProject.WorkingMonth = date ?? DateTime.Today)"
                                       Required="true"
                                       FixDay="1"
                                       DateFormat="MM/yyyy"
                                       Class="" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="ProgressBarValue"
                                   Label="Progress"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Variant="Variant.Outlined"
                                   @bind-Value="ProgressEnum"
                                   Class="">
                            <MudSelectItem Value="ProgressBarValue.Zero">0%</MudSelectItem>
                            <MudSelectItem Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                            <MudSelectItem Value="ProgressBarValue.Forty">40%</MudSelectItem>
                            <MudSelectItem Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                            <MudSelectItem Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                            <MudSelectItem Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="ProjectStatus" Variant=Variant.Outlined
                                   Label="Status"
                                   @bind-Value="newProject.Status"
                                   Required="true"
                                   AnchorOrigin="Origin.BottomCenter">
                            @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                            {
                                <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                <MudItem xs="12" sm="12">
                    <MudTextField T="string"
                                  Label="Deliverables"
                                  Placeholder="Write down what the deliverables for this project will be"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.Deliverables"
                                  Required="@(newProject.Status != ProjectStatus.Upcoming)"
                                  RequiredError="Please write down what the deliverables for this project will be"
                                  AutoGrow="true" />
                </MudItem>

                <MudItem xs="12" Class="mb-3 pl-5 pr-5 ">
                    <MudText Typo="Typo.body1" Class="mb-2">Description:</MudText>
                    <div class="border-solid border-2 @(_hasError ? "mud-input-error" : "")">
                    <MudHtmlEditor Outlined="true"
                                   Text="Description" 
                                   Html="@newProject.Description"
                                   HtmlChanged="OnNoteTextChanged"
                                   Resizable="true"
                                   style="min-height:210px;" 
                                   Placeholder="Example: This wedding was shot on Oahu, at Ko'olau Ballrooms.
This is the Bride's second marriage, and they're a little older than the usual bride and grooms we have.
This is a Hawaiian Wedding, so segments will have prayers in Hawaiian language, but the rest is in English. The Ceremony is in English, the speeches are in English.
The Bride was married like I said before, so this wedding was quite special because she didn't think she'd ever get married again until she met Keola.">
                        
                        <select class="ql-font">
                            <option value="sans-serif"></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                        <MudHtmlToolbarOptions />
                        <button class="ql-list" value="check"></button>
                        <button class="ql-clean">Remove Formatting</button>
                    </MudHtmlEditor>


                    </div>
                    @if (_hasError)
                    {
                        <MudText Color="Color.Error" Class="mt-2 mud-input-error d-flex mud-input-helper-text mud-input-error mud-input-control-helper-container px-2 ">
                            @_errorText
                        </MudText>
                    }
                </MudItem>

                @if (_isClientView)
                {
                    <MudItem xs="12" sm="12">
                        <MudSelect T="ProjectStatus" Variant=Variant.Outlined
                                   Label="Status"
                                   @bind-Value="newProject.Status"
                                   Required="true"
                                   AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="ProjectStatus.Upcoming">Upcoming</MudSelectItem>
                                <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                }


                <MudItem xs="12" sm="12">
                    <MudTextField T="string"
                                  Label="Music Preferences"
                                  Placeholder="Place link to music here and any comments"
                                  Variant="Variant.Outlined"
                                  @bind-Value="newProject.MusicPreference"
                                  AutoGrow="true" />
                </MudItem>


                <MudItem xs="12" sm="12">
                    <MudText Typo="Typo.body2" Color="Color.Error" Class="d-flex mud-input-helper-text mud-input-error" Style="@ErrorMessageDisplay">
                        @errorMessage
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large">Cancel</MudButton>
        <MudButton Size="Size.Large" Color="Color.Success" Variant="Variant.Filled" OnClick="@Submit">Add Project</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int WeeksToDueDateDefault { get; set; }
    [Parameter] public bool _isClientView { get; set; }

    private Project newProject = new Project();
    private MudForm form;
    private string errorMessage;
    private bool success;
        private bool _hasError = false;
    private string _errorText = string.Empty;
    private enum ProgressBarValue
    {
        Zero = 0,
        Twenty = 20,
        Forty = 40,
        Sixty = 60,
        Eighty = 80,
        Hundred = 100
    }
    private ProgressBarValue ProgressEnum
    {
        get => (ProgressBarValue) newProject.ProgressBar;
        set => newProject.ProgressBar = (int) value;
    }
    protected override void OnInitialized()
    {
        newProject.WorkingMonth = DateTime.Today;
    }

    private string ErrorMessageDisplay => string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;";

    private void Cancel()
    {
        MudDialog.Cancel(); // Close without saving
    }

    private void OnNoteTextChanged(string text)
    {
        newProject.Description = text;
    }

    private async void Submit()
    {

        await form.Validate();
        if (string.IsNullOrWhiteSpace(newProject.Description) && newProject.Status != ProjectStatus.Upcoming)
        {
            _hasError = true;
            _errorText = "Description is required";
            success = false;
            return;
        }
        if (form.IsValid)   
        {
            MudDialog.Close(DialogResult.Ok(newProject)); // Return the new project to the main component
        }
        else
        {
            errorMessage = "Please fill in all required fields correctly before submitting.";
        }
    }

}
