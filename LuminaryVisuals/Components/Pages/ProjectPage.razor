@page "/project"
@using System.Text.Json
@using LuminaryVisuals.Components.Shared.Logging
@using LuminaryVisuals.Components.Shared.ProfileComponents
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserServices UserServices
@inject ProjectService projectServices
@inject CircuitUpdateBroadcaster Broadcaster
@implements IDisposable

@attribute [Authorize(Policy = "RequireAdminClientEditor")]

@if (_loading)
{
    <SplashScreen />
}
else
{
<MudDataGrid @ref=_dataGrid T="Project" Items="@projects" SortMode="SortMode.Single" @key=_gridKey
    Dense=true Hover="true" Bordered=true Breakpoint="Breakpoint.Sm"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
    ColumnsPanelReordering=true
    ShowColumnOptions=true
    Groupable=true
    ShowMenuIcon=true
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.OnRowClick"
    ReadOnly=false
    StartedEditingItem="@StartedEditingItem" 
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges"
    RowClassFunc="@GetRowClass">
    

    <ToolBarContent>
        <MudText Typo="Typo.h4">Your Projects</MudText>
            <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
        </MudHidden>
    </ColGroup>
    <Columns>

        @if (RoleBasedColumns[_currentRole].Contains("InternalId"))
        {
                        <PropertyColumn Property="x => x.InternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center;"
                            DragAndDropEnabled="false" Groupable="false" Editable=true InitialDirection="SortDirection.Ascending">
                <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                                <div style="height:100px;"
                                class="drag-handle @(draggedProject?.ProjectId == context.Item.ProjectId ? "being-dragged" : "") flex-row  justify-center align-center  "
                                draggable="true"
                         @ondragstart="@(() => HandleDragStart(context.Item))"
                         @ondragover:preventDefault
                         @ondragover="@(() => HandleDragOver(context.Item))"
                         @ondrop:preventDefault
                         @ondrop="@(() => HandleDropForInternalOrder(context.Item))"
                         @ondragenter="@(() => HandleDragEnter(context.Item))"
                         @ondragleave="@(() => HandleDragLeave(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                        @context.Item.InternalOrder
                    </div>
                    </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                        <MudText>@context.Item.InternalOrder</MudText>
                            </MudHidden>
                </CellTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ExternalId"))
        {
            <PropertyColumn Property="x => x.ExternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center;"
                            DragAndDropEnabled="false" Groupable="false" Editable=true InitialDirection="SortDirection.Ascending">
                <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                            <div class="drag-handle flex-row  justify-center align-center " style="height:100px;" draggable="true"
                         @ondragstart="@(() => HandleDragStart(context.Item))"
                         @ondragover:preventDefault
                         @ondragover="@(() => HandleDragOver(context.Item))"
                         @ondrop:preventDefault
                         @ondrop="@(() => HandleDropForExternalOrder(context.Item))"
                         @ondragenter="@(() => HandleDragEnter(context.Item))"
                         @ondragleave="@(() => HandleDragLeave(context.Item))">
                        <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                        @context.Item.ExternalOrder
                    </div>
                    </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                            <MudText>@context.Item.ExternalOrder</MudText>
                            </MudHidden>
                </CellTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
        {
        <PropertyColumn Property="x => x.Description" Title="Project"
                                Hideable="true" CellStyle="text-align:center;" CellClass="outlined-dialog-max-content"
                        Groupable="false" Editable=false Required=false>
            <CellTemplate>
                        @if (context.Item.Status != ProjectStatus.Upcoming && (string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Resolution) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Size) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.CameraNumber) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.ColorProfile)))
                        {
                            <div class="d-flex gap-2 flex-row  justify-center align-center">
                    <MudTextField T="string" 
                                  Value="context.Item.ProjectName"
                                  ReadOnly="true" Variant="Variant.Outlined"
                                  Immediate="true" Adornment="Adornment.End" 
                                              AdornmentIcon="@Icons.Material.Filled.OpenInNew"
                                  OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                    </MudTextField>
                                <MudTooltip Text="Missing Information for the project, please fill it as soon as possible." Color="Color.Error" Placement="Placement.Bottom" Arrow="true">
                            <MudIcon Class="d-flex" Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                        </MudTooltip>

                            </div>
                }
                else
                {
                    <MudTextField T="string"
                                  Value="context.Item.ProjectName"
                                  ReadOnly="true"
                                  Immediate="true" Adornment="Adornment.End" Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Filled.OpenInNew" 
                                  OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                    </MudTextField>
                }

            </CellTemplate>
            <EditTemplate>
                <MudText Style="display:none;" />
            </EditTemplate>
        </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientName") || isAdminView == true)
        {
            <PropertyColumn Property="x => x.Client.UserName" Title="Client Name" Grouping="_groupByClientName"
                                Hideable="true" Groupable="true" CellStyle="text-align:center;" CellClass="outlined-dialog-max-content"
                                Editable=false Required=false >
                <CellTemplate>
                    <MudTextField T="string"
                                  Value="context.Item.Client.UserName"
                                  ReadOnly="true"
                                  Immediate="true" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.OpenInNew"
                                  AutoGrow=true Variant="Variant.Outlined"
                                  MaxLines="4"
                                  OnAdornmentClick="@(() => OpenViewClientEditingGuidelinesComponent(context.Item))">
                    </MudTextField>
                </CellTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                        </GroupTemplate>
                <EditTemplate>

                    @if (Clients != null && Clients.Any() && _isAdminView)
                    {
                        <MudSelect T="string"
                                   AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                   Class="d-flex justify-center mud-width-full py-2"
                                   Variant="Variant.Outlined"
                                   Label="Client Name"
                                   @bind-Value="context.Item.ClientId">
                            @foreach (var client in Clients)
                            {
                                <MudSelectItem Class="" T="string" Value="@client.UserId" Ripple=true>
                                    @client.UserName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }
                </EditTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
        {
                    <PropertyColumn Property="x => x.PrimaryEditor.UserName" Title="Primary Editor" Hideable="true" 
                        Groupable="true" Editable=false Required=false  CellStyle="text-align:center;" >
                    <GroupTemplate> 
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                    </GroupTemplate>   
                    <EditTemplate>
                    @if (Editors != null && Editors.Any() && _isAdminView){
                    <MudSelect T="string"
                               AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                               Class="d-flex justify-center mud-width-full py-2"
                               Variant="Variant.Outlined"
                               Label="Primary Editor"
                               @bind-Value="context.Item.PrimaryEditorId">
                               @foreach (var editor in Editors)
                               {
                                    <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                        @editor.UserName
                                    </MudSelectItem>
                               }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }
                    </EditTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
        {
            <PropertyColumn Property="x => x.SecondaryEditor.UserName" Title="2nd Editor" Hideable="true" 
                Groupable="true" Editable=false Required=false CellStyle="text-align:center;">
                <EditTemplate>
                    @if (Editors != null && Editors.Any() && _isAdminView)
                    {
                        <MudSelect T="string"
                                   AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                   Class="d-flex justify-center mud-width-full py-2"
                                   Variant="Variant.Outlined"
                                   Label="Secondary Editor"
                                   @bind-Value="context.Item.SecondaryEditorId">
                            @foreach (var editor in Editors)
                            {
                                <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                    @editor.UserName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }

                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
        {
            <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle=""> 
                <CellTemplate>
                    <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                </CellTemplate>

                <EditTemplate Context="context">
                            @if (!_isClientView)
                            {
                                <MudSelect T="ProgressBarValue" Label="Progress" Class="mt-3" 
                                AnchorOrigin="Origin.BottomCenter"
                                Value="@((ProgressBarValue)context.Item.ProgressBar)"
                Variant="Variant.Outlined"
                ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                </MudSelect>            
                }
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Progress" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
        {
            <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" 
                Groupable="true" Editable=false CellStyle="text-align:center;">
                        <EditTemplate Context="context">
                            @* If changed from here I will later need of a way to change due date*@
                            @if(_isAdminView || _isClientView){
                            <MudDatePicker Label="Shoot Date"
                                           Variant="Variant.Outlined"
                                           Date="@context.Item.ShootDate"
                                           DateChanged="@(date => context.Item.ShootDate = date)"
                                           Class="mt-3"
                                           Required="true" />
                            }
                        </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Shoot Date" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
        {
            <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" CellStyle="text-align:center;"
                Groupable="true" Editable=false >
                        <EditTemplate>
                            @if(@_isAdminView){
                            <MudDatePicker Label="Due Date"
                                           Variant="Variant.Outlined"
                                           Class="mt-3"
                                           Date="@context.Item.DueDate"
                                           DateChanged="@(date => context.Item.DueDate = date)"
                                           Required="true" />
                            }
                        </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Due Date" />
                </GroupTemplate>
            </PropertyColumn>

        }
        @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
        {
            <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true"
                CellStyle="text-align:center;" Groupable="true" Editable=false>
                <EditTemplate Context="context">
                    @if(@_isAdminView){
                    <MudDatePicker Required="true"
                        Label="Working Month"
                        Variant="Variant.Outlined"
                        Class="mt-3"
                        FixDay="1"
                        DateFormat="MM/yyyy"
                        Date="@context.Item.WorkingMonth"
                        DateChanged="@(date => context.Item.WorkingMonth = date)" />
                    }
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Working Month" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("Status"))
        {           
            <PropertyColumn Property="x => x.FormatStatus" Title="Status" CellStyleFunc="@_cellStyleFunc" Hideable="true" Groupable="true">
                <EditTemplate Context="context">
                            <MudSelect T="ProjectStatus" Class="mt-3"
                                       Variant="Variant.Outlined"
                                       Label="Status"
                                       @bind-Value="context.Item.Status"
                                       Required="true">
                                @if(!_isClientView){
                                @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                {
                                <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                }
                                }
                                else{
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                                }
                            </MudSelect>
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Status" />
                </GroupTemplate>
            </PropertyColumn>
                    
        }
        @if (RoleBasedColumns[_currentRole].Contains("AdminStatus"))
        {
            <PropertyColumn Property="x => x.FormatAdminStatus" Title="Admin Status" Hideable="true" Groupable="true" CellStyle="text-align:center;">
                <EditTemplate Context="context">
                    <MudSelect T="AdminProjectStatus" Class="mt-3"
                               Variant="Variant.Outlined"
                               Label="Admin Status"
                               @bind-Value="context.Item.AdminStatus"
                               Required="true">
                        @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                            {
                            <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                            }
                    </MudSelect>
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Payment Status" />
                </GroupTemplate>
            </PropertyColumn>

        }
        @if (RoleBasedColumns[_currentRole].Contains("PrivateNotes"))
        {
                <PropertyColumn Property="x => x.NotesForProject" CellClass="outlined-dialog-max-content" Title="Private Notes" Hideable="true" Groupable="false" CellStyle="text-align:center;"
                            Editable=false Required=false>
                <CellTemplate>
                    <MudTextField T="string"
                                  Class="outlined-dialog-max-content"
                                  Text="Notes" Variant="Variant.Outlined"
                                  ReadOnly="true" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.OpenInNew"
                                  AutoGrow=false
                                  MaxLines="1"
                                  OnAdornmentClick="@(() => OpensPrivateNoteForProject(context.Item))">
                        <MudTooltip Text="Click to view/change private note">
                            <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" />
                        </MudTooltip>
                    </MudTextField>
                </CellTemplate>
                <EditTemplate>
                        <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        }

        <PropertyColumn Property="x => x.Link" Title="Project Link" Required=false Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(@context.Item.Link))
                {
                <MudTooltip Text="@context.Item.Link" >
                <MudLink Underline="Underline.Always" Style="color:dodgerblue !important" Href="@context.Item.Link">
                    Project Link
                    </MudLink>
                </MudTooltip>
                }
                else
                {
                    <span>Unassigned</span>
                }
            </CellTemplate>
            <EditTemplate>
                <div class="@EditTemplateCss">
                    <MudTextField Label="Project Link" Variant="Variant.Outlined" @bind-Value="@context.Item.Link" />
                </div>
            </EditTemplate>
            </PropertyColumn>
        @* Editors Info*@
        @if (RoleBasedColumns[_currentRole].Contains("AdminBillableHoursView"))
        {
            <PropertyColumn Property="x => x.PrimaryEditorDetails.BillableHours" Title="P.Editor Logged Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.PrimaryEditorDetails.Overtime" Title="P.Editor Overtime" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            @if (_isAdminView)
            {
                <PropertyColumn Property="x => x.PrimaryEditorDetails.AdjustmentHours" Title="P.Adjustment" Required=false Groupable=false Editable=true CellStyle="text-align:center;">
            </PropertyColumn>                
            }
            else
            {
            <PropertyColumn Property="x => x.PrimaryEditorDetails.AdjustmentHours" Title="P.Adjustment" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            }
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.FinalBillableHours" Title="P.Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        <PropertyColumn Property="x => x.PrimaryEditorDetails.PaymentAmount" Title="P.Editor Payment" Groupable="false" Hideable="true" 
            Editable="false" CellStyle="text-align:center;">
                    <CellTemplate>
                        @if (context.Item?.PrimaryEditorDetails?.PaymentAmount >= 0)
                        {
                            <MudText>$@context.Item.PrimaryEditorDetails.PaymentAmount</MudText>
                        }
                        else
                        {
                            <MudText>N/A</MudText>
                        }
                    </CellTemplate>
            <EditTemplate>
                <MudText Style="display:none;" />
            </EditTemplate>
        </PropertyColumn>
            <PropertyColumn Property="x => x.SecondaryEditorDetails.BillableHours" Title="Sec.Editor Logged Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.SecondaryEditorDetails.Overtime" Title="Sec.Editor Overtime" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            @if (_isAdminView)
            {
                <PropertyColumn Property="x => x.SecondaryEditorDetails.AdjustmentHours" Title="Sec.Adjustment" Required=false Groupable=false Editable=true CellStyle="text-align:center;">
                </PropertyColumn>
            }
            else
            {
                <PropertyColumn Property="x => x.SecondaryEditorDetails.AdjustmentHours" Title="Sec.Adjustment" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                    <EditTemplate>
                        <MudText Style="display:none;" />
                    </EditTemplate>
                </PropertyColumn>
            }
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.FinalBillableHours" Title="Sec.Editor Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.SecondaryEditorDetails.PaymentAmount" Title="Sec.Editor Payment" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <CellTemplate>
                    @if (context.Item?.SecondaryEditorDetails?.PaymentAmount >= 0)
                    {
                        <MudText>$@context.Item.SecondaryEditorDetails.PaymentAmount</MudText>
                    }
                    else
                    {
                        <MudText>N/A</MudText>
                    }
                </CellTemplate>
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>

        }
        @if (RoleBasedColumns[_currentRole].Contains("BillableHours")){
            
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
        {
            <PropertyColumn Property="x => x.ClientBillableHours" Title="Client Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientBillableAmount"))
        {
            if(_isAdminView)
            {
            <PropertyColumn Property="x => x.ClientBillableAmount" Title="Client Payment" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        }
        else if(_isClientView)
            {
                <PropertyColumn Property="x => x.ClientBillableAmount" Title="Payment Amount" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;">
                    <CellTemplate Context="context">
                        @{
                            var project = context.Item as Project;
                            @if (project?.IsPaymentVisible == true)
                            {
                                @project.ClientBillableAmount
                            }
                            else
                            {
                                <span>Unassigned</span>
                            }
                        }
                    </CellTemplate>
                    <EditTemplate>
                        <MudText Style="display:none;" />
                    </EditTemplate>
                </PropertyColumn>
            }
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
        {
            <TemplateColumn T="Project" Title="Payment Visible" Sortable="false" Filterable="false" Groupable=false Hideable="true">
                <CellTemplate>
                    <MudItem Align="center">
                    <MudIconButton Icon="@(context.Item.IsPaymentVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                   Color="@(context.Item.IsPaymentVisible ? Color.Success : Color.Error)"
                                   OnClick="@(async () => await TogglePaymentVisibility(context.Item))"
                                   Size="Size.Small" />
                        </MudItem>
                </CellTemplate>
            </TemplateColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("Actions"))
        {
            <TemplateColumn CellClass="" Title="Actions" Hideable="true" Groupable="false" >
                <CellTemplate>
                      <MudStack Spacing="0" Class="mb-1">
                        @if (_isArchived && _isAdminView)
                        {
                            <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="mb-1">
                                @(context.Item.IsArchived ? "Unarchive" : "Archive")
                            </MudButton>
                            <MudButton Color="Color.Error"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => DeleteDialog(context.Item))"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Class="mb-1">
                                Delete
                            </MudButton>
                        }
                        else if(!_isArchived && _isAdminView)
                        {
                            <MudButton Color="Color.Warning"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => ArchiveProject(context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="mb-1">
                                Archive
                            </MudButton>
                        }
                    </MudStack>

                        @if(_isAdminView || _isEditorView)
                        {
                        <MudStack Spacing="0">
                        <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => TimeCalculator(context.Item))"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Class="mb-1">
                                Billable
                        </MudButton>
                        <MudButton Color="Color.Success"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => Logging(context.Item,_currentUserId))"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   Class="mb-1">
                            Logging
                        </MudButton>
                        </MudStack>
                        }

                </CellTemplate>
            </TemplateColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("Archive"))
        {
            @if (_isArchived)
                {
                    <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" />
                }
        }        
    </Columns>
    
    <PagerContent>
        <MudDataGridPager T="Project"/>
    </PagerContent>
</MudDataGrid>
    <MudContainer Class="justify-start d-flex flex-grow-1 gap-2 flex-wrap container-for-toggles" Gutters=false>
    @if(isAdminView)
    { 
    <MudStack Spacing="0" Class=" mt-5">
        <MudSwitch T="bool" Class="ml-15" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
        <MudStack Row=true>
        <MudSwitch T="bool" Class="" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin</MudSwitch>
        <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor</MudSwitch>
        <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client</MudSwitch>
        </MudStack>
    </MudStack>
            <MudDivider style="border-width:0px !important;" />
            <div class="flex-none d-flex " style=" flex: none !important; margin-left:80px;" />

            <MudButton Color="Color.Success"
                       Variant="Variant.Filled" Size="Size.Small"
        StartIcon="@Icons.Material.Filled.AddCircle"
        OnClick="@(() => AddProjectDialogAsync(DialogOptions))" Class="">
        Add Project
    </MudButton>
            <MudSpacer />

            <MudDivider style="border-width:0px !important;" />

    <MudTooltip Text="Download Filtered Projects ">
    <MudButton OnClick="DownloadFilteredAsCsv" Class="" Size="Size.Small"
    Color="Color.Primary" Variant="Variant.Filled" 
    StartIcon="@Icons.Material.TwoTone.Download" IconSize="Size.Large">
            Download Filtered
    </MudButton>
    </MudTooltip>
    <MudTooltip Text="Download All Projects">
                <MudButton OnClick="DownloadAllProjects" Class="" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small"
            StartIcon="@Icons.Material.TwoTone.Download" IconSize="Size.Large">
                Backup Projects
        </MudButton>
    </MudTooltip>
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>

            <MudSpacer />
            </MudHidden>

    }
    else if (_isClientView)
    {
        <MudButton Color="Color.Success" Class="mt-10"
                    Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddCircle" Size="Size.Small"
                    OnClick="@(() => CreateProjectDialogAsync(DialogOptions))">
            Create New Project
        </MudButton>
    }
    </MudContainer>
    <CascadingValue Value="@timezoneOffsetMinutes" IsFixed="false">
        <Chat userId="@_currentUserId" isAdminView="@isAdminView" isClientView="@_isClientView" isEditorView="@_isEditorView" />
    </CascadingValue>
}
@code {
    bool _loading = true;
    [CascadingParameter]
    public ClaimsPrincipal? currentUser { get; set; }
    private MudDataGrid<Project> _dataGrid;
    private IEnumerable<Project> projects = new List<Project>();
    private Project projectToDelete;
    private readonly DialogOptions DialogOptions = new() { CloseButton = true, FullScreen = false };
    private bool _isArchived;
    private bool _isAdminView;
    private bool isAdminView;
    private bool _isEditorView;
    private bool _isClientView;
    private bool _groupByClientName;
    private int timezoneOffsetMinutes; // Gets User local time to change timing according to his own.
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string EditTemplateCss => _currentRole == "Client" ? "d-none" : "d-block";
    private string? CircuitId;
    private List<UserRoleViewModel.UserProjectViewModel> Editors = new List<UserRoleViewModel.UserProjectViewModel>();
    private List<UserRoleViewModel.UserProjectViewModel> Clients = new List<UserRoleViewModel.UserProjectViewModel>();
    [Inject]
    private IConfirmationService ConfirmationService { get; set; } = default!;
    private enum ProgressBarValue
    {
        Zero = 0,
        Twenty = 20,
        Forty = 40,
        Sixty = 60,
        Eighty = 80,
        Hundred = 100
    }
    protected override async Task OnInitializedAsync()
    {
        // Get the current user ID
        _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!;
        if (currentUser.IsInRole("Admin"))
        {
            _currentRole = "Admin";
            _isAdminView = true;
            isAdminView = true;
        }
        else if (currentUser.IsInRole("Editor"))
        {
            _currentRole = "Editor";
            _isEditorView = true;
            _isAdminView = false;

        }
        else if (currentUser.IsInRole("Client"))
        {
            _currentRole = "Client";
            _isClientView = true;
            _isAdminView = false;
        }
        CircuitId = Guid.NewGuid().ToString(); 
        Broadcaster.Subscribe(CircuitId, HandleProjectsUpdated);
        await LoadProjects();
        _loading = false;
    }    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            if (firstRender)
            {
                var offset = await JSRuntime.InvokeAsync<int>("getTimezoneOffset");
            }
        }

    private async Task HandleProjectsUpdated()
    {
        await InvokeAsync(async () =>
        {
            await LoadProjects();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        if (CircuitId != null)
        {
            Broadcaster.Unsubscribe(CircuitId);
        }
    }

    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","AdminStatus","PrivateNotes","AdminBillableHoursView","ClientBillable","ClientBillableAmount","EditorBillable","Actions","Archive" } },
        { "Editor", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "rogressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","PrivateNotes","BillableHours","EditorBillable", "Actions"} },
        { "Client", new List<string> { "ExternalId", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate","ClientBillableAmount", "Status" } }
    };
    private Guid _gridKey = Guid.NewGuid();


    private async Task AdminToggle()
    {
        _gridKey = Guid.NewGuid();
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
    }
    private async Task EditorToggle()
    {
        _gridKey = Guid.NewGuid();
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        // await LoadProjectsForEditor(context.UserId)
    }
    private async Task ClientToggle()
    {
        _gridKey = Guid.NewGuid();
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjects();
    }

    private async Task ArchivedToggle()
    {
        _isArchived = !_isArchived;
        await LoadProjects();
    }
    //  Load project for admin/editor view only (will later be split )
    private async Task LoadProjects()
    {
        if (_isAdminView)
        {
            projects = await projectServices.GetProjectsAsync(_isArchived);
            Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
            Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
        }
        // for client view which will fetch his own projects only)
        else if (_isClientView && isAdminView == false)
            LoadProjectsForClient();
        // this is for the admin to see all the projects but from the client view
        else if (_isClientView && isAdminView == true || _isEditorView && isAdminView == true)
        {
            projects = await projectServices.GetProjectsAsync(_isArchived);
            Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
            Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
        }
        else if (_isEditorView && isAdminView == false)
            LoadProjectsForEditors();
        StateHasChanged();
    }
    // Loading Projects for Editors View
    private async Task LoadProjectsForEditors()
    {
        projects = await projectServices.GetProjectsForEditors(_isArchived, _currentUserId);
        StateHasChanged();
    }
    // Loading Projects for Client View
    private async Task LoadProjectsForClient()
    {
        projects = await projectServices.GetProjectsForClients(_isArchived, _currentUserId);
        StateHasChanged();
    }

    // Add new project dialog
    private async Task AddProjectDialogAsync(DialogOptions options)
    {   
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;

        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView}
        };

        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", dialogParameters,options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    private async Task CreateProjectDialogAsync(DialogOptions options)
    {
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;
        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView}
        };
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Create New Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.WorkingMonth = DateTime.Today;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    // Deleting project in archive
    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        if (!await ConfirmationService.Confirm($"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"))
        {            
            return;
        }

        await projectServices.DeleteProjectAsync(projectToDelete.ProjectId);
        await LoadProjects();
        StateHasChanged();
    }
    // Archiving and Unarchiving the project
    public async Task ArchiveProject(Project project)
    {
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var archivedProject = (string)result.Data;
            if(archivedProject != null)
            {
                await projectServices.ArchiveProjectAsync(project.ProjectId, archivedProject);
                await projectServices.ReorderProjectAsync(project.ProjectId, project.InternalOrder = null, false);
                LoadProjects();
            }
        }
    }
    private async Task UnarchiveProject(Project project)
    {
        if (await ConfirmationService.Confirm($"Are you sure you'd like to unarchive this project {project.ProjectName}?"))
        {
            await projectServices.UnarchiveProjectAsync(project.ProjectId);
            await LoadProjects();
        }

    }
    // Opens Description Dialog
    private async void OpenDescriptionDialog(Project context)
    {
        var parameters = new DialogParameters
        {
            { "context", context },
            { "currentRole", _currentRole},
            { "modifiedProject", EventCallback.Factory.Create<Project>(this, async (modifiedProject) =>
                {
                    await updateProject(modifiedProject);
                })
            }
        };
        var options = new DialogOptions { };
        DialogService.Show<ProjectNameAndDescriptionDialog>("Project Description", parameters, options);
    }

    // Update description and save it to DB
    private async Task updateProject(Project modifiedProject)
    {
        if (modifiedProject is Project project)
        {
            await projectServices.UpdateProjectAsync(project);
        }
    }
    private async void OpenViewClientEditingGuidelinesComponent(Project context)
    {
        var parameters = new DialogParameters
        {
            { "userId", context.ClientId },
        };
        var options = new DialogOptions { FullScreen = true };
        DialogService.Show<ViewClientEditingGuidelinesComponent>("Client Preferences", parameters, options);
    }

    // Opens private note for modification
    private async Task OpensPrivateNoteForProject(Project context)
    {
        var parameters = new DialogParameters
        {
            { "project", context },
        };
        var options = new DialogOptions { FullScreen = true };
        var dialog = await DialogService.ShowAsync<PrivateNoteForProjectComponent>("Private Notes", parameters, options);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            var project = (Project) result.Data;
            await projectServices.UpdateProjectAsync(project);
            Snackbar.Add($"Successfully updated the project notes", Severity.Info);
            await LoadProjects();
        }
    }


    // Calculates Total Client Billable hours based on a formula.
    private async Task TimeCalculator( Project project)
    {
        var dialogParameters = new DialogParameters<ProjectTotalHoursCalculatorDialog> {
            { nameof(ProjectTotalHoursCalculatorDialog.newProject), project },
            { "_isAdminView", _isAdminView}
        };
        var dialog = await DialogService.ShowAsync<ProjectTotalHoursCalculatorDialog>("Time Calculator", dialogParameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var _project = (Project) result.Data;
            if (_project != null)
            {
                await projectServices.UpdateProjectBillableHoursAsync(_project);
                Snackbar.Add($"Successfully updated the billable hours to {_project.ClientBillableHours} of project", Severity.Info);
                await LoadProjects();
            }
        }
    }

    private async Task Logging(Project project,string currentUserId)
    {
        var dialogParameters = new DialogParameters<LoggingDialog> {
            { nameof(LoggingDialog.currentProject), project },
            { "CurrentUserId", currentUserId}
        };
        var dialog = await DialogService.ShowAsync<LoggingDialog>("Logging Hours", dialogParameters);
        var result = await dialog.Result;
        await LoadProjects();

    }

    // Checks if there is changes between two projects in any property excluding the excluded.
    private bool HasNoSignificantChanges(Project original, Project modified, params string[] excludeProperties)
    {
        if (original == null || modified == null)
            return original == modified;  // Both null = true, one null = false

        var excluded = new HashSet<string>(excludeProperties, StringComparer.OrdinalIgnoreCase);  // Added case-insensitive comparison
        var properties = typeof(Project).GetProperties();

        foreach (var prop in properties)
        {
            if (excluded.Contains(prop.Name))
                continue;

            var originalValue = prop.GetValue(original);
            var modifiedValue = prop.GetValue(modified);

            if (!Equals(originalValue, modifiedValue))
                return false;
        }
        return true;
    }

    Project beforeModification;
    void StartedEditingItem(Project project)
    {
        beforeModification = JsonSerializer.Deserialize<Project>(
            JsonSerializer.Serialize(project))!;
    }
    void CanceledEditingItem(Project project)
    {

    }
    private async Task CommittedItemChanges(Project project)
    {
        try
        {
            if (_isClientView)
            {
                if (HasNoSignificantChanges(beforeModification, project, "ExternalOrder", "Status", "ShootDate") == false)
                {
                    if(project.Status != ProjectStatus.Upcoming && (
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Resolution) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Size) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.CameraNumber) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.ColorProfile) ))
                    {
                        throw new Exception("Please Open Project Brief and fill-out all the information before changing status.");
                    }
                    await projectServices.UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }
            else if(_isAdminView)
            {
                await projectServices.UpdateProjectAsync(project);
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                StateHasChanged();
            }
            else
            {
                if (HasNoSignificantChanges(beforeModification, project, "Status", "ShootDate", "DueDate", "ProgressBar", "WorkingMonth") == false)
                {
                    await projectServices.UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }

        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message ,Severity.Warning);
            await LoadProjects();
        }        
    }
    private Func<Project, string> _cellStyleFunc => x =>
    {
        string style = string.Empty;

        switch (x.Status)
        {
            case ProjectStatus.Upcoming:
                style += "background-color: #9999FF;";
                break;

            case ProjectStatus.Scheduled:
                style += "background-color: var(--mud-palette-info-lighten);";
                break;
            case ProjectStatus.Ready_To_Edit:
                style += "background-color: var(--mud-palette-error);";
                break;
            case ProjectStatus.Working:
                style += "background-color: #6732cf;";
                break;

            case ProjectStatus.Delivered:
                style += "background-color:  var(--mud-palette-success);";
                break;
            case ProjectStatus.Review:
                style += "background-color: var(--mud-palette-warning-lighten);";
                break;

            case ProjectStatus.Revision:
                style += "background-color: var(--mud-palette-error-lighten);";
                break;
            case ProjectStatus.Finished:
                style += "background-color: var(--mud-palette-success-darken);";
                break;

            default:
                style += "background-color: transparent;";
                break;
        }
        style += "color: rgba(255,255,255,1); text-align: center; ";

        return style;
    };

    // Downloading Filtered as CSV
    private async Task DownloadFilteredAsCsv()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the filtered CSV file?"))
            {
                var filteredItems = _dataGrid.FilteredItems.ToList();
                var csvContent = GenerateCsvContentFiltered(filteredItems);
                var filename = $"Projects_{DateTime.Now:MM_dd_yyyy_HH_mm_ss}.csv";
                await DownloadFile(filename, csvContent);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private async Task DownloadAllProjects()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the All Projects as CSV file?"))
            {
                var csvContent = ConvertProjectsToCsv(projects.ToList());
                var filename = $"All_Projects_{DateTime.Now:MM_dd_yyyy_HH_mm_ss}.csv";
                await DownloadFile(filename, csvContent);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private string FormatStringToCsv(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        // If the string contains commas, newline characters, or double quotes, wrap it in double quotes
        if (value.Contains(",") || value.Contains("\n") || value.Contains("\r") || value.Contains("\""))
        {
            // Escape double quotes by replacing them with two double quotes
            value = "\"" + value.Replace("\"", "\"\"") + "\"";
        }

        return value;
    }

    public string ConvertProjectsToCsv(List<Project> projects)
    {
        var sb = new System.Text.StringBuilder();

        // Add CSV headers with the additional fields for editor details
        sb.AppendLine("ID,Project Name,Project Description,Client Name,Primary Editor Name,Secondary Editor Name,Progress,Shoot Date,Due Date,Status, Payment Status,Client Billable Hours,Client Billable Amount,Primary Editor Billable Hours,Primary Editor Overtime,Primary Editor Payment Amount,Secondary Editor Billable Hours,Secondary Editor Overtime,Secondary Editor Payment Amount, Revisions");

        // Add each project as a CSV line
        foreach (var project in projects)
        {
            // Populate the names for the client and editors
            var clientName = project.Client?.UserName ?? "N/A";
            var primaryEditorName = project.PrimaryEditor?.UserName ?? "N/A";
            var secondaryEditorName = project.SecondaryEditor?.UserName ?? "N/A";
            // Remove HTML tags from the Description
            var descriptionWithoutHtml = System.Text.RegularExpressions.Regex.Replace(project.Description, "<.*?>", String.Empty); // Removes HTML tags
            descriptionWithoutHtml = FormatStringToCsv(descriptionWithoutHtml);

            // Retrieve the Billable Hours and Payment Amounts for Client and Editors
            var clientBillableHours = project.ClientBillableHours?.ToString("0.##") ?? "0";
            var clientBillableAmount = project.ClientBillableAmount?.ToString("0.##") ?? "0";

            var primaryEditorBillableHours = project.PrimaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var primaryEditorOvertime = project.PrimaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var primaryEditorPaymentAmount = project.PrimaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";

            var secondaryEditorBillableHours = project.SecondaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var secondaryEditorOvertime = project.SecondaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var secondaryEditorPaymentAmount = project.SecondaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";
            var revisions = project.Revisions != null && project.Revisions.Any()
            ? project.Revisions.Select(r =>
                $"{r.RevisionDate.ToString("MM-dd-yyyy")}: {r.Content.Replace("\n", " ").Replace("\r", "")}")
                .Aggregate((current, next) => current + " || " + next)
               : string.Empty;
            revisions = FormatStringToCsv(revisions);
            // Append the project data to the CSV
            sb.AppendLine($"{project.ProjectId},{project.ProjectName},{descriptionWithoutHtml},{clientName},{primaryEditorName},{secondaryEditorName},{project.ProgressBar},{project.FormattedShootDate},{project.FormattedDueDate},{project.FormatStatus},{project.FormatAdminStatus},{clientBillableHours},{clientBillableAmount},{primaryEditorBillableHours},{primaryEditorOvertime},{primaryEditorPaymentAmount},{secondaryEditorBillableHours},{secondaryEditorOvertime},{secondaryEditorPaymentAmount},{revisions}");
        }

        return sb.ToString();
    }


    private async Task DownloadFile(string filename, string content)
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                Convert.ToBase64String(bytes)
            );
            Snackbar.Add($"File has started downloading!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"File save error: {ex.Message}", Severity.Error);
        }
    }
    private string GenerateCsvContentFiltered(List<Project> projects)
    {
        // Create CSV header
        decimal total = 0;
        var csv = new System.Text.StringBuilder();
        csv.AppendLine(string.Join(",",
            nameof(Project.ProjectName),
            "Price"
            ));


        // Add data rows
        foreach (var project in projects)
        {
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(project.ProjectName),
                project.ClientBillableAmount
            ));
            if(project.ClientBillableAmount != null )
                total += project.ClientBillableAmount.Value;
        }
        csv.AppendLine();
        csv.AppendLine(string.Join(",",
            $"Total Price: {total}",
        $" Date: {DateTime.Now:MM-dd-yyyy}"));
        return csv.ToString();
    }

    private string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        // Escape commas and quotes
        value = value.Replace("\"", "\"\"");
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = $"\"{value}\"";
        }
        return value;
    }

    // DRAGGING FUNCTIONALITIES 
    private List<Project> _Projects { get; set; } = new();
    private Project draggedProject;
    private Project dropTarget;
    private bool isDragging;



    private string GetRowClass(Project project, int rowNumber)
    {
        var classes = new List<string> { };

        if (isDragging && dropTarget?.ProjectId == project.ProjectId)
            classes.Add("drop-target");

        if (draggedProject?.ProjectId == project.ProjectId)
            classes.Add("being-dragged");

        return string.Join(" ", classes);
    }

    private void HandleDragStart(Project project)
    {
        draggedProject = project;
        isDragging = true;
        StateHasChanged();
    }

    private void HandleDragOver(Project target)
    {
        if (draggedProject?.ProjectId == target.ProjectId)
            return;
    }

    private void HandleDragEnter(Project target)
    {
        if (draggedProject?.ProjectId != target.ProjectId)
        {
            dropTarget = target;
            StateHasChanged();
        }
    }

    private void HandleDragLeave(Project target)
    {
        if (dropTarget?.ProjectId == target.ProjectId)
        {
            dropTarget = null;
            StateHasChanged();
        }
    }

    private async Task HandleDropForInternalOrder(Project targetProject)
    {
        try
        {
            if (draggedProject == null || draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.InternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,false);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;

            await RefreshGridData();
        }
    }
    private async Task HandleDropForExternalOrder(Project targetProject)
    {
        try
        {
            if (draggedProject == null || draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.ExternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,true);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;

            await RefreshGridData();
        }
    }

    private async Task RefreshGridData()
    {
        projects = ( await projectServices.GetProjectsAsync() ).ToList();
        await LoadProjects();
        StateHasChanged();
    }

    private async Task TogglePaymentVisibility(Project project)
    {
        try
        {
            var newValue = !project.IsPaymentVisible;
            project.IsPaymentVisible = newValue;
            await projectServices.UpdateProjectAsync(project);
            if (newValue == true)
            { Snackbar.Add($"Payment is visible to the client now.", Severity.Success); }
            else
            {
                Snackbar.Add($"Payment is hidden from the client now.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update payment visibility", Severity.Error);
            Console.WriteLine($"Error updating payment visibility: {ex.Message}");
        }
    }
}


<style>
    .cursor-move {
        cursor: grab;
    }
    
    .being-dragged {
        opacity: 0.6;
        cursor: grabbing;
        background-color: var(--mud-palette-success);
    }
    
    .drop-target {
        border-top: 2px solid var(--mud-palette-primary);

    }
    
    .drag-handle {
        display: flex;
        align-items: center;
        padding: 4px;
        cursor: grab;
    }
    
    .drag-handle:hover {
        background-color: var(--mud-palette-background-grey);
        border-radius: 4px;
    }
    .drag-handle.grabbing {
    cursor: grabbing;
}
</style>
<script>
    window.saveAsFile = (filename, base64Content) => {
        const byteCharacters = atob(base64Content);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'text/csv' });

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    window.getTimezoneOffset = function () {
        return -new Date().getTimezoneOffset(); // Offset in minutes, negative for UTC-
    };
</script>
