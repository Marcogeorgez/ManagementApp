@page "/project"
@using LuminaryVisuals.Components.ProjectPageDialogue
@using LuminaryVisuals.Services.Shared
@using Microsoft.Extensions.Options
@inject ColumnPreferenceService columnPreferenceService
@inject UserServices UserServices
@inject ProjectService projectServices
@inject CircuitUpdateBroadcaster Broadcaster
@inject ProjectState ProjectState
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject IEmailService EmailService
@inject INotificationService _notificationService
@inject IScrollManager ScrollManager
@attribute [Authorize(Policy = "RequireAdminClientEditor")]
@implements IDisposable
<PageTitle>Projects</PageTitle>

@* <button @onclick="SubscribeToPush">Enable Notifications</button>

@code {
    private async Task SubscribeToPush()
    {
        await JS.InvokeVoidAsync("subscribeToPush");
    }
} *@


<MudMainContent class="main-content-sm" Style="height: 100%; padding-top:25px; padding-left:25px; padding-right:25px;">
    
        <LoadingIndicator IsVisible="@_loadingIndicator" />

        <MudDataGrid @ref=_dataGrid T="Project"SortMode="SortMode.Single" @key=_gridKey Class="project-data-grid"
        Style="transform: scale(0.7);transform-origin: top left; width: 145%; transform-style: flat;" 
        Dense=true Hover="true" Bordered=false Breakpoint="Breakpoint.None" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" 
        Filterable=true ColumnsPanelReordering=false  MultiSelection="true"ShowColumnOptions=false  
        @bind-SelectedItems="@SelectedProjects" SelectOnRowClick="false" Groupable
        ShowMenuIcon=false EditMode="DataGridEditMode.Form"  ReadOnly=false RowStyle="text-align:center;"  
        StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem"
        CommittedItemChanges="@CommittedItemChanges" 
        RowsPerPage="25"  FixedHeader FixedFooter QuickFilter="@_quickFilter" Height="121vh"
        Loading="@_loading" Items="@projects" RowClassFunc="@GetRowClass" >


            <ToolBarContent>
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true >
                <MudText Typo="Typo.h4" Class="mr-3">Your Projects</MudText>
                </MudHidden>

                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Tertiary" Size="Size.Large" Label="Actions" AriaLabel="Projects Options" Class="mt-1"
                LockScroll=true DropShadow=true  @ref=_menuRef AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                    <MudMenuItem  OnClick="ResetState">
                        Reset State
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => _dataGrid.ShowColumnsPanel())">
                        Show Columns Panel
                    </MudMenuItem>
                    @if (_isAdminView || _isEditorView)
                    {
                        <MudMenuItem OnClick="OpenGeneratePaymentDialog">
                           <MudIcon Icon="@Icons.Material.TwoTone.Payments" Class="mr-2" />
                            Create Payment Documents
                        </MudMenuItem>
                    }
                    @if(!isAdminView)
                    {
                       <MudSwitch T="bool" Class="mb-1 mx-2" Value="@_showFinishedProjects" ValueChanged="@((value) => ToggleFinishedProjects(value))" Color="Color.Info">Hide Finished Projects</MudSwitch>
                    }
                    @if (isAdminView)
                    {
                        <MudMenuItem OnClick="DownloadAllProjects">
                            <div style="display:flex;">
                                <MudIcon Icon="@Icons.Material.TwoTone.Download" Class="mr-2  ml-n1" />
                                Backup Projects
                            </div>
                        </MudMenuItem>

                        <MudStack Spacing="0" Class="mb-3">
                        <MudSelect T="string" Class="mx-4 my-2 " Label="Select Preset"
                                   AnchorOrigin="Origin.BottomCenter" Dense=true
                                   TransformOrigin="Origin.TopCenter" Variant="Variant.Outlined"
                                   @bind-Value="_selectedPresetName"
                                   SelectedValuesChanged="() => LoadSelectedPreset(_selectedPresetName)"
                                   Clearable=true>

                            <MudSelectItem Value='"createNewPreset"'>
                                <div class="d-flex align-center" style="color: #0baa7a;">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Add"
                                             Color="Color.Success" Variant=Variant.Outlined Class="mr-2" />
                                    <strong>Create New Preset</strong>
                                </div>
                            </MudSelectItem>

                            @foreach (var preset in _columnPresets)
                            {
                                <MudSelectItem Value="@preset.Name">
                                    <div class="d-flex align-center" style="width: 100%;">
                                        <span>@preset.Name</span>
                                        <MudSpacer/>
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit"  Size="Size.Small"
                                        OnClick="async () => await EditPreset(preset)"  Class="mud-select-option-delete"/>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                        OnClick="async () => await DeletePreset(preset)" Class="mud-select-option-delete"/>
                                        

                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudSwitch T="bool" Class="mb-1 mx-2" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>

                        <MudSwitch T="bool" Class="mb-1 mx-2" Value="@_showFinishedProjects" ValueChanged="@((value) => ToggleFinishedProjects(value))" Color="Color.Info">Hide Finished Projects</MudSwitch>

                            <MudText Class="ml-5">View as</MudText>
                            <MudStack Row=true Style="background:#151726;" Class="mx-2" Spacing="1">
                                <MudSwitch T="bool" Class="" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin</MudSwitch>
                                <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor</MudSwitch>
                                <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client</MudSwitch>
                            </MudStack>
                        </MudStack>
                    }
                </MudMenu>


                

                @if (isAdminView)
                {
                    <MudTooltip ShowOnClick=false Text="Batch Editing" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom">
                        <MudIconButton OnClick="@(() => SelectedItems(SelectedProjects,true))"
                        Icon="@Icons.Material.Filled.Edit" Size="Size.Large" Class="pa-1 mt-1" >

                        </MudIconButton>
                    </MudTooltip>
                    @if(!_isArchived)
                    {
                        <MudTooltip ShowOnClick=false Text="Batch Archiving" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom">
                        <MudIconButton OnClick="@(() => SelectedItems(SelectedProjects, false))"
                        Icon="@Icons.Material.Filled.Archive" Size="Size.Large" Class="pa-1 mt-1" >

                        </MudIconButton>
                        </MudTooltip>
                    }
                    @if(_isArchived)
                    {
                        <MudTooltip ShowOnClick=false Text="Batch Delete" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom">
                        <MudIconButton OnClick="@(() => DeleteProjects(SelectedProjects))"
                        Icon="@Icons.Material.Filled.Delete" Size="Size.Large" Class="pa-1 mt-1" >

                        </MudIconButton>
                        </MudTooltip>
                    }
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true >
                        <MudButton Color="Color.Info"
                        Variant="Variant.Outlined" Size="Size.Medium"
                        StartIcon="@Icons.Material.Filled.AddCircle" 
                        OnClick="@(() => AddProjectDialogAsync(DialogOptions))" Class="mt-1 ma-1">
                            Add Project
                        </MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>

                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                        Color="Color.Info"
                        Size="Size.Large" 
                        Class="mt-1"
                        OnClick="@(() => AddProjectDialogAsync(DialogOptions))" />
                    </MudHidden>

                }
                else if (_isClientView)
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true >
                        <MudButton Color="Color.Info"
                        Variant="Variant.Outlined" Size="Size.Medium"
                        StartIcon="@Icons.Material.Filled.AddCircle"
                        OnClick="@(() => CreateProjectDialogAsync(DialogOptions))" Class="mt-1 ma-1">
                            Create New Project
                        </MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>

                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                        Color="Color.Info"
                                       Size="Size.Large"
                        Class="mt-1 mx-2"
                        OnClick="@(() => CreateProjectDialogAsync(DialogOptions))" />
                    </MudHidden>
                }
                @if(_isAdminView || _isEditorView)
                {
                    <MudTooltip ShowOnClick=false Text="@undoSwapText" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom"
                    Color=Color.Info @onmouseover="UpdateUndoRedoTexts">
                        <MudIconButton Disabled="string.IsNullOrEmpty(undoSwapText)" Icon=@Icons.Material.Filled.Undo Color="Color.Info" Size="Size.Large" Class="mt-1 ma-1" OnClick="Undo" />
                    </MudTooltip>
                    <MudTooltip ShowOnClick=false Text="@redoSwapText" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom"
                    Color=Color.Info @onmouseover="UpdateUndoRedoTexts">
                        <MudIconButton Disabled="string.IsNullOrEmpty(redoSwapText)" Icon=@Icons.Material.Filled.Redo Color="Color.Info" Size="Size.Large" Class="mt-1 ma-1" OnClick="Redo"/>
                        </MudTooltip>

                }
                <MudSpacer />

            <MudTextField T="string" Placeholder="Search..." @bind-Value="_searchString" Adornment="Adornment.Start" Immediate="true" 
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />

            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
                </MudHidden>
            </ColGroup>
            <Columns>

                @if (_isAdminView)
                {
                    {
                        isSelectorVisible = true; // used to indicate that select columns are visible
                    }
                    <SelectColumn T="Project"/>
                }
                @if (RoleBasedColumns[_currentRole].Contains("InternalId"))
                {
                    <PropertyColumn Property="x => x.InternalOrder" Title="Id" Sortable="true" Filterable="false"
                    DragAndDropEnabled="false" Groupable="false" Editable=true StickyLeft=true
                    HeaderStyle="@(isSelectorVisible ? "left:32px; z-index:5;" : "z-index:5;")"
                    CellStyle="@(isSelectorVisible ? "left:32px; text-align:center;" : "text-align:center;")">
                        <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                                <div style="height:30px;"
                                class="drag-handle @(draggedProject?.ProjectId == context.Item.ProjectId ? "being-dragged" : "") 
                                    @(isDragOver == context.Item.ProjectId ? "border-2 mud-border-primary border-dashed" : "")
                                    flex-row  justify-center align-center ml-n3 "
                                draggable="true"
                                @ondragstart="@(() => HandleDragStart(context.Item))"
                                @ondragover:preventDefault
                                @ondragover="@(() => HandleDragOver(context.Item))"
                                @ondrop:preventDefault
                                @ondrop="@(() => HandleDropForInternalOrder(context.Item))"
                                @ondragenter="@(() => HandleDragEnter(context.Item))"
                                @ondragleave="@(() => HandleDragLeave(context.Item))">
                                    <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                    @context.Item.InternalOrder
                                </div>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                                <MudText>@context.Item.InternalOrder</MudText>
                            </MudHidden>
                        </CellTemplate>
                        <EditTemplate>
                            @if(!_isAdminView){
                                <MudText Style="display:none;" />
                            }
                            else
                            { 
                                <MudNumericField @bind-Value="context.Item.InternalOrder" Label="Id" Variant="Variant.Outlined" Min="1" Max="projects.Count()"/>
                            }
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ExternalId"))
                {
                    <PropertyColumn Property="x => x.ExternalOrder" Class="Id" Title="Id" Sortable="true" Filterable="false" CellStyle="text-align:center;"
                    DragAndDropEnabled="false" Groupable="false" Editable=true >
                        <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                                <div class="drag-handle Id flex-row  justify-center align-center ml-n3" style="height:30px;" draggable="true"
                                @ondragstart="@(() => HandleDragStart(context.Item))"
                                @ondragover:preventDefault
                                @ondragover="@(() => HandleDragOver(context.Item))"
                                @ondrop:preventDefault
                                @ondrop="@(() => HandleDropForExternalOrder(context.Item))"
                                @ondragenter="@(() => HandleDragEnter(context.Item))"
                                @ondragleave="@(() => HandleDragLeave(context.Item))">
                                    <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                    @context.Item.ExternalOrder
                                </div>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                                <MudText>@context.Item.ExternalOrder</MudText>
                            </MudHidden>
                        </CellTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("Actions"))
                {

                    <TemplateColumn CellClass="" Title="Actions" Hideable="true" Filterable="false" Sortable="false" Groupable="false" StickyLeft=true
                    HeaderStyle="@(isSelectorVisible ? "min-width:120px; left:75px; z-index:5" : "min-width:120px; z-index:5; left:50px;")"
                    CellStyle="@(isSelectorVisible ? "left:75px; text-align:center;" : "text-align:center;left:50px;")">
                        <CellTemplate>
                            <div class="d-flex flex-auto flex-row">
                                <MudMenu Icon="@Icons.Material.Filled.Edit" Color="Color.Default" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft">
                                    @if (_isAdminView || _isEditorView)
                                    {
                                        <MudMenuItem OnClick="@(() => Logging(context.Item,_currentUserId))"
                                        Icon="@Icons.Material.Filled.WatchLater" >
                                            Logging hours
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => CopyProjectNameToClipboard(context.Item))"
                                        Icon="@Icons.Material.Outlined.FileCopy" >
                                            Copy Project Name to Clipboard
                                        </MudMenuItem>
                                    }
                                    @if (_isArchived && _isAdminView)
                                    {
                                        <MudMenuItem OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(context.Item))"
                                        Icon="@Icons.Material.Filled.Archive" IconSize="Size.Small">
                                            @(context.Item.IsArchived ? "Unarchive" : "Archive")
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteDialog(context.Item))"
                                        Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small">
                                            Delete
                                        </MudMenuItem>
                                    }
                                    else if (!_isArchived && _isAdminView || !_isArchived && _isClientView)
                                    {
                                        <MudMenuItem OnClick="@(() => ArchiveProject(context.Item))"
                                        Icon="@Icons.Material.Filled.Archive">
                                            Archive
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => Duplicate(context.Item))"
                                        Icon="@Icons.Material.Filled.ContentCopy">
                                            Duplicate
                                        </MudMenuItem>

                                    }

                                    @if(!_isArchived){
                                        <MudMenuItem OnClick="@(() => OnRowClick(context.Item))"
                                        Icon="@Icons.Material.TwoTone.Edit">
                                            Edit Row
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                                @{
                                    var submissionStatus = context.Item.SubmissionStatus == Models.SubmissionStatus.Submitted ?
                            Color.Info : context.Item.SubmissionStatus == Models.SubmissionStatus.Approved ? Color.Success : Color.Error;
                                }

                                <MudTooltip Text="@context.Item.SubmissionStatus.ToString()" Arrow=true Color="submissionStatus" >
                                    <MudIconButton Color="@submissionStatus" Icon="@Icons.Material.Filled.Calculate" 
                                    Variant="Variant.Text" Size="Size.Large" OnClick="@(() => TimeCalculator(context.Item))" >
                                        @context.Item.SubmissionStatus.ToString()
                                    </MudIconButton>
                                </MudTooltip>
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                }

                @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
                {
                    <PropertyColumn Property="x => x.ProjectName" Title="Project Brief" StickyLeft="@(_isClientView ? false : true)" 
                    Hideable="false"
                    HeaderStyle="@(isSelectorVisible ? "min-width:316.4px; left:190px; z-index:4" : !_isClientView ? "left:165px; z-index:4;" : "z-index:4; min-width:300px;")"
                    CellStyle="@(isSelectorVisible ? "left:190px;" : "left:165px;")" CellClass="outlined-dialog-xl-content"
                    Groupable="false" Editable=false Required=false>
                        <CellTemplate>
                            @if (context.Item.Status != ProjectStatus.Upcoming && (string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Resolution) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Size) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.CameraNumber) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.ColorProfile)))
                            {
                                <div class="d-flex gap-2 flex-row  justify-center align-center">

                                    <MudTextField T="string" AutoGrow=true Value="context.Item.ProjectName" Class="outlined-dialog-xl-content "  
                                    ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End" 
                                    AdornmentIcon="@Icons.Material.Filled.OpenInNew" OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                    
                                        <MudIcon Icon="@Icons.Material.Rounded.WarningAmber"></MudIcon>
                                    </MudTextField>
                                    <MudTooltip Text="Missing Information for the project, please fill it as soon as possible." Color="Color.Error" Placement="Placement.Bottom" Arrow="true">
                                        <MudIcon Class="d-flex" Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                                    </MudTooltip>
                                    <MudFab Class="d-flex floating-chat-icon info-new" @onclick="async () => await  OpenProjectChat(context.Item)" 
                                    StartIcon="@Icons.Material.Filled.Chat" Size="Size.Medium" />
                                </div>
                            }
                            else
                            {      
                                <div class="d-flex gap-2 flex-row  justify-center align-center">
                                    <MudTextField T="string" AutoGrow=true MaxLines="2"
                                    Value="context.Item.ProjectName" Class="outlined-dialog-xl-content"
                                    ReadOnly="true"
                                    Immediate="true" Adornment="Adornment.End" Variant="Variant.Outlined"
                                    AdornmentIcon="@Icons.Material.Filled.OpenInNew" 
                                    OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                    </MudTextField>
                                    <MudFab Class="d-flex floating-chat-icon info-new" @onclick="async () => await OpenProjectChat(context.Item)" StartIcon="@Icons.Material.Filled.Chat" Size="Size.Medium" />
                                </div>

                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                @* Important: isAdminView is added to the condition to show the column to the admin view
                    So the admin can group by the client name and see the projects of the client
                    The client view will not see the client name column, but the client name will be shown in the project brief

                *@
                @if (RoleBasedColumns[_currentRole].Contains("ClientName") || isAdminView ) 
                {
                    <PropertyColumn Property="x => x.Client.UserName" Title="Client Name" Grouping="_groupByClientName" Hidden="@(GetColumnVisibility("ClientUserName"))"
                    Hideable="true" Groupable="true" CellStyle="" CellClass="outlined-dialog-name-content"
                    Editable=false Required=false >

                        <CellTemplate>
                            <MudTextField T="string"
                            Value="context.Item.Client.UserName" 
                            ReadOnly="true" 
                            Immediate="true" Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Outlined"
                            MaxLines="4"
                            class="@(_isAdminView ? "cursor-pointer outlined-dialog-name-content grey-border": "outlined-dialog-name-content grey-border")"
                            @onclick="@( _isAdminView ? (async () => await OpenClientNameDialog(context.Item)) : null )"
                            OnAdornmentClick="@(() => OpenViewClientEditingGuidelinesComponent(context.Item))">
                            </MudTextField>
                        </CellTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                        </GroupTemplate>
                        <EditTemplate>

                            @if (Clients != null && Clients.Any() && _isAdminView)
                            {
                                <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2 outlined-dialog-max-content"
                                Variant="Variant.Outlined"
                                Label="Client Name"
                                @bind-Value="context.Item.ClientId">
                                    @foreach (var client in Clients)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@client.UserId" >
                                            @client.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>


                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
                {
                    <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle="vertical-align: middle;" Hidden="@(GetColumnVisibility("ProgressBar"))"> 
                        <CellTemplate>
                            @if (context?.Item != null)
                            {
                                <div class="@(_isAdminView || _isEditorView ? "cursor-pointer ": "") " style="width: 100%; min-height: 40px; display:flex; align-items:center;"
                                @onclick="@( _isAdminView|| _isEditorView ? (async () => await OpenProgressDialog(context.Item)) : null )">

                                    @if (context?.Item != null)
                                    {
                                        <MudProgressLinear Value="context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                                    }
                                </div>
                            } 
                        </CellTemplate>

                        <EditTemplate Context="context">
                            @if (!_isClientView)
                            {
                                <MudSelect T="ProgressBarValue" Label="Progress" Class="mt-3"  AnchorOrigin="Origin.BottomCenter"
                                Value="@((ProgressBarValue)context.Item.ProgressBar)" Variant="Variant.Outlined"
                                ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                                </MudSelect>            
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Progress" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
                {
                    <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" HeaderStyle="width:115px;" Hidden="@(GetColumnVisibility("ShootDate"))"
                    Groupable="true" Editable=false CellStyle="text-align:center;" >
                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.FormattedShootDate" 
                            Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView || _isClientView ? "cursor-pointer" : "" )}")
                            ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                            @onclick="@( _isAdminView || _isClientView ? (() => OpenShootDateDialog(context.Item)) : null )"/>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(_isAdminView || _isClientView){
                                <MudDatePicker Label="Shoot Date" Variant="Variant.Outlined" Date="@context.Item.ShootDate"
                                DateChanged="@(date => context.Item.ShootDate = date)" Class="mt-3" Required="false" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Shoot Date" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
                {
                    <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" CellStyle="text-align:center; Required=false" Hidden="@(GetColumnVisibility("DueDate"))"
                    CellClass="outlined-dialog-md-content" Groupable="true" Editable=false >
                        <CellTemplate>
                            @if (context.Item.IsUrgent == true)
                            {
                                <MudTextField T="string" Value="context.Item.FormattedDueDate" 
                                ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                                Class=@($"outlined-dialog-lg-content {( _isAdminView ? "cursor-pointer" : "" )} {(_isClientView ? "grey-border" : "yellow-border")}")
                                @onclick="@( _isAdminView ? (() => OpenDueDateDialog(context.Item)) : null )"
                                AdornmentIcon="@Icons.Material.TwoTone.WarningAmber" AdornmentColor="Color.Default" />
                            }
                            else
                            {
                                <MudTextField T="string" Value="context.Item.FormattedDueDate" 
                                ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                                Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                @onclick="@( _isAdminView ? (() => OpenDueDateDialog(context.Item)) : null )"/>
                            }

                        </CellTemplate>
                        <EditTemplate>
                            @if(@_isAdminView){
                                <MudDatePicker Label="Due Date"
                                Variant="Variant.Outlined"
                                Class="mt-3"
                                Date="@context.Item.DueDate"
                                DateChanged="@(date => context.Item.DueDate = date)"
                                Required="false" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Due Date" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
                {
                <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true" Required=false CellClass="outlined-dialog-md-content" Hidden="@(GetColumnVisibility("WorkingMonth"))"
                                CellStyle="text-align:center;" Groupable="true" Editable=false SortBy="@(x => x.WorkingMonth)">
                    <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.FormattedWorkingMonth" 
                            Class=@($"outlined-dialog-md-content grey-border {( _isAdminView || _isEditorView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView || _isEditorView 
                                ? EventCallback.Factory.Create<MouseEventArgs>(this, () => OpenWorkingMonthDialog(context.Item)) 
                                : EventCallback.Factory.Create<MouseEventArgs>(this, () => Task.CompletedTask) )"
                            ReadOnly="true" Variant="Variant.Outlined" Adornment="Adornment.End">
                            </MudTextField>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(_isAdminView || _isEditorView){
                                <MudDatePicker Required="false" Label="Working Month" Variant="Variant.Outlined" Class="mt-3" FixDay="1"
                                DateFormat="MM/yyyy" Date="@context.Item.WorkingMonth" DateChanged="@(date => context.Item.WorkingMonth = date)" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Working Month" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("Status"))
                {
                    <PropertyColumn Property="x => x.FormatStatus" Title="Status" Hideable="true" Groupable="true" Hidden="@(GetColumnVisibility("Status"))"
                    CellClass="status-cell-center" CellStyle="text-align:center !important;">
                        <CellTemplate>
                            <MudTextField ReadOnly=true Variant="Variant.Outlined" 
                            Style="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? GetStatusStyle(ProjectStatus.Working) 
                            : GetStatusStyle(context.Item.Status))" 
                            Value=@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? ProjectStatus.Working.ToString() : context.Item.FormatStatus)
                            Class="outlined-dialog-max-content cursor-pointer"
                            @onclick="@(() => OpenStatusDialog(context.Item))" />
                        </CellTemplate>
                        <EditTemplate Context="context">    
                            <MudSelect T="ProjectStatus" Class="mt-3" Variant="Variant.Outlined" Label="Status"
                                Value="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? ProjectStatus.Working : context.Item.Status)"
                                Text="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? "Working" : context.Item.Status.ToString().Replace("_", " "))"
                                ValueChanged="@(newValue => context.Item.Status = newValue)"
                                Required="true">
                                @if(_isAdminView)
                                {
                                    @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                    {
                                        <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                    }
                                }
                                else if(_isEditorView)
                                {
                                    <MudSelectItem Value="ProjectStatus.Upcoming">Upcoming</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready To Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Scheduled">Scheduled</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Working">Working</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Review">Ready To Review</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Delivered">Delivered</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>


                                }
                                else{
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Status" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientPaymentStatus"))
                {
                    <PropertyColumn  Property="x => x.FormatAdminStatus" Title="Client Payment Status" Hideable="true" Groupable="true" Hidden="@(GetColumnVisibility("AdminStatus"))"
                    Required=false CellStyle="text-align:center;">
                        <CellTemplate>
                            <MudTextField ReadOnly=true Variant="Variant.Outlined" 
                            Style="@GetAdminStatusStyle(context.Item.AdminStatus)" 
                            Value=context.Item.FormatAdminStatus
                            Class=@($"outlined-dialog-max-content {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenAdminStatusDialog(context.Item)) : null )"/>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(_isAdminView){
                                <MudSelect T="AdminProjectStatus" Class="mt-3" Variant="Variant.Outlined" Label="Client Payment Status"
                                @bind-Value="context.Item.AdminStatus"Required="true">
                                    @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                                    {
                                        <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else{
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Payment Status" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                <PropertyColumn Property="x => x.Link" Title="Project Link" Required=false Groupable=false Hideable="true" Editable=false Filterable="false" Sortable="false" CellStyle="text-align:center;" 
                Hidden="@(GetColumnVisibility("Link"))">
                    <CellTemplate>
                        @if (!String.IsNullOrEmpty(@context.Item.Link))
                        {
                            <MudTooltip Text="@context.Item.Link">
                                @if(_isClientView)
                                {
                                    <MudLink Style="color:#0e9b42 !important;" Href="@context.Item.Link" Target="_blank">
                                        <MudIcon Icon="@Icons.Material.Filled.OpenInNew" />
                                    </MudLink>
                                }
                                else
                                {
                                    <MudIconButton Style="color:#0e9b42 !important;" Icon="@Icons.Material.Filled.OpenInNew" @onclick="@(() => OpenLinkDialog(context.Item))" />
                                }
                            </MudTooltip>
                        }
                        else
                        {
                            @if(_isClientView)
                            {
                                <MudIcon Disabled Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Default" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" @onclick="@(() => OpenLinkDialog(context.Item))" Color="Color.Default" />
                            }
                        }      
                    </CellTemplate>
                    <EditTemplate>
                        <div class="@EditTemplateCss">
                            <MudTextField Label="Project Link" Variant="Variant.Outlined" @bind-Value="@context.Item.Link" />
                        </div>
                    </EditTemplate>
                </PropertyColumn>
                @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
                {
                    <PropertyColumn Property="x => x.PrimaryEditorName" Title="Primary Editor" Hideable="true" Hidden="@(GetColumnVisibility("PrimaryEditorName"))"
                    Groupable="true" Editable=false Required=false CellStyle="text-align:center;">
                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.PrimaryEditorName"
                            Class=@($"outlined-dialog-name-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenPrimaryEditorDialog(context.Item)) : null )"
                            ReadOnly="true" Variant="Variant.Outlined" Adornment="Adornment.End"/>
                        </CellTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                        </GroupTemplate>
                        <EditTemplate>
                            @if (Editors != null && Editors.Any() && _isAdminView)
                            {
                                <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2" Variant="Variant.Outlined" Label="Primary Editor" 
                                ValueChanged="@(async value => {
                                if (value == null) {
                                    var result = await DialogService.ShowMessageBox(
                                    "Confirm Unassign",
                                    "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED.",
                                    yesText: "Unassign",
                                    cancelText: "Cancel"
                                    );
                                    if (result == true)
                                        context.Item.PrimaryEditorId = value;
                                }
                                    else{
                                        context.Item.PrimaryEditorId = value;
                                        }
                                })"
                                Value="@context.Item.PrimaryEditorId">
                                    <MudSelectItem Class="" T="string" Value="null" >
                                        Unassign Editor
                                    </MudSelectItem>
                                    @foreach (var editor in Editors)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@editor.UserId" >
                                            @editor.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
                {
                <PropertyColumn Property="x => x.SecondaryEditorName" Title="Second Editor" Hideable="true" Hidden="@(GetColumnVisibility("SecondaryEditorName"))"
                    Groupable="true" Editable=false Required=false CellStyle="text-align:center;">

                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.SecondaryEditorName" 
                            Class=@($"outlined-dialog-name-content {(context.Item.SecondaryEditor?.UserName == null ? "grey-border" : "yellow-border")} {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenSecondaryEditorDialog(context.Item)) : null )"
                            ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"/>
                        </CellTemplate>
                        <EditTemplate>
                            @if (Editors != null && Editors.Any() && _isAdminView)
                            {
                                <MudSelect T="string"
                                AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2"
                                Variant="Variant.Outlined"
                                Label="Secondary Editor"
                                ValueChanged="@(async value => {
                                if (value == null) {
                                    var result = await DialogService.ShowMessageBox(
                                    "Confirm Unassign",
                                    "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED",
                                    yesText: "Unassign",
                                    cancelText: "Cancel"
                                    );
                                    if (result == true)
                                        context.Item.SecondaryEditorId = value;
                                }
                                    else{
                                        context.Item.SecondaryEditorId = value;
                                        }
                                })"
                                Value="@context.Item.SecondaryEditorId">
                                    <MudSelectItem Class="" T="string" Value="null" >
                                        Unassign Editor
                                    </MudSelectItem>
                                    @foreach (var editor in Editors)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@editor.UserId" >
                                            @editor.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }

                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("PrivateNotes"))
                {
                    <PropertyColumn Property="x => x.NotesForProject" CellClass="outlined-dialog-md-content" Title="Private Notes" Hidden="@(GetColumnVisibility("PrivateNotes"))"
                    Sortable="false" Filterable="false" Hideable="true" Groupable="false"  Editable=false Required=false>
                        <CellTemplate>
                            @{
                                var notes = context.Item.NotesForProject;
                                bool isEmpty = string.IsNullOrEmpty(notes);
                            }
                            <MudTooltip Text="Click to view/change private note">

                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                Style=@($"{(!isEmpty ? "color: #f60008;" : "color: var(--mud-palette-text-primary);")}")
                                @onclick="@(() => OpensPrivateNoteForProject(context.Item))" />
                            </MudTooltip>
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }


                @* Editors Info*@
                @if (RoleBasedColumns[_currentRole].Contains("EditorBillable"))
                {
                    @if (_isAdminView)
                    {
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.DatePaidEditor" Title="P.Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorDatePaid"))">
                            <CellTemplate>
                                @if (context.Item.PrimaryEditorDetails.DatePaidEditor != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")"
                                    ReadOnly="true" Variant="Variant.Outlined" 
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                    @onclick="@( _isAdminView ? (() => OpenPrimaryEditorPaymentDate(context.Item)) : null )"/>
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined"
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                    @onclick="@( _isAdminView ? (() => OpenPrimaryEditorPaymentDate(context.Item)) : null )"/>
                                }
                            </CellTemplate>
                            <EditTemplate>
                                @if(context.Item.PrimaryEditorId != null)
                                {
                                    <MudDatePicker Date="@context.Item.PrimaryEditorDetails.DatePaidEditor" 
                                    DateChanged="@(date => context.Item.PrimaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)"
                                    Label="P.Date Paid" Variant=Variant.Outlined/>
                                }
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.BillableHours" Title="P.Logged Hours" Groupable=false Filterable="false" Hideable="true" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorLoggedHours"))">
                            <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.BillableHours.ToString("0.#")"
                                          ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.Overtime" Title="P.Editor Overtime" Groupable=false Hideable="true" Filterable="false" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorOvertime"))" >
                            <CellTemplate>
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.Overtime.ToString("0.#")" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.AdjustmentHours" Title="P.Adjust" Sortable=false Hideable="true" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorAdjustment"))">
                            <CellTemplate>
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.AdjustmentHours.ToString("0.#")" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="yellow-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.FinalBillableHours" Title="P.Billable Hours" Groupable=false Filterable="false" Hideable="true" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorFinalBillableHours"))" >
                            <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.FinalBillableHours.ToString("0.#")"
                                          ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.PaymentAmount" Title="P.Editor Payment" Groupable="false" Hideable="true" Filterable=false Editable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorPayment"))">
                            <CellTemplate>
                                @if (context.Item?.PrimaryEditorDetails?.PaymentAmount != 0 && context.Item?.PrimaryEditorDetails?.PaymentAmount is not null)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.PaymentAmount.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.Start" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.DatePaidEditor" Title="Sec Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorDatePaid"))">
                            <CellTemplate>
                                @if (context.Item.SecondaryEditorDetails.DatePaidEditor != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")" 
                                    ReadOnly="true" Variant="Variant.Outlined"
                                    @onclick="@( _isAdminView ? (() => OpenSecondaryEditorPaymentDate(context.Item)) : null )"
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")/>
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" @onclick="@( _isAdminView ? (() => OpenSecondaryEditorPaymentDate(context.Item)) : null )"
                                    Variant="Variant.Outlined" 
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}") />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                @if(context.Item.SecondaryEditorId != null)
                                {
                                    <MudDatePicker  
                                    Date="@context.Item.SecondaryEditorDetails.DatePaidEditor"
                                    Label="Sec.Date Paid"
                                    Variant=Variant.Outlined
                                    DateChanged="@(date => context.Item.SecondaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)" />
                                }
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.BillableHours" Title="Sec Logged Hours" Groupable=false Hideable="true" Editable=false Filterable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorLoggedHours"))">
                            <CellTemplate>
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.BillableHours.ToString("0.#")" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.Overtime" Title="Sec Editor Overtime" Groupable=false Hideable="true" Filterable="false" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorOvertime"))" >
                            <CellTemplate>
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.Overtime.ToString("0.#")" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.AdjustmentHours" Title="Sec Adjust" Hideable="true" Sortable="false" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorAdjustment"))">
                            <CellTemplate>
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.AdjustmentHours.ToString("0.#")" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="yellow-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.FinalBillableHours" Title="Sec.Editor Billable Hours" Groupable=false Hideable="true" Editable=false Filterable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorFinalBillableHours"))">
                            <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.FinalBillableHours.ToString("0.#")"
                                          ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.PaymentAmount" Title="Sec.Editor Payment" Groupable=false Hideable="true" Editable=false Filterable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorPayment"))">
                            <CellTemplate>
                                @if (context.Item?.SecondaryEditorDetails?.PaymentAmount != 0 && context.Item?.SecondaryEditorDetails?.PaymentAmount is not null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.PaymentAmount.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.Start" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else if (_isEditorView)
                    {
                        <TemplateColumn Title="Editor Paid Date" Sortable="false" Filterable="false" Groupable="false" Editable=false Hideable="true">
                            <CellTemplate>
                                @{var _DatePaidEditor = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.DatePaidEditor
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.DatePaidEditor : null );
                                }
                                @if (_DatePaidEditor == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border outlined-dialog-lg-content" />
                                }
                                else
                                {
                                    <MudTextField Value=@_DatePaidEditor.Value.ToString("MM/dd/yyyy") Variant=Variant.Outlined T="string" Class="grey-border outlined-dialog-lg-content"
                                    ReadOnly=true/>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Logged Hours" Sortable="false" Filterable="false" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal _BillableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.BillableHours
                                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.BillableHours : 0 );
                                 }
                                    <MudTextField Value='_BillableHours.ToString("0.#")' ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border" Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Editor Overtime" Sortable="false" Filterable="false" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal _overtime = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.Overtime
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.Overtime : 0 );
                                }
                                    <MudTextField Value='_overtime.ToString("0.#")' ReadOnly="true"
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.End" AdornmentText="h" />
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Adjustment" Sortable="false" Filterable="false" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{
                                    decimal _adjustment = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.AdjustmentHours
                            : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.AdjustmentHours : 0 );
                                }
                                
                                    <MudTextField Value='_adjustment.ToString("0.#")' ReadOnly="true"
                                    Variant="Variant.Outlined" Class="yellow-border"  Adornment="Adornment.End" AdornmentText="h" />                                
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Billable Hours" Sortable="false" Filterable="false" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal _billableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.FinalBillableHours
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.FinalBillableHours : 0 );
                                }
                                    <MudTextField T=string Value='_billableHours.ToString("0.#")' ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border" />
                            </CellTemplate>
                        </TemplateColumn>
                    <TemplateColumn Title="Payment" Sortable="false" Filterable="false" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{var paymentAmount = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.PaymentAmount
                        : (context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.PaymentAmount : null);
                                }
                                @if (paymentAmount != 0 && paymentAmount != null)
                                {
                                    <MudTextField Value="paymentAmount" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.Start" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }

                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
                {
                    <PropertyColumn Property="x => x.ClientBillableHours" Title="Client Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;"  Hidden="@(GetColumnVisibility("ClientBillableHours"))">
                        <CellTemplate>
                            @if(context.Item.ClientBillableHours >= 0)
                            {
                                <MudTextField Value="context.Item.ClientBillableHours" ReadOnly="true" 
                                Variant="Variant.Outlined" Class="grey-border" Adornment="Adornment.End" AdornmentText="h" />
                            }
                            else
                            {
                                <MudTextField T=string Text="N/A" ReadOnly="true"
                                Variant="Variant.Outlined" Class="grey-border" />
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillableAmount"))
                {
                    if(_isAdminView)
                    {
                        <PropertyColumn Property="x => x.ClientBillableAmount" Title="Client Payment" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;"  Hidden="@(GetColumnVisibility("ClientPayment"))">
                            <CellTemplate>
                                @if(context.Item.ClientBillableAmount >= 0)
                                {
                                    <MudTextField Value="context.Item.ClientBillableAmount" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.Start" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else if(_isClientView)
                    {
                        <PropertyColumn Property="x => x.ClientBillableAmount" Title="Payment Amount" Hideable="true" HeaderStyle="max-width:140px" 
                        Groupable=false Editable=false CellStyle="text-align:center; max-width:140px">
                            <CellTemplate Context="context">
                                @{
                                    var project = context.Item as Project;
                                    @if (project?.IsPaymentVisible == true && project.ClientBillableAmount >= 0)
                                    {
                                        <MudTextField Value="project.ClientBillableAmount" ReadOnly="true" 
                                        Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.Start" AdornmentText="$" />
                                    }
                                    else
                                    {
                                        <MudTextField T=string Text="N/A" ReadOnly="true"
                                        Variant="Variant.Outlined" Class="green-border"/>
                                    }
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
                {
                    <TemplateColumn T="Project" Title="Payment Visible" Sortable="false" Filterable="false" Groupable=false Hideable="true" Hidden="@(GetColumnVisibility("ClientPaymentToggle"))">
                        <CellTemplate>
                            <MudItem  Class="d-flex justify-center">
                                <MudIconButton Icon="@(context.Item.IsPaymentVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                Color="@(context.Item.IsPaymentVisible ? Color.Success : Color.Error)" Variant=Variant.Filled
                                OnClick="@(async () => await TogglePaymentVisibility(context.Item))" Class="d-flex justify-center pa-2" style="text-align:center;"
                                Size="Size.Small" />
                            </MudItem>
                        </CellTemplate>
                    </TemplateColumn>
                }



                @if (RoleBasedColumns[_currentRole].Contains("Archive"))
                {
                    @if (_isArchived)
                    {
                        <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" Hideable="true"/>
                    }
                }        
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Project" PageSizeOptions="[10,25,50,100,int.MaxValue]"    AllItemsText="Show All" />
            </PagerContent>
        </MudDataGrid>
        @if (ProjectState.CurrentProject != null )
        {
            <div class="mud-overlay mud-overlay-dialog" style=""><div class="mud-overlay-scrim mud-overlay-dark"></div></div>
            <div class="floating-chat-container">

                <Chats.ProjectChatDialog Project="@ProjectState.CurrentProject" OnOpenProjectDialog="OpenDescriptionDialog"
                UserId="@_currentUserId"
                IsAdminView="@isAdminView"
                IsClientView="@_isClientView" isEditorView="@_isEditorView"/> </div>
        }
</MudMainContent>

<script>
        window.copyToClipboard = (text) => {
        navigator.clipboard.writeText(text).then(() => {
            console.log("Copied to clipboard successfully!");
        }).catch(err => {
            console.error("Failed to copy text: ", err);
        });
    };

</script>
