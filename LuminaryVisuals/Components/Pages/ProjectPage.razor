@page "/project"
@using LuminaryVisuals.Components.ProjectPageDialogue
@using LuminaryVisuals.Services.Shared
@using Microsoft.Extensions.Options
@inject ColumnPreferenceService columnPreferenceService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserServices UserServices
@inject ProjectService projectServices
@inject CircuitUpdateBroadcaster Broadcaster
@inject ProjectState ProjectState
@implements IDisposable
@inject IEmailService EmailService
@inject INotificationService _notificationService
@inject IScrollManager ScrollManager
@attribute [Authorize(Policy = "RequireAdminClientEditor")]
<PageTitle>Projects</PageTitle>


<MudMainContent class="main-content-sm" Style="height:auto; overflow: hidden; padding-top:25px; padding-left:25px; padding-right:25px;">
@if (_loading)
    {
        <SplashScreen />
    }
    else
    {
        <LoadingIndicator IsVisible="@_loadingIndicator" />
        <MudDataGrid @ref=_dataGrid T="Project" Items="@projects" SortMode="SortMode.Single" @key=_gridKey
        Style="transform: scale(0.7);transform-origin: top left; width: 145%; height: calc(100% / 0.75); transform-style: preserve-3d;" 
        Dense=true Hover="true" Bordered=false Breakpoint="Breakpoint.None"
        FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
        ColumnsPanelReordering=false  MultiSelection="true"
        ShowColumnOptions=false  @bind-SelectedItems="@SelectedProjects"
        Groupable=true QuickFilter="@_quickFilter"
        ShowMenuIcon=false
        EditMode="DataGridEditMode.Form"  
        ReadOnly=false RowStyle="text-align:center;"  
        StartedEditingItem="@StartedEditingItem" 
        CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
        FixedHeader="true" Height="124vh;" Virtualize="true"  OverscanCount=6
        RowClassFunc="@GetRowClass">


            <ToolBarContent>
                <MudText Typo="Typo.h4" Class="mr-2">Your Projects</MudText>
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Tertiary" Size="Size.Large" 
                Label="Actions" AriaLabel="Projects Options" Class="mt-1 mx-1"
                LockScroll=true DropShadow=true  
                AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                    <MudMenuItem OnClick="ResetState">
                        Reset State
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => _dataGrid.ShowColumnsPanel())">
                        Show Columns Panel
                    </MudMenuItem>
                    @if (isAdminView)
                    {
                        <MudMenuItem OnClick="OpenColumnPreferencesDialog">
                            Set Column Preferences
                        </MudMenuItem>

                        <MudMenuItem OnClick="DownloadFilteredAsCsv">
                            <div style="display:flex;">
                                <MudIcon Icon="@Icons.Material.TwoTone.Download" Class="mr-2" />
                                Download Filtered Projects
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="DownloadAllProjects">
                            <div style="display:flex;">
                                <MudIcon Icon="@Icons.Material.TwoTone.Download" Class="mr-2" />
                                Backup Projects
                            </div>
                        </MudMenuItem>

                        <MudStack Spacing="0" Class="mb-3">
                            <MudSelect T="string" Class="mx-5 my-2 menu-select" Label="Select Preset" AnchorOrigin="Origin.BottomCenter" Dense=true
                            TransformOrigin="Origin.TopCenter" Variant="Variant.Outlined" @bind-Value="_selectedPresetName"
                            SelectedValuesChanged="() => LoadSelectedPreset(_selectedPresetName)" Clearable=true>
                                @foreach (var preset in _columnPresets)
                                {
                                    <MudSelectItem Value="@preset.Name">@preset.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSwitch T="bool" Class="ml-5 mb-1" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
                            <MudText Class="ml-5">View as</MudText>
                            <MudStack Row=true Style="background:#151726;" Class="ml-5">
                                <MudSwitch T="bool" Class="" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin</MudSwitch>
                                <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor</MudSwitch>
                                <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client</MudSwitch>
                            </MudStack>
                        </MudStack>
                    }

                </MudMenu>
                <MudTooltip ShowOnClick=false Text="Scroll to Bottom" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom">
                    <MudIconButton Class="pa-1 mt-1 mx-1" Icon="@Icons.Material.Sharp.ArrowCircleDown" Color="Color.Tertiary"
                    OnClick="OnClick" Ripple=true Size="Size.Large">
                    </MudIconButton>
                </MudTooltip>


                @if (isAdminView)
                {
                    <MudTooltip ShowOnClick=false Text="Batch Editing" ShowOnHover=true ShowOnFocus=true Arrow=true Placement="Placement.Bottom">
                        <MudIconButton OnClick="@(() => SelectedItems(SelectedProjects))"
                        Icon="@Icons.Material.Filled.Edit" Size="Size.Large" Class="pa-1 mt-1 mx-1" >

                        </MudIconButton>
                    </MudTooltip>

                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true >
                        <MudButton Color="Color.Info"
                        Variant="Variant.Filled" Size="Size.Medium"
                        StartIcon="@Icons.Material.Filled.AddCircle"
                        OnClick="@(() => AddProjectDialogAsync(DialogOptions))" Class="mt-1 ma-1">
                            Add Project
                        </MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>

                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                        Color="Color.Info"
                        Size="Size.Large"
                        Class="mt-1 mx-2"
                        OnClick="@(() => AddProjectDialogAsync(DialogOptions))" />
                    </MudHidden>

                }
                else if (_isClientView)
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true >
                        <MudButton Color="Color.Info"
                        Variant="Variant.Filled" Size="Size.Medium"
                        StartIcon="@Icons.Material.Filled.AddCircle"
                        OnClick="@(() => CreateProjectDialogAsync(DialogOptions))" Class="mt-1 ma-1">
                            Create New Project
                        </MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert=true>

                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                        Color="Color.Info"
                        Size="Size.Large"
                        Class="mt-1 mx-2"
                        OnClick="@(() => CreateProjectDialogAsync(DialogOptions))" />
                    </MudHidden>
                }

                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search..." Adornment="Adornment.Start"
                Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                Class="mt-0" />

            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
                </MudHidden>
            </ColGroup>
            <Columns>
                @if (_isAdminView)
                {
                    <SelectColumn T="Project"/>
                }
                @if (RoleBasedColumns[_currentRole].Contains("InternalId"))
                {
                    <PropertyColumn Property="x => x.InternalOrder" Title="Id" Sortable="true" Filterable="false" CellStyle="text-align:center; "
                    DragAndDropEnabled="false" Groupable="false" Editable=true StickyLeft=true HeaderStyle="z-index:5 !important;">
                        <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                                <div style="height:30px;"
                                class="drag-handle @(draggedProject?.ProjectId == context.Item.ProjectId ? "being-dragged" : "") flex-row  justify-center align-center ml-n3 "
                                draggable="true"
                                @ondragstart="@(() => HandleDragStart(context.Item))"
                                @ondragover:preventDefault
                                @ondragover="@(() => HandleDragOver(context.Item))"
                                @ondrop:preventDefault
                                @ondrop="@(() => HandleDropForInternalOrder(context.Item))"
                                @ondragenter="@(() => HandleDragEnter(context.Item))"
                                @ondragleave="@(() => HandleDragLeave(context.Item))">
                                    <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                    @context.Item.InternalOrder
                                </div>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                                <MudText>@context.Item.InternalOrder</MudText>
                            </MudHidden>
                        </CellTemplate>
                        <EditTemplate>
                            @if(!_isAdminView){
                                <MudText Style="display:none;" />
                            }
                            else
                            { 
                                <MudNumericField @bind-Value="context.Item.InternalOrder" Label="Id" Variant="Variant.Outlined" Min="1" Max="projects.Count()"/>
                            }
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ExternalId"))
                {
                    <PropertyColumn Property="x => x.ExternalOrder" Title="Id" Sortable="true" Filterable="false" CellStyle="text-align:center;"
                    DragAndDropEnabled="false" Groupable="false" Editable=true >
                        <CellTemplate>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                                <div class="drag-handle flex-row  justify-center align-center ml-n3" style="height:30px;" draggable="true"
                                @ondragstart="@(() => HandleDragStart(context.Item))"
                                @ondragover:preventDefault
                                @ondragover="@(() => HandleDragOver(context.Item))"
                                @ondrop:preventDefault
                                @ondrop="@(() => HandleDropForExternalOrder(context.Item))"
                                @ondragenter="@(() => HandleDragEnter(context.Item))"
                                @ondragleave="@(() => HandleDragLeave(context.Item))">
                                    <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                    @context.Item.ExternalOrder
                                </div>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                                <MudText>@context.Item.ExternalOrder</MudText>
                            </MudHidden>
                        </CellTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("Actions"))
                {

                    <TemplateColumn CellClass="" Title="Actions" Hideable="false" Filterable="false" Sortable="false" Groupable="false" StickyLeft=true HeaderStyle="z-index:4 !important; left: 50px" CellStyle=" left:50px; ">
                        <CellTemplate>
                            <div class="d-flex flex-auto flex-row">
                                <MudMenu Icon="@Icons.Material.Filled.Edit" Color="Color.Default" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft">
                                    @if (_isAdminView || _isEditorView)
                                    {
                                        <MudMenuItem OnClick="@(() => Logging(context.Item,_currentUserId))"
                                        Icon="@Icons.Material.Filled.WatchLater" >
                                            Logging hours
                                        </MudMenuItem>
                                    }
                                    @if (_isArchived && _isAdminView)
                                    {
                                        <MudMenuItem OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(context.Item))"
                                        Icon="@Icons.Material.Filled.Archive" IconSize="Size.Small">
                                            @(context.Item.IsArchived ? "Unarchive" : "Archive")
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteDialog(context.Item))"
                                        Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small">
                                            Delete
                                        </MudMenuItem>
                                    }
                                    else if (!_isArchived && _isAdminView || !_isArchived && _isClientView)
                                    {
                                        <MudMenuItem OnClick="@(() => ArchiveProject(context.Item))"
                                        Icon="@Icons.Material.Filled.Archive">
                                            Archive
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => Duplicate(context.Item))"
                                        Icon="@Icons.Material.Filled.ContentCopy">
                                            Duplicate
                                        </MudMenuItem>

                                    }

                                    @if(!_isArchived){
                                    <MudMenuItem OnClick="@(() => OnRowClick(context.Item))"
                                    Icon="@Icons.Material.TwoTone.Edit">
                                        Edit Row
                                    </MudMenuItem>
                                    }
                                </MudMenu>
                                @{
                                    var submissionStatus = context.Item.SubmissionStatus == Models.SubmissionStatus.Submitted ?
                            Color.Info : context.Item.SubmissionStatus == Models.SubmissionStatus.Approved ? Color.Success : Color.Error;
                                }

                                <MudTooltip Text="@context.Item.SubmissionStatus.ToString()" Arrow=true Color="submissionStatus" >
                                    <MudIconButton Color="@submissionStatus" Icon="@Icons.Material.Filled.Calculate" 
                                    Variant="Variant.Text" Size="Size.Large" OnClick="@(() => TimeCalculator(context.Item))" >
                                        @context.Item.SubmissionStatus.ToString()
                                    </MudIconButton>
                                </MudTooltip>
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                }

                @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
                {
                    <PropertyColumn Property="x => x.ProjectName" Title="Project Brief" StickyLeft="@(_isClientView ? false : true)" HeaderStyle="@(_isAdminView || _isEditorView ? "left:165px; z-index:4" : "")"
                    Hideable="false" CellStyle="@(_isAdminView || _isEditorView ? "left:165px;" : "left:0px;")" CellClass="outlined-dialog-xl-content"
                    Groupable="false" Editable=false Required=false>
                        <CellTemplate>
                            @if (context.Item.Status != ProjectStatus.Upcoming && (string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Resolution) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Size) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.CameraNumber) ||
                    string.IsNullOrEmpty(context.Item.ProjectSpecifications?.ColorProfile)))
                            {
                                <div class="d-flex gap-2 flex-row  justify-center align-center">

                                    <MudTextField T="string" AutoGrow=true Value="context.Item.ProjectName" Class="outlined-dialog-xl-content "  
                                    ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End" 
                                    AdornmentIcon="@Icons.Material.Filled.OpenInNew" OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                        <MudIcon Icon="@Icons.Material.Rounded.WarningAmber"></MudIcon>
                                    </MudTextField>
                                    <MudTooltip Text="Missing Information for the project, please fill it as soon as possible." Color="Color.Error" Placement="Placement.Bottom" Arrow="true">
                                        <MudIcon Class="d-flex" Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                                    </MudTooltip>
                                    <MudFab Class="d-flex floating-chat-icon info-new" @onclick="async () => await  OpenProjectChat(context.Item)" 
                                    StartIcon="@Icons.Material.Filled.Chat" Size="Size.Medium" />
                                </div>
                            }
                            else
                            {      
                                <div class="d-flex gap-2 flex-row  justify-center align-center">
                                    <MudTextField T="string" AutoGrow=true MaxLines="2"
                                    Value="context.Item.ProjectName" Class="outlined-dialog-xl-content"
                                    ReadOnly="true"
                                    Immediate="true" Adornment="Adornment.End" Variant="Variant.Outlined"
                                    AdornmentIcon="@Icons.Material.Filled.OpenInNew" 
                                    OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                    </MudTextField>
                                    <MudFab Class="d-flex floating-chat-icon info-new" @onclick="async () => await OpenProjectChat(context.Item)" StartIcon="@Icons.Material.Filled.Chat" Size="Size.Medium" />
                                </div>

                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                @* Important: isAdminView is added to the condition to show the column to the admin view
                    So the admin can group by the client name and see the projects of the client
                    The client view will not see the client name column, but the client name will be shown in the project brief

                *@
                @if (RoleBasedColumns[_currentRole].Contains("ClientName") || isAdminView ) 
                {
                    <PropertyColumn Property="x => x.Client.UserName" Title="Client Name" Grouping="_groupByClientName" Hidden="@(GetColumnVisibility("ClientUserName"))"
                    Hideable="true" Groupable="true" CellStyle="" CellClass="outlined-dialog-name-content"
                    Editable=false Required=false >

                        <CellTemplate>
                            <MudTextField T="string"
                            Value="context.Item.Client.UserName" 
                            ReadOnly="true" 
                            Immediate="true" Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Outlined"
                            MaxLines="4"
                            class="@(_isAdminView ? "cursor-pointer outlined-dialog-name-content grey-border": "outlined-dialog-name-content grey-border")"
                            @onclick="@( _isAdminView ? (async () => await OpenClientNameDialog(context.Item)) : null )"
                            OnAdornmentClick="@(() => OpenViewClientEditingGuidelinesComponent(context.Item))">
                            </MudTextField>
                        </CellTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                        </GroupTemplate>
                        <EditTemplate>

                            @if (Clients != null && Clients.Any() && _isAdminView)
                            {
                                <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2 outlined-dialog-max-content"
                                Variant="Variant.Outlined"
                                Label="Client Name"
                                @bind-Value="context.Item.ClientId">
                                    @foreach (var client in Clients)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@client.UserId" Ripple=true>
                                            @client.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>
                        

                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
                {
                    <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle="vertical-align: middle;" Hidden="@(GetColumnVisibility("ProgressBar"))"> 
                        <CellTemplate>
                            @if (context?.Item != null)
                            {
                                <div class="@(_isAdminView || _isEditorView ? "cursor-pointer ": "") " style="width: 100%; min-height: 40px; display:flex; align-items:center;"
                                @onclick="@( _isAdminView|| _isEditorView ? (async () => await OpenProgressDialog(context.Item)) : null )">

                                    @if (context?.Item != null)
                                    {
                                        <MudProgressLinear Value="context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                                    }
                                </div>
                            } 
                        </CellTemplate>

                        <EditTemplate Context="context">
                            @if (!_isClientView)
                            {
                                <MudSelect T="ProgressBarValue" Label="Progress" Class="mt-3"  AnchorOrigin="Origin.BottomCenter"
                                Value="@((ProgressBarValue)context.Item.ProgressBar)" Variant="Variant.Outlined"
                                ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                                </MudSelect>            
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Progress" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
                {
                    <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" HeaderStyle="width:115px;" Hidden="@(GetColumnVisibility("ShootDate"))"
                    Groupable="true" Editable=false CellStyle="text-align:center;" >
                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.FormattedShootDate" 
                            Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView || _isClientView ? "cursor-pointer" : "" )}")
                            ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                            @onclick="@( _isAdminView || _isClientView ? (() => OpenShootDateDialog(context.Item)) : null )"/>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(_isAdminView || _isClientView){
                                <MudDatePicker Label="Shoot Date" Variant="Variant.Outlined" Date="@context.Item.ShootDate"
                                DateChanged="@(date => context.Item.ShootDate = date)" Class="mt-3" Required="false" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Shoot Date" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
                {
                    <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" CellStyle="text-align:center; Required=false" Hidden="@(GetColumnVisibility("DueDate"))"
                    CellClass="outlined-dialog-md-content" Groupable="true" Editable=false >
                        <CellTemplate>
                            @if (context.Item.IsUrgent == true)
                            {
                                <MudTextField T="string" Value="context.Item.FormattedDueDate" 
                                ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                                Class=@($"outlined-dialog-lg-content {( _isAdminView ? "cursor-pointer" : "" )} {(_isClientView ? "grey-border" : "yellow-border")}")
                                @onclick="@( _isAdminView ? (() => OpenDueDateDialog(context.Item)) : null )"
                                AdornmentIcon="@Icons.Material.TwoTone.WarningAmber" AdornmentColor="Color.Default" />
                            }
                            else
                            {
                                <MudTextField T="string" Value="context.Item.FormattedDueDate" 
                                ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"
                                Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                @onclick="@( _isAdminView ? (() => OpenDueDateDialog(context.Item)) : null )"/>
                            }

                        </CellTemplate>
                        <EditTemplate>
                            @if(@_isAdminView){
                                <MudDatePicker Label="Due Date"
                                Variant="Variant.Outlined"
                                Class="mt-3"
                                Date="@context.Item.DueDate"
                                DateChanged="@(date => context.Item.DueDate = date)"
                                Required="false" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Due Date" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
                {
                    <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true" Required=false CellClass="outlined-dialog-md-content" Hidden="@(GetColumnVisibility("WorkingMonth"))"
                    CellStyle="text-align:center;" Groupable="true" Editable=false>
                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.FormattedWorkingMonth" 
                            Class=@($"outlined-dialog-md-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenWorkingMonthDialog(context.Item)) : null )"
                            ReadOnly="true" Variant="Variant.Outlined" Adornment="Adornment.End"/>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(@_isAdminView){
                                <MudDatePicker Required="false" Label="Working Month" Variant="Variant.Outlined" Class="mt-3" FixDay="1"
                                DateFormat="MM/yyyy" Date="@context.Item.WorkingMonth" DateChanged="@(date => context.Item.WorkingMonth = date)" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Working Month" />
                        </GroupTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("Status"))
                {
                    <PropertyColumn Property="x => x.FormatStatus" Title="Status" Hideable="true" Groupable="true" Hidden="@(GetColumnVisibility("Status"))"
                    CellClass="status-cell-center" CellStyle="text-align:center !important;">
                        <CellTemplate>
                            <MudTextField ReadOnly=true Variant="Variant.Outlined" 
                            Style="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? GetStatusStyle(ProjectStatus.Working) 
                            : GetStatusStyle(context.Item.Status))" 
                            Value=@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? ProjectStatus.Working.ToString() : context.Item.FormatStatus)
                            Class="outlined-dialog-max-content cursor-pointer"
                            @onclick="@(() => OpenStatusDialog(context.Item))" />
                        </CellTemplate>
                        <EditTemplate Context="context">    
                            <MudSelect T="ProjectStatus" Class="mt-3" Variant="Variant.Outlined" Label="Status"
                            Value="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review 
                                ? ProjectStatus.Working : context.Item.Status)"
                            Text="@(_isClientView && context.Item.Status == ProjectStatus.Ready_To_Review ? "Working" : context.Item.Status.ToString().Replace("_", " "))"
                            ValueChanged="@(newValue => context.Item.Status = newValue)"
                            Required="true">
                                @if(_isAdminView)
                                {
                                    @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                    {
                                        <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                    }
                                }
                                else if(_isEditorView)
                                {
                                    <MudSelectItem Value="ProjectStatus.Scheduled">Scheduled</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Working">Working</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Delivered">Delivered</MudSelectItem>

                                }
                                else{
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Status" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientPaymentStatus"))
                {
                    <PropertyColumn  Property="x => x.FormatAdminStatus" Title="Client Payment Status" Hideable="true" Groupable="true" Hidden="@(GetColumnVisibility("AdminStatus"))"
                    Required=false CellStyle="text-align:center;">
                        <CellTemplate>
                            <MudTextField ReadOnly=true Variant="Variant.Outlined" 
                            Style="@GetAdminStatusStyle(context.Item.AdminStatus)" 
                            Value=context.Item.FormatAdminStatus
                            Class=@($"outlined-dialog-max-content {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenAdminStatusDialog(context.Item)) : null )"/>
                        </CellTemplate>
                        <EditTemplate Context="context">
                            @if(_isAdminView){
                                <MudSelect T="AdminProjectStatus" Class="mt-3" Variant="Variant.Outlined" Label="Client Payment Status"
                                @bind-Value="context.Item.AdminStatus"Required="true">
                                    @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                                    {
                                        <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else{
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Payment Status" />
                        </GroupTemplate>
                    </PropertyColumn>

                }
                <PropertyColumn Property="x => x.Link" Title="Project Link" Required=false Groupable=false Hideable="true" Editable=false Filterable="false" Sortable="false" CellStyle="text-align:center;" 
                Hidden="@(GetColumnVisibility("Link"))">
                    <CellTemplate>
                        @if (!String.IsNullOrEmpty(@context.Item.Link))
                        {
                            <MudTooltip Text="@context.Item.Link">
                                @if(_isClientView)
                                {
                                    <MudLink Style="color:#0e9b42 !important;" Href="@context.Item.Link" Target="_blank">
                                        <MudIcon Icon="@Icons.Material.Filled.OpenInNew" />
                                    </MudLink>
                                }
                                else
                                {
                                    <MudIconButton Style="color:#0e9b42 !important;" Icon="@Icons.Material.Filled.OpenInNew" @onclick="@(() => OpenLinkDialog(context.Item))" />
                                }
                            </MudTooltip>
                        }
                        else
                        {
                            @if(_isClientView)
                            {
                                <MudIcon Disabled Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Default" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" @onclick="@(() => OpenLinkDialog(context.Item))" Color="Color.Default" />
                            }
                        }      
                    </CellTemplate>
                    <EditTemplate>
                        <div class="@EditTemplateCss">
                            <MudTextField Label="Project Link" Variant="Variant.Outlined" @bind-Value="@context.Item.Link" />
                        </div>
                    </EditTemplate>
                </PropertyColumn>
                @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
                {
                    <PropertyColumn Property="x => x.PrimaryEditorName" Title="Primary Editor" Hideable="true" Hidden="@(GetColumnVisibility("PrimaryEditorName"))"
                    Groupable="true" Editable=false Required=false CellStyle="text-align:center;">
                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.PrimaryEditorName"
                            Class=@($"outlined-dialog-name-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenPrimaryEditorDialog(context.Item)) : null )"
                            ReadOnly="true" Variant="Variant.Outlined" Adornment="Adornment.End"/>
                        </CellTemplate>
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                        </GroupTemplate>
                        <EditTemplate>
                            @if (Editors != null && Editors.Any() && _isAdminView)
                            {
                                <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2" Variant="Variant.Outlined" Label="Primary Editor" 
                                ValueChanged="@(async value => {
                                if (value == null) {
                                    var result = await DialogService.ShowMessageBox(
                                    "Confirm Unassign",
                                    "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED.",
                                    yesText: "Unassign",
                                    cancelText: "Cancel"
                                    );
                                    if (result == true)
                                        context.Item.PrimaryEditorId = value;
                                }
                                    else{
                                        context.Item.PrimaryEditorId = value;
                                        }
                                })"
                                Value="@context.Item.PrimaryEditorId">
                                    <MudSelectItem Class="" T="string" Value="null" Ripple=true>
                                        Unassign Editor
                                    </MudSelectItem>
                                    @foreach (var editor in Editors)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                            @editor.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
                {
                    <PropertyColumn Property="x => x.SecondaryEditorName" Title="2nd Editor" Hideable="true" Hidden="@(GetColumnVisibility("SecondaryEditorName"))"
                    Groupable="true" Editable=false Required=false CellStyle="text-align:center;">

                        <CellTemplate>
                            <MudTextField T="string" Value="@context.Item.SecondaryEditorName" 
                            Class=@($"outlined-dialog-name-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                            @onclick="@( _isAdminView ? (() => OpenSecondaryEditorDialog(context.Item)) : null )"
                            ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"/>
                        </CellTemplate>
                        <EditTemplate>
                            @if (Editors != null && Editors.Any() && _isAdminView)
                            {
                                <MudSelect T="string"
                                AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Class="d-flex justify-center mud-width-full py-2"
                                Variant="Variant.Outlined"
                                Label="Secondary Editor"
                                ValueChanged="@(async value => {
                                if (value == null) {
                                    var result = await DialogService.ShowMessageBox(
                                    "Confirm Unassign",
                                    "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED",
                                    yesText: "Unassign",
                                    cancelText: "Cancel"
                                    );
                                    if (result == true)
                                        context.Item.SecondaryEditorId = value;
                                }
                                    else{
                                        context.Item.SecondaryEditorId = value;
                                        }
                                })"
                                Value="@context.Item.SecondaryEditorId">
                                    <MudSelectItem Class="" T="string" Value="null" Ripple=true>
                                        Unassign Editor
                                    </MudSelectItem>
                                    @foreach (var editor in Editors)
                                    {
                                        <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                            @editor.UserName
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudText Style="display:none;" />
                            }

                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("PrivateNotes"))
                {
                    <PropertyColumn Property="x => x.NotesForProject" CellClass="outlined-dialog-md-content" Title="Private Notes" Hidden="@(GetColumnVisibility("PrivateNotes"))"
                    Sortable="false" Filterable="false" Hideable="true" Groupable="false"  Editable=false Required=false>
                        <CellTemplate>
                            @{
                                var notes = context.Item.NotesForProject;
                                bool isEmpty = string.IsNullOrEmpty(notes);
                            }
                            <MudTooltip Text="Click to view/change private note">

                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                Style=@($"{(!isEmpty ? "color: #f60008;" : "color: var(--mud-palette-text-primary);")}")
                                @onclick="@(() => OpensPrivateNoteForProject(context.Item))" />
                            </MudTooltip>
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }


                @* Editors Info*@
                @if (RoleBasedColumns[_currentRole].Contains("EditorBillable"))
                {
                    @if (_isAdminView)
                    {
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.DatePaidEditor" Title="P.Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorDatePaid"))">
                            <CellTemplate>
                                @if (context.Item.PrimaryEditorDetails.DatePaidEditor != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")"
                                    ReadOnly="true" Variant="Variant.Outlined" 
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                    @onclick="@( _isAdminView ? (() => OpenPrimaryEditorPaymentDate(context.Item)) : null )"/>
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined"
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")
                                    @onclick="@( _isAdminView ? (() => OpenPrimaryEditorPaymentDate(context.Item)) : null )"/>
                                }
                            </CellTemplate>
                            <EditTemplate>
                                @if(context.Item.PrimaryEditorId != null)
                                {
                                    <MudDatePicker Date="@context.Item.PrimaryEditorDetails.DatePaidEditor" 
                                    DateChanged="@(date => context.Item.PrimaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)"
                                    Label="P.Date Paid" Variant=Variant.Outlined/>
                                }
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.BillableHours" Title="P.Logged Hours" Groupable=false Filterable="false" Hideable="true" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorLoggedHours"))">
                            <CellTemplate>
                                @if(@context.Item.PrimaryEditorDetails.BillableHours >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.BillableHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="grey-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.Overtime" Title="P.Editor Overtime" Groupable=false Hideable="true" Filterable="false" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorOvertime"))" >
                            <CellTemplate>
                                @if(@context.Item.PrimaryEditorDetails.Overtime != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.Overtime.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.PrimaryEditorDetails.AdjustmentHours" Title="P.Adjust" Sortable=false Hideable="true" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorAdjustment"))">
                            <CellTemplate>
                                @if(@context.Item.PrimaryEditorDetails.AdjustmentHours >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.AdjustmentHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="yellow-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true"  
                                    Variant="Variant.Outlined" Class="yellow-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.FinalBillableHours" Title="P.Billable Hours" Groupable=false Filterable="false" Hideable="true" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorFinalBillableHours"))" >
                            <CellTemplate>
                                @if(@context.Item.PrimaryEditorDetails.FinalBillableHours >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.FinalBillableHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="grey-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.PrimaryEditorDetails.PaymentAmount" Title="P.Editor Payment" Groupable="false" Hideable="true" Filterable=false Editable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("PrimaryEditorPayment"))">
                            <CellTemplate>
                                @if (context.Item?.PrimaryEditorDetails?.PaymentAmount >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.PrimaryEditorDetails.PaymentAmount.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SecondaryEditorDetails.DatePaidEditor" Title="Sec Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorDatePaid"))">
                            <CellTemplate>
                                @if (context.Item.SecondaryEditorDetails.DatePaidEditor != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")" 
                                    ReadOnly="true" Variant="Variant.Outlined"
                                    @onclick="@( _isAdminView ? (() => OpenSecondaryEditorPaymentDate(context.Item)) : null )"
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}")/>
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" @onclick="@( _isAdminView ? (() => OpenSecondaryEditorPaymentDate(context.Item)) : null )"
                                    Variant="Variant.Outlined" 
                                    Class=@($"outlined-dialog-lg-content grey-border {( _isAdminView ? "cursor-pointer" : "" )}") />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                @if(context.Item.SecondaryEditorId != null)
                                {
                                    <MudDatePicker  
                                    Date="@context.Item.SecondaryEditorDetails.DatePaidEditor"
                                    Label="Sec.Date Paid"
                                    Variant=Variant.Outlined
                                    DateChanged="@(date => context.Item.SecondaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)" />
                                }
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.BillableHours" Title="Sec Logged Hours" Groupable=false Hideable="true" Editable=false Filterable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorLoggedHours"))">
                            <CellTemplate>
                                @if(context.Item.SecondaryEditorDetails.BillableHours != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.BillableHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="grey-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.Overtime" Title="Sec Editor Overtime" Groupable=false Hideable="true" Filterable="false" Editable=false CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorOvertime"))" >
                            <CellTemplate>
                                @if(context.Item.SecondaryEditorDetails.Overtime != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.Overtime.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.AdjustmentHours" Title="Sec Adjust" Hideable="true" Sortable="false" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorAdjustment"))">
                            <CellTemplate>
                                @if(context.Item.SecondaryEditorDetails.AdjustmentHours != null)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.AdjustmentHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="yellow-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="yellow-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.FinalBillableHours" Title="Sec.Editor Billable Hours" Groupable=false Hideable="true" Editable=false Filterable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorFinalBillableHours"))">
                            <CellTemplate>
                                @if(context.Item.SecondaryEditorDetails.FinalBillableHours >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.FinalBillableHours.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="grey-border" 
                                    Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="grey-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.SecondaryEditorDetails.PaymentAmount" Title="Sec.Editor Payment" Groupable=false Hideable="true" Editable=false Filterable="false" CellStyle="text-align:center;" Hidden="@(GetColumnVisibility("SecondaryEditorPayment"))">
                            <CellTemplate>
                                @if (context.Item?.SecondaryEditorDetails?.PaymentAmount >= 0)
                                {
                                    <MudTextField T="string" Value="@context.Item.SecondaryEditorDetails.PaymentAmount.ToString()" 
                                    ReadOnly="true" Variant="Variant.Outlined" Class="green-border" 
                                    Adornment="Adornment.End" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T="string" Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else if (_isEditorView)
                    {
                        <TemplateColumn Title="Editor Paid Date" Sortable="true" Filterable="true" Groupable="false" Editable=false Hideable="true">
                            <CellTemplate>
                                @{var _DatePaidEditor = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.DatePaidEditor
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.DatePaidEditor : null );
                                }
                                @if (_DatePaidEditor == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border outlined-dialog-lg-content" />
                                }
                                else
                                {
                                    <MudTextField Value=@_DatePaidEditor.Value.ToString("MM/dd/yyyy") T="string" Class="grey-border outlined-dialog-lg-content"
                                    ReadOnly=true/>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Logged Hours" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal? _BillableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.BillableHours
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.BillableHours : null );
                                }
                                @if(_BillableHours  == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border"/>                             
                                }
                                else{
                                    <MudTextField Value="_BillableHours" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border" Adornment="Adornment.End" AdornmentText="h" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Editor Overtime" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal? _overtime = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.Overtime
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.Overtime : null );
                                }
                                @if(_overtime  == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                                else{
                                    <MudTextField Value=_overtime ReadOnly="true"
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.End" AdornmentText="h" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Adjustment" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{
                                    decimal? _adjustment = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.AdjustmentHours
                            : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.AdjustmentHours : null );
                                }
                                @if(_adjustment == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="yellow-border"/>                           
                                }
                                else{
                                    <MudTextField Value=_adjustment ReadOnly="true"
                                    Variant="Variant.Outlined" Class="yellow-border"  Adornment="Adornment.End" AdornmentText="h" />                                
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Billable Hours" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{decimal? _billableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.FinalBillableHours
                    : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.FinalBillableHours : null );
                                }

                                @if(_billableHours >= 0)
                                {
                                    <MudTextField Value="_billableHours" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="grey-border" Adornment="Adornment.End" AdornmentText="h" />
                                }
                                else if (_billableHours == null)
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="grey-border" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Payment" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                            <CellTemplate>
                                @{var paymentAmount = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.PaymentAmount
                        : (context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.PaymentAmount : null);
                                }
                                @if (paymentAmount >= 0)
                                {
                                    <MudTextField Value="paymentAmount" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.End" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true"
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }

                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
                {
                    <PropertyColumn Property="x => x.ClientBillableHours" Title="Client Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;"  Hidden="@(GetColumnVisibility("ClientBillableHours"))">
                        <CellTemplate>
                            @if(context.Item.ClientBillableHours >= 0)
                            {
                                <MudTextField Value="context.Item.ClientBillableHours" ReadOnly="true" 
                                Variant="Variant.Outlined" Class="grey-border" Adornment="Adornment.End" AdornmentText="h" />
                            }
                            else
                            {
                                <MudTextField T=string Text="N/A" ReadOnly="true"
                                Variant="Variant.Outlined" Class="grey-border" />
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillableAmount"))
                {
                    if(_isAdminView)
                    {
                        <PropertyColumn Property="x => x.ClientBillableAmount" Title="Client Payment" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;"  Hidden="@(GetColumnVisibility("ClientPayment"))">
                            <CellTemplate>
                                @if(context.Item.ClientBillableAmount >= 0)
                                {
                                    <MudTextField Value="context.Item.ClientBillableAmount" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.Start" AdornmentText="$" />
                                }
                                else
                                {
                                    <MudTextField T=string Text="N/A" ReadOnly="true" 
                                    Variant="Variant.Outlined" Class="green-border" />
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else if(_isClientView)
                    {
                        <PropertyColumn Property="x => x.ClientBillableAmount" Title="Payment Amount" Hideable="true" HeaderStyle="max-width:140px" 
                        Groupable=false Editable=false CellStyle="text-align:center; max-width:140px">
                            <CellTemplate Context="context">
                                @{
                                    var project = context.Item as Project;
                                    @if (project?.IsPaymentVisible == true && project.ClientBillableAmount >= 0)
                                    {
                                        <MudTextField Value="project.ClientBillableAmount" ReadOnly="true" 
                                        Variant="Variant.Outlined" Class="green-border" Adornment="Adornment.Start" AdornmentText="$" />
                                    }
                                    else
                                    {
                                        <MudTextField T=string Text="N/A" ReadOnly="true"
                                        Variant="Variant.Outlined" Class="green-border"/>
                                    }
                                }
                            </CellTemplate>
                            <EditTemplate>
                                <MudText Style="display:none;" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                }
                @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
                {
                    <TemplateColumn T="Project" Title="Payment Visible" Sortable="false" Filterable="false" Groupable=false Hideable="true" Hidden="@(GetColumnVisibility("ClientPaymentToggle"))">
                        <CellTemplate>
                            <MudItem  Class="d-flex justify-center">
                                <MudIconButton Icon="@(context.Item.IsPaymentVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                Color="@(context.Item.IsPaymentVisible ? Color.Success : Color.Error)" Variant=Variant.Filled
                                OnClick="@(async () => await TogglePaymentVisibility(context.Item))" Class="d-flex justify-center pa-2" style="text-align:center;"
                                Size="Size.Small" />
                            </MudItem>
                        </CellTemplate>
                    </TemplateColumn>
                }



                @if (RoleBasedColumns[_currentRole].Contains("Archive"))
                {
                    @if (_isArchived)
                    {
                        <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" Hideable="true"/>
                    }
                }        
            </Columns>
        </MudDataGrid>
        @if (ProjectState.CurrentProject != null )
        {
            <div class="mud-overlay mud-overlay-dialog" style=""><div class="mud-overlay-scrim mud-overlay-dark"></div></div>
            <div class="floating-chat-container">

                <Chats.ProjectChatDialog Project="@ProjectState.CurrentProject"
                UserId="@_currentUserId"
                IsAdminView="@isAdminView"
                IsClientView="@_isClientView" isEditorView="@_isEditorView"
                TimezoneOffsetMinutes="@timezoneOffsetMinutes" /> </div>
        }

    }
</MudMainContent>



@code {
    private bool _loading = true;
    private bool _loadingIndicator;
    [CascadingParameter]
    public ClaimsPrincipal? currentUser { get; set; }
    private MudDataGrid<Project> _dataGrid = new();
    private List<Project?> projects = new List<Project?>();
    private Project? projectToDelete;
    private bool HasAnySecondaryEditor;
    private bool HasAnyPrimaryEditor;
    private readonly DialogOptions DialogOptions = new() { CloseButton = true, FullScreen = false };
    private bool _isArchived;
    private bool _isAdminView;
    private bool isAdminView;
    private bool _isEditorView;
    private bool _isClientView;
    private bool _groupByClientName;
    private int timezoneOffsetMinutes; // Gets User local time to pass it to change timing of chat-messages etc according to his own.
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string EditTemplateCss => _currentRole == "Client" ? "d-none" : "d-block";
    private string? CircuitId;
    private string positionStyle = "";
    private string pathData = "";    
    private List<UserRoleViewModel.UserProjectViewModel> Editors = new List<UserRoleViewModel.UserProjectViewModel>();
    private List<UserRoleViewModel.UserProjectViewModel> Clients = new List<UserRoleViewModel.UserProjectViewModel>();
    private Dictionary<string, bool> _columnVisibility = new();
    private List<ColumnPreset> _columnPresets = new();
    [Inject] private IConfirmationService ConfirmationService { get; set; } = default!;
    [Inject] private LoadingService LoadingService { get; set; }
    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","ClientPaymentStatus","PrivateNotes","AdminBillableHoursView","ClientBillable","ClientBillableAmount","EditorBillable","SubmittedStatus","Actions","Archive" } },
        { "Editor", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","PrivateNotes","BillableHours","EditorBillable","SubmittedStatus", "Actions"} },
        { "Client", new List<string> { "ExternalId", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate","ClientBillableAmount", "Status","ClientPaymentStatus" } }
    };
    private Guid _gridKey = Guid.NewGuid();
    private List<ColumnDefinition> _availableColumns = new()
    {
        new ColumnDefinition { Name = "ClientUserName", DisplayName = "Client User Name" },
        new ColumnDefinition { Name = "ProgressBar", DisplayName = "Progress Bar" },
        new ColumnDefinition { Name = "ShootDate", DisplayName = "Shoot Date" },
        new ColumnDefinition { Name = "DueDate", DisplayName = "Due Date" },
        new ColumnDefinition { Name = "WorkingMonth", DisplayName = "Working Month" },
        new ColumnDefinition { Name = "Status", DisplayName = "Status" },
        new ColumnDefinition { Name = "AdminStatus", DisplayName = "Admin Status" },
        new ColumnDefinition { Name = "Link", DisplayName = "Link" },
        new ColumnDefinition { Name = "PrimaryEditorName", DisplayName = "Primary Editor Name" },
        new ColumnDefinition { Name = "SecondaryEditorName", DisplayName = "Secondary Editor Name" },
        new ColumnDefinition { Name = "PrivateNotes", DisplayName = "Private Notes" },
        new ColumnDefinition { Name = "PrimaryEditorDatePaid", DisplayName = "Primary Editor Date Paid" },
        new ColumnDefinition { Name = "PrimaryEditorLoggedHours", DisplayName = "Primary Editor Logged Hours" },
        new ColumnDefinition { Name = "PrimaryEditorOvertime", DisplayName = "Primary Editor Overtime" },
        new ColumnDefinition { Name = "PrimaryEditorAdjustment", DisplayName = "Primary Editor Adjustment" },
        new ColumnDefinition { Name = "PrimaryEditorFinalBillableHours", DisplayName = "Primary Editor Final Billable Hours" },
        new ColumnDefinition { Name = "PrimaryEditorPayment", DisplayName = "Primary Editor Payment" },
        new ColumnDefinition { Name = "SecondaryEditorDatePaid", DisplayName = "Secondary Editor Date Paid" },
        new ColumnDefinition { Name = "SecondaryEditorLoggedHours", DisplayName = "Secondary Editor Logged Hours" },
        new ColumnDefinition { Name = "SecondaryEditorOvertime", DisplayName = "Secondary Editor Overtime" },
        new ColumnDefinition { Name = "SecondaryEditorAdjustment", DisplayName = "Secondary Editor Adjustment" },
        new ColumnDefinition { Name = "SecondaryEditorFinalBillableHours", DisplayName = "Secondary Editor Final Billable Hours" },
        new ColumnDefinition { Name = "SecondaryEditorPayment", DisplayName = "Secondary Editor Payment" },
        new ColumnDefinition { Name = "ClientBillableHours", DisplayName = "Client Billable Hours" },
        new ColumnDefinition { Name = "ClientPayment", DisplayName = "Client Payment" },
        new ColumnDefinition { Name = "ClientPaymentToggle", DisplayName = "Client Payment Toggle" },

    };
    private void HandleProjectStateChange()
    {
        InvokeAsync(StateHasChanged);
    }
    // quick filter - filter globally across multiple columns with the same input
    protected override async Task OnInitializedAsync()
    {
        // Get the current user ID
        LoadingService.Subscribe(isVisible =>
        {
            _loadingIndicator = isVisible;
            StateHasChanged();
        });    
        ProjectState.OnChange += HandleProjectStateChange;
        _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!;
        foreach (var column in _availableColumns)
        {
            _columnVisibility[column.Name] = column.isHidden;
        }
        if (currentUser.IsInRole("Admin"))
        {
            _currentRole = "Admin";
            _isAdminView = true;
            isAdminView = true;
            await GetColumnsPresetPreferences();

        }
        else if (currentUser.IsInRole("Editor"))
        {
            _currentRole = "Editor";
            _isEditorView = true;
            _isAdminView = false;

        }
        else if (currentUser.IsInRole("Client"))
        {
            _currentRole = "Client";
            _isClientView = true;
            _isAdminView = false;
        }
        CircuitId = Guid.NewGuid().ToString();
        Broadcaster.Subscribe(CircuitId, HandleProjectsUpdated);
        _loading = false;

    }    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timezoneOffsetMinutes = await JSRuntime.InvokeAsync<int>("getTimezoneOffset");        
            await LoadProjects();

            StateHasChanged();

        }

    }
    public void Dispose()
    {
        if (CircuitId != null)
        {
            Broadcaster.Unsubscribe(CircuitId);
        }
        ProjectState.OnChange -= HandleProjectStateChange;
    }

    private async Task ResetState()
    {
        _gridKey = Guid.NewGuid();
    }


    private async Task GetColumnsPresetPreferences()
    {
        try
        {
            _columnPresets = await columnPreferenceService.GetUserPresets(_currentUserId);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private bool GetColumnVisibility(string columnName)
    {
        return !_columnVisibility.GetValueOrDefault(columnName, false);
    }

    private string _selectedPresetName;
    private const string _Default = "_Default";
    private async Task LoadSelectedPreset(string presetName)
    {
        if (string.IsNullOrEmpty(presetName))
        {
           _selectedPresetName = string.Empty;
            foreach (var column in _availableColumns)
            {
                _columnVisibility[column.Name] = column.isHidden;
            }
           Snackbar.Add("You've removed the filter", Severity.Info);
           return;
        }
        try
        {

            // Get the preferences from the service
            var preferences = await columnPreferenceService.GetPreferencesByName(_currentUserId, presetName);

            // Update the visibility dictionary
            _columnVisibility = preferences;

            StateHasChanged();
            Snackbar.Add($"Preset '{presetName}' loaded successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"failed loading preset: {ex.Message}");
            Snackbar.Add($"Error loading preset. please contact support!", Severity.Error);
        }
    }

    // Open Dialog to Saves the visibility state as a new preset 
    // which can be loaded for fast access to the columns
    private async Task OpenColumnPreferencesDialog()
    {
        var parameters = new DialogParameters
        {
            ["VisibilityState"] = _columnVisibility,
            ["Columns"] = _availableColumns,
            ["_columnPresets"] = _columnPresets
        };

        var dialog = await DialogService.ShowAsync<ColumnPreferencesDialog>("Column Preferences", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is ColumnPreferenceResult presetResult)
            {
                _columnVisibility = presetResult.Visibility;
                await columnPreferenceService.SavePreset(_currentUserId, presetResult.PresetName, presetResult.Visibility);
                await GetColumnsPresetPreferences();
                _selectedPresetName = presetResult.PresetName;

            }
            else
            {
                _columnVisibility = (Dictionary<string, bool>)result.Data;
            }
            StateHasChanged();
        }
    }
   

    // Quick Global Filter which is used to search in the entire grid
    private Func<Project, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // Null-safe string comparisons
        if (x.ProjectName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (x.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        // Combine all fields with null checks
        var searchableText = string.Join(" ", new string[]
        {
        x.Link,
        x.FormatStatus,
        x.FormatAdminStatus,
        x.ClientName,
        x.PrimaryEditorName,
        x.SecondaryEditorName,
        x.FormattedShootDate,
        x.FormattedDueDate,
        x.NotesForProject,
        x.FormattedWorkingMonth,
            }.Where(s => s != null));

        return searchableText.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };


    private async Task OnClick(){
        await ScrollManager.ScrollToBottomAsync(".mud-table-container", ScrollBehavior.Smooth);
    }
    private bool _shouldScroll = false;
   

    private async Task OnRowClick(Project project)
    {
        StateHasChanged();
        await _dataGrid.SetEditingItemAsync(project);
        LoadingService.HideLoading();
        StateHasChanged();

    }
    private async Task HandleProjectsUpdated()
    {
        await InvokeAsync(async () =>
        {
            await LoadProjects();
            StateHasChanged();
        });
    }

    
    private async Task AdminToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task EditorToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task ClientToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjects();
        LoadingService.HideLoading();
    }

    private async Task ArchivedToggle()
    {
        LoadingService.ShowLoading();
        _isArchived = !_isArchived;
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task OpenProjectChat(Project Project)
    {
        try
        {
            LoadingService.ShowLoading();
            await Task.Yield(); 
            ProjectState.SetProject(Project);
            await Task.Yield(); 
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }
    /// <summary>
    /// Ensures thread-safe access to the LoadProjects method using SemaphoreSlim.
    /// SemaphoreSlim(1,1) creates a lightweight synchronization object that:
    /// - Allows only 1 thread to access the protected code at a time (first parameter)
    /// - Has a maximum count of 1 (second parameter)
    /// WaitAsync() acquires the lock before executing the code
    /// Release() ensures the lock is released after execution, even if an exception occurs
    /// This prevents race conditions when LoadProjects is called simultaneously by multiple events
    /// </summary>
    // Using it here to prevent LoadProject and RowsPerPageChanged from calling LoadProjects simultaneously
    private SemaphoreSlim _loadingSemaphore = new SemaphoreSlim(1, 1);
    //  Load project for admin/editor view only (will later be split )
    private async Task LoadProjects()
    {
        try
        {
            await _loadingSemaphore.WaitAsync();
            if (_isAdminView)
            {
                projects = await projectServices.GetProjectsAsync(_isArchived);
                Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                HasAnyPrimaryEditor = !projects.Any(x => x.PrimaryEditorId != null);
                HasAnySecondaryEditor = !projects.Any(x => x.SecondaryEditorId != null);

            }
            // for client view which will fetch his own projects only)
            else if (_isClientView && isAdminView == false)
                await LoadProjectsForClient();
            // this is for the admin to see all the projects but from the client view
            else if (_isClientView && isAdminView == true || _isEditorView && isAdminView == true)
            {
                projects = await projectServices.GetProjectsAsync(_isArchived);
                Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
            }
            else if (_isEditorView && isAdminView == false)
                await LoadProjectsForEditors();
            StateHasChanged();
            _shouldScroll = true;
        }
        finally
        {
            _loadingSemaphore.Release();

        }

    }
    // Loading Projects for Editors View
    private async Task LoadProjectsForEditors()
    {
        LoadingService.ShowLoading();
        projects = await projectServices.GetProjectsForEditors(_isArchived, _currentUserId);
        LoadingService.HideLoading();
        StateHasChanged();
    }
    // Loading Projects for Client View
    private async Task LoadProjectsForClient()
    {
        LoadingService.ShowLoading();
        projects = await projectServices.GetProjectsForClients(_isArchived, _currentUserId);
        LoadingService.HideLoading();
        StateHasChanged();
    }

    // Add new project dialog
    private async Task AddProjectDialogAsync(DialogOptions options)
    {   
        LoadingService.ShowLoading();
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 8;

        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView},
            { "Editors", Editors},
            { "Clients", Clients}
        };
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", dialogParameters,options);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var newProject = (Project) result.Data!;
            if(newProject.ClientId == null)
            {
                newProject.ClientId = _currentUserId;
            }
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
        LoadingService.HideLoading();

    }
    HashSet<Project> SelectedProjects = new();

    private async Task SelectedItems(HashSet<Project> projects)
    {
        if (!_isAdminView)
            return;
        if(SelectedProjects == null || SelectedProjects.Count < 1)
        {
            Snackbar.Add("You didn't select any projects, please select projects first!", Severity.Error);
            return;
        }
        LoadingService.ShowLoading();
        try 
        {
            var dialogParameters = new DialogParameters
            {
                { "SelectedProjects", SelectedProjects },
            };

            var dialog = await DialogService.ShowAsync<EditSelected>("Create New Project", dialogParameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                var modifiedProjects = result.Data as HashSet<Project>;
                if (modifiedProjects != null)
                {
                    await projectServices.UpdateProjectsInBatchAsync(modifiedProjects, _currentUserId);
                    Snackbar.Add("Saved all projects successfully", Severity.Success);
                }
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add("Failed to update all projects. Please contact support.", Severity.Error);
            Console.WriteLine($"Error updating due date: {ex.Message}");
        }
        finally 
        {
            LoadingService.HideLoading();
            SelectedProjects = new();
        }
    }
    private async Task CreateProjectDialogAsync(DialogOptions options)
    {
        LoadingService.ShowLoading();
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 8;
        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView}
        };
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Create New Project", dialogParameters, options);
        LoadingService.HideLoading();
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var newProject = (Project) result.Data!;
            newProject.WorkingMonth = DateTime.Today;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
            if(_isClientView)
            {
                var project = await projectServices.GetProjectByIdAsync(newProject.ProjectId);
                await _notificationService.QueueProjectCreationNotification(project);
            }
        }
    }
    // Deleting project in archive
    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        if (!await ConfirmationService.Confirm($"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"))
        {            
            return;
        }
        LoadingService.ShowLoading();
        await projectServices.DeleteProjectAsync(projectToDelete.ProjectId);
        await LoadProjects();
        LoadingService.HideLoading();
        StateHasChanged();
    }
    // Archiving and Unarchiving the project
    public async Task ArchiveProject(Project project)
    {
        LoadingService.ShowLoading();
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var archivedProject = (string) result.Data!;
            if(archivedProject != null)
            {
                await projectServices.ArchiveProjectAsync(project.ProjectId, archivedProject);
                await projectServices.ReorderProjectAsync(project.ProjectId, project.InternalOrder = null, false);
                await LoadProjects();

            }
        }
        LoadingService.HideLoading();

    }
    public async Task Duplicate(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newProject = new Project();
            newProject.ClientId = project.ClientId;
            newProject.ProjectName = project.ProjectName + "- Copy ";
            newProject.FootageLink = project.FootageLink;
            newProject.Deliverables = project.Deliverables;
            newProject.Description = project.Description;
            newProject.MusicPreference = project.MusicPreference;
            newProject.ShootDate = DateTime.UtcNow;
            newProject.DueDate = DateTime.UtcNow.AddDays(28);
            newProject.MusicPreference = project.MusicPreference;

            newProject.ProjectSpecifications = project.ProjectSpecifications;
            {
                newProject.ProjectSpecifications.ColorProfile = project.ProjectSpecifications.ColorProfile;
                newProject.ProjectSpecifications.CameraNumber = project.ProjectSpecifications.CameraNumber;
                newProject.ProjectSpecifications.Resolution = project.ProjectSpecifications.Resolution;
                newProject.ProjectSpecifications.Size = project.ProjectSpecifications.Size;
                newProject.ProjectSpecifications.AudioDetails = project.ProjectSpecifications.AudioDetails;
            };
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            LoadingService.HideLoading();
            Snackbar.Add("Successfully duplicated this project!", Severity.Success);


        }
        catch (Exception ex)
        {

            Snackbar.Add("Failed to duplicate this project !", Severity.Error);
            throw ex;

        }

    }

    private async Task UnarchiveProject(Project project)
    {
        LoadingService.ShowLoading();
        if (await ConfirmationService.Confirm($"Are you sure you'd like to unarchive this project {project.ProjectName}?"))
        {
            await projectServices.UnarchiveProjectAsync(project.ProjectId);
            await LoadProjects();
        }
        LoadingService.HideLoading();


    }
    // Opens Description Dialog
    private void OpenDescriptionDialog(Project context)
    {
        LoadingService.ShowLoading();
        var parameters = new DialogParameters
        {
            { "context", context },
            { "currentRole", _currentRole},
            { "modifiedProject", EventCallback.Factory.Create<Project>(this, async (modifiedProject) =>
                {
                    await updateProject(modifiedProject);
                })
            }
        };
        var options = new DialogOptions { };
        DialogService.Show<ProjectNameAndDescriptionDialog>("Project Description", parameters, options);
        LoadingService.HideLoading();

    }

    private async Task updateProject(Project modifiedProject)
    {
        LoadingService.ShowLoading();

        if (modifiedProject is Project project)
        {
            await UpdateProjectAsync(project);
        }
        LoadingService.HideLoading();

    }

    private void OpenViewClientEditingGuidelinesComponent(Project context)
    {
        LoadingService.ShowLoading();

        var parameters = new DialogParameters
        {
            { "userId", context.ClientId },
        };
        var options = new DialogOptions { FullScreen = false };
        DialogService.Show<ViewClientEditingGuidelinesComponent>("Client Preferences", parameters, options);
        LoadingService.HideLoading();

    }

    // Opens private note for modification
    private async Task OpensPrivateNoteForProject(Project context)
    {
        LoadingService.ShowLoading();

        var parameters = new DialogParameters
        {
            { "project", context },
        };
        var options = new DialogOptions { FullScreen = false };
        var dialog = await DialogService.ShowAsync<PrivateNoteForProjectComponent>("", parameters, options);
        var result = await dialog.Result;
        if(!result!.Canceled)
        {
            var project = (Project) result.Data!;
            await UpdateProjectAsync(project!);
            Snackbar.Add($"Successfully updated the project notes", Severity.Info);
            await LoadProjects();
        }
        LoadingService.HideLoading();

    }

    private async Task UpdateProjectAsync(Project project)
    {
        LoadingService.ShowLoading();
        await projectServices.UpdateProjectAsync(project,_currentUserId);
        LoadingService.HideLoading();

    }

    // Calculates Total Client Billable hours based on a formula.
    private async Task TimeCalculator( Project project)
    {
        LoadingService.ShowLoading();
        if (_isClientView)
            return;

        var dialogParameters = new DialogParameters<ProjectTotalHoursCalculatorDialog> {
            { nameof(ProjectTotalHoursCalculatorDialog.newProject), project },
            { "_isAdminView", _isAdminView},
            { "_isEditorView", _isEditorView}
        };
        var dialog = await DialogService.ShowAsync<ProjectTotalHoursCalculatorDialog>("Time Calculator", dialogParameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var _project = result.Data! as Project;
            if (_project != null)
            {
                await projectServices.UpdateProjectBillableHoursAsync(_project);
                await projectServices.CalculateProjectFinalPrice(_project);

                Snackbar.Add($"Successfully updated deliverable details of the project: {_project.ProjectName}", Severity.Success);
                await LoadProjects();
            }
        }
        LoadingService.HideLoading();

    }

    private async Task Logging(Project project,string currentUserId)
    {
        LoadingService.ShowLoading();

        var dialogParameters = new DialogParameters<LoggingDialog> {
            { nameof(LoggingDialog.currentProject), project },
            { "CurrentUserId", currentUserId},
            { "isAdmin", isAdminView}
        };

        var dialog = await DialogService.ShowAsync<LoggingDialog>("Logging Hours", dialogParameters);
        var result = await dialog.Result;
        await LoadProjects();
        LoadingService.HideLoading();


    }

    // Checks if there is changes between two projects in any property excluding the excluded.
    private bool HasNoSignificantChanges(Project original, Project modified, params string[] excludeProperties)
    {
        if (original == null || modified == null)
            return original == modified;  // Both null = true, one null = false

        var excluded = new HashSet<string>(excludeProperties, StringComparer.OrdinalIgnoreCase);  // Added case-insensitive comparison
        var properties = typeof(Project).GetProperties();

        foreach (var prop in properties)
        {
            if (excluded.Contains(prop.Name))
                continue;

            var originalValue = prop.GetValue(original);
            var modifiedValue = prop.GetValue(modified);

            if (!Equals(originalValue, modifiedValue))
                return false;
        }
        return true;
    }

    Project beforeModification = new Project();
    void StartedEditingItem(Project project)
    {
        beforeModification = JsonSerializer.Deserialize<Project>(
            JsonSerializer.Serialize(project))!;
    }
    void CanceledEditingItem(Project project)
    {

    }
    private async Task CommittedItemChanges(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            if (_isClientView)
            {
                if (HasNoSignificantChanges(beforeModification, project, "ExternalOrder", "Status", "ShootDate") == false)
                {
                    if(project.Status != ProjectStatus.Upcoming && (
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Resolution) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Size) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.CameraNumber) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.ColorProfile) ))
                    {
                        throw new Exception("Please Open Project Brief and fill-out all the information before changing status.");
                    }
                    await UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }
            else if(_isAdminView)
            {
                await UpdateProjectAsync(project);
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add($"Successfully updated the project", Severity.Info);
                await LoadProjects();
            }
            else
            {
                if (HasNoSignificantChanges(beforeModification, project, "Status", "ShootDate", "DueDate", "ProgressBar", "WorkingMonth") == false)
                {
                    await UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }

        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message ,Severity.Warning);
            await LoadProjects();
        }
        finally
        {
            StateHasChanged();
            LoadingService.HideLoading();

        }
    }

    private string GetStatusStyle(ProjectStatus projectStatus)
    {
        return projectStatus switch
        {
            ProjectStatus.Upcoming => "background-color: #3f2e91; color: white; border-radius: 8px; --parent-bg-color:#7153ff; text-align:center;",
            ProjectStatus.Scheduled => "background-color: #320672; color: white; border-radius: 8px; --parent-bg-color: #7153ff; text-align:center;",
            ProjectStatus.Ready_To_Edit => "background-color: #0e8787; color: white; border-radius: 8px; --parent-bg-color: #00b2b2; text-align:center;",
            ProjectStatus.Working => "background-color: #b46f00; color: white; border-radius: 8px; --parent-bg-color: #fd9b00; text-align:center;",
            ProjectStatus.Delivered => "background-color: #002159 !important; color: white; border-radius: 8px; --parent-bg-color: #2e77ff; text-align:center;",
            ProjectStatus.Ready_To_Review => "background-color: #6527a2; color: white; border-radius: 8px; --parent-bg-color: #b23eeb; text-align:center;",
            ProjectStatus.Revision => "background-color: #ae0502; color: white; border-radius: 8px; --parent-bg-color: #fd1c18; text-align:center;",
            ProjectStatus.Finished => "background-color: #003915; color: white; border-radius: 8px; --parent-bg-color: #008b33; text-align:center;",
            _ => "background-color: #757575; color: white; border-radius: 8px; --parent-bg-color: #616161; text-align:center;"
        };

    }
    private string GetAdminStatusStyle(AdminProjectStatus projectStatus)
    {
        return projectStatus switch
        {
            AdminProjectStatus.Not_Finished => "background-color: #3f2e91; color: white; border-radius: 8px; --parent-bg-color:#7153ff; text-align:center;",
            AdminProjectStatus.Sent_Invoice => "background-color: #b46f00; color: white; border-radius: 8px; --parent-bg-color: #fd9b00; text-align:center;",
            AdminProjectStatus.Delivered_Not_Paid => "background-color: #ae0502; color: white; border-radius: 8px; --parent-bg-color: #fd1c18; text-align:center;",
            AdminProjectStatus.Paid => "background-color: #003915; color: white; border-radius: 8px; --parent-bg-color: #008b33; text-align:center;",
        };

    }
    // Downloading Filtered as CSV
    private async Task DownloadFilteredAsCsv()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the filtered projects in CSV file?"))
            {
                var filteredItems = _dataGrid.FilteredItems.ToList();
                var groupedByClient = filteredItems.GroupBy(p => p.ClientName);

                foreach (var clientGroup in groupedByClient)
                {
                    var clientName = clientGroup.Key;
                    var projects = clientGroup.ToList();
                    var csvContent = GenerateCsvContentFiltered(projects);
                    var filename = $"{clientName.Replace(" ", "-")}_{DateTime.Now:MM_dd_yyyy}.csv";
                    await DownloadFile(filename, csvContent);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private async Task DownloadAllProjects()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the All Projects as CSV file?"))
            {
                if (projects.Any())
                {
                    var nonNullProjects = projects.Where(p => p != null).Cast<Project>().ToList(); // Remove null warning
                    var csvContent = ConvertProjectsToCsv(nonNullProjects);
                    var filename = $"All_Projects_{DateTime.Now:MM_dd_yyyy_HH_mm_ss}.csv";
                    await DownloadFile(filename, csvContent);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private string FormatStringToCsv(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        // If the string contains commas, newline characters, or double quotes, wrap it in double quotes
        if (value.Contains(",") || value.Contains("\n") || value.Contains("\r") || value.Contains("\""))
        {
            // Escape double quotes by replacing them with two double quotes
            value = "\"" + value.Replace("\"", "\"\"") + "\"";
        }

        return value;
    }

    public string ConvertProjectsToCsv(List<Project> projects)
    {
        var sb = new System.Text.StringBuilder();

        // Add CSV headers with the additional fields for editor details
        sb.AppendLine("ID,Project Name,Project Description,Client Name,Primary Editor Name,Secondary Editor Name,Progress,Shoot Date,Due Date,Status, Payment Status,Client Billable Hours,Client Billable Amount,Primary Editor Billable Hours,Primary Editor Overtime,Primary Editor Payment Amount,Secondary Editor Billable Hours,Secondary Editor Overtime,Secondary Editor Payment Amount, Revisions");

        // Add each project as a CSV line
        foreach (var project in projects)
        {
            // Populate the names for the client and editors
            var clientName = project.Client?.UserName ?? "N/A";
            var primaryEditorName = project.PrimaryEditor?.UserName ?? "N/A";
            var secondaryEditorName = project.SecondaryEditor?.UserName ?? "N/A";
            // Remove HTML tags from the Description
            var descriptionWithoutHtml = project.Description != null ? System.Text.RegularExpressions.Regex.Replace(project.Description, "<.*?>", String.Empty) : String.Empty; // Removes HTML tags
            descriptionWithoutHtml = FormatStringToCsv(descriptionWithoutHtml);

            // Retrieve the Billable Hours and Payment Amounts for Client and Editors
            var clientBillableHours = project.ClientBillableHours?.ToString("0.##") ?? "0";
            var clientBillableAmount = project.ClientBillableAmount?.ToString("0.##") ?? "0";

            var primaryEditorBillableHours = project.PrimaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var primaryEditorOvertime = project.PrimaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var primaryEditorPaymentAmount = project.PrimaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";

            var secondaryEditorBillableHours = project.SecondaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var secondaryEditorOvertime = project.SecondaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var secondaryEditorPaymentAmount = project.SecondaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";
            var revisions = project.Revisions != null && project.Revisions.Any()
            ? project.Revisions.Select(r =>
                $"{r.RevisionDate.ToString("MM-dd-yyyy")}: {r.Content.Replace("\n", " ").Replace("\r", "")}")
                .Aggregate((current, next) => current + " || " + next)
               : string.Empty;
            revisions = FormatStringToCsv(revisions);
            // Append the project data to the CSV
            sb.AppendLine($"{project.ProjectId},{project.ProjectName},{descriptionWithoutHtml},{clientName},{primaryEditorName},{secondaryEditorName},{project.ProgressBar},{project.FormattedShootDate},{project.FormattedDueDate},{project.FormatStatus},{project.FormatAdminStatus},{clientBillableHours},{clientBillableAmount},{primaryEditorBillableHours},{primaryEditorOvertime},{primaryEditorPaymentAmount},{secondaryEditorBillableHours},{secondaryEditorOvertime},{secondaryEditorPaymentAmount},{revisions}");
        }

        return sb.ToString();
    }


    private async Task DownloadFile(string filename, string content)
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                Convert.ToBase64String(bytes)
            );
            Snackbar.Add($"File has started downloading!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"File save error: {ex.Message}", Severity.Error);
        }
    }
    private string GenerateCsvContentFiltered(List<Project> projects)
    {
        // Create CSV header
        decimal total = 0;
        var csv = new System.Text.StringBuilder();
        csv.AppendLine(string.Join(",",
            nameof(Project.ProjectName),
            "Price"
            ));


        // Add data rows
        foreach (var project in projects)
        {
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(project.ProjectName),$"{project.ClientBillableAmount ?? 0} $"));
            if(project.ClientBillableAmount != null )
                total += project.ClientBillableAmount.Value;
        }
        csv.AppendLine();
        csv.AppendLine(string.Join(",",
            $"Total Price: {Math.Round(total, 0, MidpointRounding.AwayFromZero)} $",
        $" Date: {DateTime.Now:MM-dd-yyyy}"));
        return csv.ToString();
    }

    private string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        // Escape commas and quotes
        value = value.Replace("\"", "\"\"");
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = $"\"{value}\"";
        }
        return value;
    }

    // DRAGGING FUNCTIONALITIES 
    private List<Project> _Projects { get; set; } = new();
    private Project? draggedProject;
    private Project? dropTarget;
    private bool isDragging;



    private string GetRowClass(Project project, int rowNumber)
    {
        var classes = new List<string> { };

        if (isDragging && dropTarget?.ProjectId == project.ProjectId)
            classes.Add("drop-target");

        if (draggedProject?.ProjectId == project.ProjectId)
            classes.Add("being-dragged");

        return string.Join(" ", classes);
    }

    private void HandleDragStart(Project project)
    {
        if (project == null) return;
        draggedProject = project;
        isDragging = true;
        StateHasChanged();
    }

    private void HandleDragOver(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (draggedProject?.ProjectId == target.ProjectId)
            return;
    }

    private void HandleDragEnter(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (draggedProject?.ProjectId != target.ProjectId)
        {
            dropTarget = target;
            StateHasChanged();
        }
    }

    private void HandleDragLeave(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (target != null && dropTarget?.ProjectId == target.ProjectId)
        {
            dropTarget = null;
            StateHasChanged();
        }
    }

    private async Task HandleDropForInternalOrder(Project targetProject)
    {
        try
        {
            LoadingService.ShowLoading();

            if (draggedProject == null || targetProject == null)
                return;

            if (draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.InternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,false);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;
            LoadingService.HideLoading();
            ResetDragState();
            await RefreshGridData();
        }
    }
    private async Task HandleDropForExternalOrder(Project targetProject)
    {
        try
        {
            LoadingService.ShowLoading();

            if (draggedProject == null || targetProject == null)
                return;

            if (draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.ExternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,true);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;
            LoadingService.HideLoading();
            ResetDragState();
            await RefreshGridData();
        }
    }
    private void ResetDragState()
    {
        isDragging = false;
        draggedProject = null;
        dropTarget = null;
    }
    private async Task RefreshGridData()
    {
        projects = ( await projectServices.GetProjectsAsync() ).ToList();
        await LoadProjects();
        StateHasChanged();
    }

    private async Task ToggleUrgentVisibility(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newValue = !project.IsUrgent;
            project.IsUrgent = newValue;
            await UpdateProjectAsync(project);
            if (newValue == true)
            { Snackbar.Add($"Warning is visible now.", Severity.Success); }
            else
            {
                Snackbar.Add($"Warning is hidden now.", Severity.Info);
            }
            LoadingService.HideLoading();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to add warning!", Severity.Error);
            Console.WriteLine($"Error updating warning urgent visibility: {ex.Message}");
        }
    }
    private async Task TogglePaymentVisibility(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newValue = !project.IsPaymentVisible;
            project.IsPaymentVisible = newValue;
            await UpdateProjectAsync(project);
            if (newValue == true)
            { Snackbar.Add($"Payment is visible to the client now.", Severity.Success); }
            else
            {
                Snackbar.Add($"Payment is hidden from the client now.", Severity.Info);
            }
            LoadingService.HideLoading();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update payment visibility", Severity.Error);
            Console.WriteLine($"Error updating payment visibility: {ex.Message}");
        }
    }
    private async Task OpenClientNameDialog(Project project)
    {
        try{
            if (_isClientView) return;

            var parameters = new DialogParameters
            {
                { "_project", project },
                { "Clients", Clients }
            };

            var dialog = await DialogService.ShowAsync<ClientNameDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                var _project = (Project) result.Data;
                await UpdateProjectAsync(_project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update progress", Severity.Error);
            Console.WriteLine($"Error updating progress: {ex.Message}");
        }
    }
    private async Task OpenLinkDialog(Project project)
    {
        try{
            if (_isClientView)
            {
                return;
            }

            var parameters = new DialogParameters
            {
                { "project", project },
            };

            var dialog = await DialogService.ShowAsync<ProjectLink>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                var _project = (Project) result.Data;
                await UpdateProjectAsync(_project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update progress", Severity.Error);
            Console.WriteLine($"Error updating progress: {ex.Message}");
        }
    }
    private async Task OpenProgressDialog(Project project)
    {
        try{
            if (_isClientView) return;

            var parameters = new DialogParameters
            {
                { "Progress", project.ProgressBar }
            };

            var dialog = await DialogService.ShowAsync<ProgressEditDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.ProgressBar = (int)result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update progress", Severity.Error);
            Console.WriteLine($"Error updating progress: {ex.Message}");
        }
    }
    private async Task OpenShootDateDialog(Project project)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "ShootDate", project.ShootDate }
            };

            var dialog = await DialogService.ShowAsync<ShootDateEditDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.ShootDate = (DateTime) result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update shoot date", Severity.Error);
            Console.WriteLine($"Error updating shoot date: {ex.Message}");
        }
    }

    private async Task OpenDueDateDialog(Project project)
    {
        try
        {
            if (!_isAdminView)
                return;

            var parameters = new DialogParameters
            {
                { "DueDate", project.DueDate },
                { "IsUrgent", project.IsUrgent }
            };

            var dialog = await DialogService.ShowAsync<DueDateDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                (project.DueDate, project.IsUrgent) = ((DateTime, bool)) result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update due date", Severity.Error);
            Console.WriteLine($"Error updating due date: {ex.Message}");
        }
    }
    private async Task OpenWorkingMonthDialog(Project project)
    {
        try
        {
            if (!_isAdminView)
                return;

            var parameters = new DialogParameters
            {
                { "WorkingMonth", project.WorkingMonth }
            };

            var dialog = await DialogService.ShowAsync<WorkingMonthDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.WorkingMonth = (DateTime) result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update working month", Severity.Error);
            Console.WriteLine($"Error updating working month: {ex.Message}");
        }
    }
  private async Task OpenStatusDialog(Project project)
  {
      try
      {
          var parameters = new DialogParameters
          {
              { "Status", project.Status },
              { "_isAdminView",_isAdminView },
              { "_isEditorView", _isEditorView },
              { "_isClientView", _isClientView }

          };

          var dialog = await DialogService.ShowAsync<StatusDialog>("", parameters);
          var result = await dialog.Result;

          if (!result.Canceled)
          {
              project.Status = (ProjectStatus) result.Data;
              await UpdateProjectAsync(project);
          Snackbar.Add("Saved Successfully", Severity.Success);

          }


      }
      catch (Exception ex)
      {
          Snackbar.Add("Failed to update status", Severity.Error);
          Console.WriteLine($"Error updating status: {ex.Message}");
      }
  }
   private async Task OpenAdminStatusDialog(Project project)
   {
       try
       {
           var parameters = new DialogParameters
           {
               { "AdminStatus", project.AdminStatus }
           };

           var dialog = await DialogService.ShowAsync<AdminStatusDialog>("", parameters);
           var result = await dialog.Result;

           if (!result.Canceled)
           {
               project.AdminStatus = (AdminProjectStatus) result.Data;
               await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);
           }
       }
       catch (Exception ex)
       {
           Snackbar.Add("Failed to update payment status", Severity.Error);
           Console.WriteLine($"Error updating payment status: {ex.Message}");
       }
   }
    private async Task OpenPrimaryEditorDialog(Project project)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "PrimaryEditorId", project.PrimaryEditorId },
                { "Editors", Editors }

            };

            var dialog = await DialogService.ShowAsync<PrimaryEditorDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.PrimaryEditorId = (string)result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update primary editor", Severity.Error);
            Console.WriteLine($"Error updating primary editor: {ex.Message}");
        }
    }
    private async Task OpenSecondaryEditorDialog(Project project)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "SecondaryEditorId", project.SecondaryEditorId },
                { "Editors", Editors }

            };

            var dialog = await DialogService.ShowAsync<SecondaryEditorDialog>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.SecondaryEditorId = (string)result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update secondary editor", Severity.Error);
            Console.WriteLine($"Error updating secondary editor: {ex.Message}");
        }
    }
    private async Task OpenSecondaryEditorPaymentDate(Project project)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "_SecondaryEditorPaymentDate", project.SecondaryEditorDetails.DatePaidEditor }

            };

            var dialog = await DialogService.ShowAsync<SecondaryEditorPaymentDate>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.SecondaryEditorDetails.DatePaidEditor = (DateTime?) result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update secondary editor payment date", Severity.Error);
            Console.WriteLine($"Error updating secondary editor payment date: {ex.Message}");
        }
    }
    private async Task OpenPrimaryEditorPaymentDate(Project project)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "_PrimaryEditorPaymentDate", project.PrimaryEditorDetails.DatePaidEditor }
            };

            var dialog = await DialogService.ShowAsync<PrimaryEditorPaymentDate>("", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                project.PrimaryEditorDetails.DatePaidEditor = (DateTime?) result.Data;
                await UpdateProjectAsync(project);
                Snackbar.Add("Saved Successfully", Severity.Success);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update Primary editor payment date", Severity.Error);
            Console.WriteLine($"Error updating Primary editor payment date: {ex.Message}");
        }
    }


}


<style>
.cursor-move {
    cursor: grab;
}
    
.being-dragged {
    opacity: 0.6;
    cursor: grabbing;
    background-color: var(--mud-palette-success);
}
    
.drop-target {
    border-top: 2px solid var(--mud-palette-primary);

}
    
.drag-handle {
    display: flex;
    align-items: center;
    cursor: grab;
}
    
.drag-handle:hover {
    background-color: var(--mud-palette-background-grey);
    border-radius: 4px;
}
.drag-handle.grabbing {
    cursor: grabbing;
}

</style>
