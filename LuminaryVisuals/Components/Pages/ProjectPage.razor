@page "/project"
@using Microsoft.Extensions.Options

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserServices UserServices
@inject ProjectService projectServices
@inject CircuitUpdateBroadcaster Broadcaster
@inject ProjectState ProjectState
@implements IDisposable
@inject IEmailService EmailService
@inject INotificationService _notificationService
@inject IScrollManager ScrollManager
@attribute [Authorize(Policy = "RequireAdminClientEditor")]
<PageTitle>Projects</PageTitle>
@* <MudButton OnClick="HideColumns" Color="Color.Warning" >Hide damn columns</MudButton>
<MudButton OnClick="ShowColumns" Color="Color.Info" >Show columns</MudButton>

@code{

    private Column<Project> InternalOrder;

    private Column<Project> Description;

    private Column<Project> UserName;
    private void HideColumns()
    {
        InternalOrder.Hidden = true;
        Description.Hidden = true;
        UserName.Hidden = true;

        // Force refresh the grid
        StateHasChanged();

    }
    private void ShowColumns()
    {
        InternalOrder.Hidden = false;
        Description.Hidden = false;
        UserName.Hidden = false;

        // Force refresh the grid
        StateHasChanged();

    }
} *@
@if (_loading)
{
    <SplashScreen />
}
else
{
    <LoadingIndicator IsVisible="@_loadingIndicator" />
    <MudDataGrid @ref=_dataGrid T="Project" Items="@projects" SortMode="SortMode.Single" @key=_gridKey  
    Style="transform: scale(0.7); transform-origin: top left; width: 143%;" CurrentPage=0 RowsPerPageChanged=LoadProjects
    Dense=true Hover="true" Bordered=true Breakpoint="Breakpoint.None"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
    ColumnsPanelReordering=true
    ShowColumnOptions=false 
    Groupable=true QuickFilter="@_quickFilter"
    ShowMenuIcon=false
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.OnRowClick" RowClick="@OnRowClick"
    ReadOnly=false RowStyle="text-align:center;"
    StartedEditingItem="@StartedEditingItem" 
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges" 
    FixedHeader="true" Height="730px" Virtualize=true
    RowClassFunc="@GetRowClass">


        <ToolBarContent>

            <MudText Typo="Typo.h4" Class="mr-2">Your Projects</MudText>
            <MudMenu Icon="@Icons.Material.Filled.Settings"  Label="Actions" Variant="Variant.Filled" AriaLabel="Projects Options"  Class="pa-1"
            LockScroll=true DropShadow=true 
            AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft">
                <MudMenuItem OnClick="@(() => _gridKey = Guid.NewGuid())">
                    Reset State
                </MudMenuItem>
                <MudMenuItem OnClick="@(() => _dataGrid.ShowColumnsPanel())">
                    Show Columns Panel
                </MudMenuItem>
                <MudMenuItem OnClick="OnClick">
                    Scroll to Bottom
                </MudMenuItem>
                                @if (isAdminView)
                {
                <MudMenuItem OnClick="DownloadFilteredAsCsv">
                    <MudIcon Icon="@Icons.Material.TwoTone.Download" Class="mr-2" />
                    Download Filtered Projects
                </MudMenuItem>
                <MudMenuItem OnClick="DownloadAllProjects">
                    <MudIcon Icon="@Icons.Material.TwoTone.Download" Class="mr-2" />
                    Backup Projects
                </MudMenuItem>

                <MudStack Spacing="0" Class=" mt-5">
                <MudSwitch T="bool" Class="ml-5 mb-1" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
                <MudText Class="ml-5">View as</MudText>
                <MudStack Row=true Style="background:#151726;" Class="ml-5">
                    <MudSwitch T="bool" Class="" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin</MudSwitch>
                    <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor</MudSwitch>
                    <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client</MudSwitch>
                </MudStack>
            </MudStack>
                }

            </MudMenu>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search..." Adornment="Adornment.Start"
            Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
            Class="mt-0" />
        </ToolBarContent>
        <ColGroup>
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
            </MudHidden>
        </ColGroup>
        <Columns >

            @if (RoleBasedColumns[_currentRole].Contains("InternalId"))
            {
                <PropertyColumn Property="x => x.InternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center; "
                DragAndDropEnabled="false" Groupable="false" Editable=true >
                    <CellTemplate>
                        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                            <div style="height:100px;"
                            class="drag-handle @(draggedProject?.ProjectId == context.Item.ProjectId ? "being-dragged" : "") flex-row  justify-center align-center  "
                            draggable="true"
                            @ondragstart="@(() => HandleDragStart(context.Item))"
                            @ondragover:preventDefault
                            @ondragover="@(() => HandleDragOver(context.Item))"
                            @ondrop:preventDefault
                            @ondrop="@(() => HandleDropForInternalOrder(context.Item))"
                            @ondragenter="@(() => HandleDragEnter(context.Item))"
                            @ondragleave="@(() => HandleDragLeave(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                @context.Item.InternalOrder
                            </div>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                            <MudText>@context.Item.InternalOrder</MudText>
                        </MudHidden>
                    </CellTemplate>
                    <EditTemplate>
                        @if(!_isAdminView){
                            <MudText Style="display:none;" />
                        }
                        else
                        { 
                            <MudNumericField @bind-Value="context.Item.InternalOrder" Label="Id" Variant="Variant.Outlined" Min="1" Max="projects.Count()"/>
                        }
                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ExternalId"))
            {
                <PropertyColumn Property="x => x.ExternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center;"
                DragAndDropEnabled="false" Groupable="false" Editable=true >
                    <CellTemplate>
                        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                            <div class="drag-handle flex-row  justify-center align-center " style="height:100px;" draggable="true"
                            @ondragstart="@(() => HandleDragStart(context.Item))"
                            @ondragover:preventDefault
                            @ondragover="@(() => HandleDragOver(context.Item))"
                            @ondrop:preventDefault
                            @ondrop="@(() => HandleDropForExternalOrder(context.Item))"
                            @ondragenter="@(() => HandleDragEnter(context.Item))"
                            @ondragleave="@(() => HandleDragLeave(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Menu" Class="mr-2" />
                                @context.Item.ExternalOrder
                            </div>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert=true>
                            <MudText>@context.Item.ExternalOrder</MudText>
                        </MudHidden>
                    </CellTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
            {
                <PropertyColumn Property="x => x.ProjectName" Title="Project Brief"
                Hideable="false" CellStyle="text-align:center;" CellClass="outlined-dialog-max-content"
                Groupable="false" Editable=false Required=false>
                    <CellTemplate>
                        @if (context.Item.Status != ProjectStatus.Upcoming && (string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Resolution) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.Size) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.CameraNumber) ||
                      string.IsNullOrEmpty(context.Item.ProjectSpecifications?.ColorProfile)))
                        {
                            <div class="d-flex gap-2 flex-row  justify-center align-center">
                                <MudTooltip Text="Missing Information for the project, please fill it as soon as possible." Color="Color.Error" Placement="Placement.Bottom" Arrow="true">
                                    <MudIcon Class="d-flex" Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                                </MudTooltip>
                                <MudTextField T="string"
                                Value="context.Item.ProjectName" Class="outlined-dialog-max-content "
                                ReadOnly="true" Variant="Variant.Outlined"
                                Immediate="true" Adornment="Adornment.End"
                                AdornmentIcon="@Icons.Material.Filled.OpenInNew"
                                OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                </MudTextField>

                                <MudFab Class="d-flex floating-chat-icon " @onclick="async () => await  OpenProjectChat(context.Item)" StartIcon="@Icons.Material.Filled.Email" Size="Size.Small"/>

                            </div>
                        }
                        else
                        {      
                            <div class="d-flex gap-2 flex-row  justify-center align-center">
                                <MudTextField T="string"
                                Value="context.Item.ProjectName" Class="outlined-dialog-max-content"
                                ReadOnly="true"
                                Immediate="true" Adornment="Adornment.End" Variant="Variant.Outlined"
                                AdornmentIcon="@Icons.Material.Filled.OpenInNew" 
                                OnAdornmentClick="@(() => OpenDescriptionDialog(context.Item))">
                                </MudTextField>
                                <MudFab Class="d-flex floating-chat-icon " @onclick="async () => await OpenProjectChat(context.Item)" StartIcon="@Icons.Material.Filled.Email" Size="Size.Small" />

                            </div>

                        }

                    </CellTemplate>
                    <EditTemplate>
                        <MudText Style="display:none;" />
                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ClientName") || isAdminView == true)
            {
                <PropertyColumn Property="x => x.Client.UserName" Title="Client Name" Grouping="_groupByClientName"
                Hideable="true" Groupable="true" CellStyle="text-align:center;" CellClass="outlined-dialog-max-content"
                Editable=false Required=false >
                    <CellTemplate>
                        <MudTextField T="string"
                        Value="context.Item.Client.UserName"  Class="outlined-dialog-max-content"
                        ReadOnly="true" 
                        Immediate="true" Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Outlined"
                        MaxLines="4"
                        OnAdornmentClick="@(() => OpenViewClientEditingGuidelinesComponent(context.Item))">
                        </MudTextField>
                    </CellTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                    </GroupTemplate>
                    <EditTemplate>

                        @if (Clients != null && Clients.Any() && _isAdminView)
                        {
                            <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                            Class="d-flex justify-center mud-width-full py-2 outlined-dialog-max-content"
                            Variant="Variant.Outlined"
                            Label="Client Name"
                            @bind-Value="context.Item.ClientId">
                                @foreach (var client in Clients)
                                {
                                    <MudSelectItem Class="" T="string" Value="@client.UserId" Ripple=true>
                                        @client.UserName
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudText Style="display:none;" />
                        }
                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
            {
                <PropertyColumn Property="x => x.PrimaryEditorName" Title="Primary Editor" Hideable="true" 
                Groupable="true" Editable=false Required=false  CellStyle="text-align:center;" >
                    <GroupTemplate> 
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                    </GroupTemplate>   
                    <EditTemplate>
                        @if (Editors != null && Editors.Any() && _isAdminView){
                            <MudSelect T="string"
                            AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                            Class="d-flex justify-center mud-width-full py-2"
                            Variant="Variant.Outlined"
                            Label="Primary Editor"
                            @bind-Value="context.Item.PrimaryEditorId">
                                @foreach (var editor in Editors)
                                {
                                    <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                        @editor.UserName
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudText Style="display:none;" />
                        }
                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
            {
                <PropertyColumn Property="x => x.SecondaryEditorName" Title="2nd Editor" Hideable="true" 
                Groupable="true" Editable=false Required=false CellStyle="text-align:center;">
                    <EditTemplate>
                        @if (Editors != null && Editors.Any() && _isAdminView)
                        {
                            <MudSelect T="string"
                            AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                            Class="d-flex justify-center mud-width-full py-2"
                            Variant="Variant.Outlined"
                            Label="Secondary Editor"
                            @bind-Value="context.Item.SecondaryEditorId">
                                @foreach (var editor in Editors)
                                {
                                    <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                        @editor.UserName
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudText Style="display:none;" />
                        }

                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
            {
                <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle=""> 
                    <CellTemplate>
                        <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                    </CellTemplate>

                    <EditTemplate Context="context">
                        @if (!_isClientView)
                        {
                            <MudSelect T="ProgressBarValue" Label="Progress" Class="mt-3" 
                            AnchorOrigin="Origin.BottomCenter"
                            Value="@((ProgressBarValue)context.Item.ProgressBar)"
                            Variant="Variant.Outlined"
                            ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                                <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                            </MudSelect>            
                        }
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Progress" />
                    </GroupTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
            {
                <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" HeaderStyle="width:115px;"
                Groupable="true" Editable=false CellStyle="text-align:center;">
                    <CellTemplate>
                        <MudTextField T="string" Value="@context.Item.FormattedShootDate" Class="outlined-dialog-md-content"
                        ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"/>
                    </CellTemplate>
                    <EditTemplate Context="context">
                        @* If changed from here I will later need of a way to change due date*@
                        @if(_isAdminView || _isClientView){
                            <MudDatePicker Label="Shoot Date" Variant="Variant.Outlined" Date="@context.Item.ShootDate"
                            DateChanged="@(date => context.Item.ShootDate = date)" Class="mt-3" Required="false" />
                        }
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Shoot Date" />
                    </GroupTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
            {

                if(_isAdminView)
                {
                    <TemplateColumn T="Project" Title="Add Warning" Sortable="false" Filterable="false" Groupable=false Hideable="true">
                        <CellTemplate>
                            <MudItem Class="d-flex justify-center">
                                <MudIconButton Icon="@(context.Item.IsUrgent ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                Color="@(context.Item.IsUrgent ? Color.Warning : Color.Tertiary)"
                                OnClick="@(async () => await ToggleUrgentVisibility(context.Item))"
                                Size="Size.Small" />
                            </MudItem>
                        </CellTemplate>
                    </TemplateColumn>
                }
                <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" CellStyle="text-align:center; Required=false"
                CellClass="outlined-dialog-md-content" Groupable="true" Editable=false >
                    <CellTemplate>
                        @if (context.Item.IsUrgent == true)
                        {
                            <div class="d-flex gap-2 flex-row  justify-center align-center">
                                @if(isAdminView)
                                {
                                    <MudTextField T="string" 
                                    Value="context.Item.FormattedDueDate" Class="outlined-dialog-md-content"
                                    ReadOnly="true" Variant="Variant.Outlined"
                                    Immediate="true" Adornment="Adornment.End"

                                    >
                                    </MudTextField>
                                }
                                else{
                                    <MudTextField T="string" Class="outlined-dialog-md-content"
                                    Value="context.Item.FormattedDueDate"
                                    ReadOnly="true" Variant="Variant.Outlined">
                                    </MudTextField>
                                }
                                <MudTooltip Text="This is urgent." Color="Color.Error" Placement="Placement.Bottom" Arrow="true">
                                    <MudIcon Class="d-flex" Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                                </MudTooltip>

                            </div>
                        }
                        else
                        {
                            @if (isAdminView)
                            {
                                <MudTextField T="string" Class="outlined-dialog-md-content"
                                Value="context.Item.FormattedDueDate"
                                ReadOnly="true" Variant="Variant.Outlined"
                                Immediate="true" Adornment="Adornment.End"
                                >
                                </MudTextField>
                            }
                            else
                            {
                                <MudTextField T="string" Class="outlined-dialog-md-content"
                                Value="context.Item.FormattedDueDate"
                                ReadOnly="true" Variant="Variant.Outlined">
                                </MudTextField>
                            }
                        }

                    </CellTemplate>
                    <EditTemplate>
                        @if(@_isAdminView){
                            <MudDatePicker Label="Due Date"
                            Variant="Variant.Outlined"
                            Class="mt-3"
                            Date="@context.Item.DueDate"
                            DateChanged="@(date => context.Item.DueDate = date)"
                            Required="false" />
                        }
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Due Date" />
                    </GroupTemplate>
                </PropertyColumn>

            }
            @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
            {
                <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true" Required=false CellClass="outlined-dialog-md-content"
                CellStyle="text-align:center;" Groupable="true" Editable=false>
                    <CellTemplate>
                        <MudTextField T="string" Value="@context.Item.FormattedWorkingMonth" Class="outlined-dialog-md-content"
                        ReadOnly="true" Variant="Variant.Outlined" Immediate="true" Adornment="Adornment.End"/>
                    </CellTemplate>
                    <EditTemplate Context="context">
                        @if(@_isAdminView){
                            <MudDatePicker Required="false" Label="Working Month" Variant="Variant.Outlined" Class="mt-3" FixDay="1"
                            DateFormat="MM/yyyy" Date="@context.Item.WorkingMonth" DateChanged="@(date => context.Item.WorkingMonth = date)" />
                        }
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Working Month" />
                    </GroupTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("Status"))
            {           
                <PropertyColumn Property="x => x.FormatStatus" Title="Status" Hideable="true" Groupable="true">
                    <CellTemplate>
                        <MudText Class="px-3 py-1 rounded-lg font-weight-bold text-center status-badge " Style="@GetStatusStyle(context.Item)">@context.Item.FormatStatus</MudText>
                    </CellTemplate>
                    <EditTemplate Context="context">
                        <MudSelect T="ProjectStatus" Class="mt-3"
                        Variant="Variant.Outlined"
                        Label="Status"
                        @bind-Value="context.Item.Status"
                        Required="true">
                            @if(_isAdminView)
                            {
                                @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                {
                                    <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                                }
                            }
                            else if(_isEditorView)
                            {
                                <MudSelectItem Value="ProjectStatus.Scheduled">Scheduled</MudSelectItem>
                                <MudSelectItem Value="ProjectStatus.Working">Working</MudSelectItem>
                                <MudSelectItem Value="ProjectStatus.Delivered">Delivered</MudSelectItem>

                            }
                            else{
                                <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Status" />
                    </GroupTemplate>
                </PropertyColumn>

            }
            @if (RoleBasedColumns[_currentRole].Contains("AdminStatus"))
            {
                <PropertyColumn Property="x => x.FormatAdminStatus" Title="Client Payment Status" Hideable="true" Groupable="true" Required=false CellStyle="text-align:center;">

                    <EditTemplate Context="context">
                        <MudSelect T="AdminProjectStatus" Class="mt-3"
                        Variant="Variant.Outlined"
                        Label="Client Payment Status"
                        @bind-Value="context.Item.AdminStatus"
                        Required="true">
                            @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                            {
                                <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                    <GroupTemplate>
                        <GroupTemplateComponent TItem="Project" Context="@context" Label="Payment Status" />
                    </GroupTemplate>
                </PropertyColumn>

            }
            @if (RoleBasedColumns[_currentRole].Contains("PrivateNotes"))
            {
                <PropertyColumn Property="x => x.NotesForProject" CellClass="outlined-dialog-md-content" Title="Private Notes" Hideable="true" Groupable="false" CellStyle="text-align:center;"
                Editable=false Required=false>
                    <CellTemplate>
                        <MudTextField T="string"
                        Class="outlined-dialog-max-content"
                        Text="Notes" Variant="Variant.Outlined"
                        ReadOnly="true" Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Material.Filled.OpenInNew"
                        MaxLines="1"
                        OnAdornmentClick="@(() => OpensPrivateNoteForProject(context.Item))">
                            <MudTooltip Text="Click to view/change private note">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" />
                            </MudTooltip>
                        </MudTextField>
                    </CellTemplate>
                    <EditTemplate>
                        <MudText Style="display:none;" />
                    </EditTemplate>
                </PropertyColumn>
            }

            <PropertyColumn Property="x => x.Link" Title="Project Link" Required=false Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;">
                <CellTemplate>
                    @if (!String.IsNullOrEmpty(@context.Item.Link))
                    {
                        <MudTooltip Text="@context.Item.Link" >
                            <MudLink Underline="Underline.Always" Style="color:dodgerblue !important" Href="@context.Item.Link">
                                Project Link
                            </MudLink>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>Unassigned</span>
                    }
                </CellTemplate>
                <EditTemplate>
                    <div class="@EditTemplateCss">
                        <MudTextField Label="Project Link" Variant="Variant.Outlined" @bind-Value="@context.Item.Link" />
                    </div>
                </EditTemplate>
            </PropertyColumn>
            @* Editors Info*@
            @if (RoleBasedColumns[_currentRole].Contains("EditorBillable"))
            {
                @if (_isAdminView)
                {
                    <PropertyColumn Property="x => x.PrimaryEditorDetails.DatePaidEditor" Title="P.Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden=@HasAnyPrimaryEditor>
                        <CellTemplate>
                            @if (context.Item.PrimaryEditorDetails.DatePaidEditor != null)
                            {
                                <MudTextField Variant="Variant.Outlined" @bind-Value="context.Item.PrimaryEditorDetails.DatePaidEditor">@context.Item.PrimaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")</MudTextField>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            @if(context.Item.PrimaryEditorId != null)
                            {
                                <MudDatePicker Date="@context.Item.PrimaryEditorDetails.DatePaidEditor" 
                                DateChanged="@(date => context.Item.PrimaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)"
                                Label="P.Date Paid" Variant=Variant.Outlined/>
                            }
                        </EditTemplate>
                    </PropertyColumn>

                    <PropertyColumn Property="x => x.PrimaryEditorDetails.BillableHours" Title="P.Logged Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnyPrimaryEditor>
                        <CellTemplate>
                            @if(@context.Item.PrimaryEditorDetails.BillableHours >= 0)
                            {
                                <MudText>Hr @context.Item.PrimaryEditorDetails.BillableHours</MudText>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.PrimaryEditorDetails.Overtime" Title="P.Editor Overtime" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnyPrimaryEditor>
                        <CellTemplate>
                            @if(@context.Item.PrimaryEditorDetails.Overtime != null )
                            {
                                <MudText>Hr @context.Item.PrimaryEditorDetails.Overtime</MudText>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.PrimaryEditorDetails.AdjustmentHours" Title="P.Adjustment" Hideable="true" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden=@HasAnyPrimaryEditor>
                        <CellTemplate>
                            @if(@context.Item.PrimaryEditorDetails.AdjustmentHours >= 0){
                                <MudText>Hr @context.Item.PrimaryEditorDetails.AdjustmentHours</MudText>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.PrimaryEditorDetails.FinalBillableHours" Title="P.Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnyPrimaryEditor>
                        <CellTemplate>
                            @if(@context.Item.PrimaryEditorDetails.FinalBillableHours >= 0)
                            {
                                <MudText>Hr @context.Item.PrimaryEditorDetails.FinalBillableHours</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.PrimaryEditorDetails.PaymentAmount" Title="P.Editor Payment" Groupable="false" Hideable="true" Hidden=@HasAnyPrimaryEditor
                    Editable="false" CellStyle="text-align:center;">
                        <CellTemplate>
                            @if (context.Item?.PrimaryEditorDetails?.PaymentAmount >= 0)
                            {
                                <MudText>$@context.Item.PrimaryEditorDetails.PaymentAmount</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SecondaryEditorDetails.DatePaidEditor" Title="Sec.Date Paid" Groupable=false Hideable="true" Editable=true CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if (context.Item.SecondaryEditorDetails.DatePaidEditor != null)
                            {
                                <MudTextField Variant="Variant.Outlined" >@context.Item.SecondaryEditorDetails.DatePaidEditor.Value.ToString("MM/dd/yyyy")</MudTextField>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            @if(context.Item.SecondaryEditorId != null)
                            {
                                <MudDatePicker  
                                Date="@context.Item.SecondaryEditorDetails.DatePaidEditor"
                                Label="Sec.Date Paid"
                                Variant=Variant.Outlined
                                DateChanged="@(date => context.Item.SecondaryEditorDetails.DatePaidEditor = date.HasValue ? DateTime.SpecifyKind(date.Value, DateTimeKind.Utc) : null)" />
                            }
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SecondaryEditorDetails.BillableHours" Title="Sec.Editor Logged Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if(context.Item.SecondaryEditorDetails.BillableHours != null)
                            {
                                <MudText>Hr @context.Item.SecondaryEditorDetails.BillableHours</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SecondaryEditorDetails.Overtime" Title="Sec.Editor Overtime" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if(context.Item.SecondaryEditorDetails.Overtime != null)
                            {
                                <MudText>Hr @context.Item.SecondaryEditorDetails.Overtime</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SecondaryEditorDetails.AdjustmentHours" Title="Sec.Adjustment" Hideable="true" Required=false Groupable=false Editable=true CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if(context.Item.SecondaryEditorDetails.AdjustmentHours != null)
                            {
                                <MudText>Hr @context.Item.SecondaryEditorDetails.AdjustmentHours</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>


                    <PropertyColumn Property="x => x.SecondaryEditorDetails.FinalBillableHours" Title="Sec.Editor Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if(context.Item.SecondaryEditorDetails.FinalBillableHours >= 0)
                            {
                                <MudText>Hr @context.Item.SecondaryEditorDetails.FinalBillableHours</MudText>
                            }
                            else{
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SecondaryEditorDetails.PaymentAmount" Title="Sec.Editor Payment" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;" Hidden=@HasAnySecondaryEditor>
                        <CellTemplate>
                            @if (context.Item?.SecondaryEditorDetails?.PaymentAmount >= 0)
                            {
                                <MudText>$@context.Item.SecondaryEditorDetails.PaymentAmount</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                else if (_isEditorView)
                {
                    <TemplateColumn Title="Editor Paid Date" Sortable="true" Filterable="true" Groupable="false" Editable=false Hideable="true">
                        <CellTemplate>
                            @{var _DatePaidEditor = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.DatePaidEditor
                        : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.DatePaidEditor : null );
                            }
                            @if (_DatePaidEditor == null)
                            {
                                <MudText>N/A</MudText>
                            }
                            else
                            {
                                <MudText>@_DatePaidEditor.Value.ToString("MM/dd/yyyy")</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Logged Hours" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                        <CellTemplate>
                            @{decimal? _BillableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.BillableHours
                        : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.BillableHours : null );
                            }
                            @if(_BillableHours  == null)
                            {
                                <MudText>N/A</MudText>                                
                            }
                            else{
                                <MudText>Hr @_BillableHours </MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Editor Overtime" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                        <CellTemplate>
                            @{decimal? _overtime = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.Overtime
                       : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.Overtime : null );
                            }
                            @if(_overtime  == null)
                            {
                                <MudText>N/A</MudText>                                
                            }
                            else{
                                <MudText>Hr @_overtime </MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Adjustment" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                        <CellTemplate>
                            @{
                                decimal? _adjustment = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.AdjustmentHours
                              : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.AdjustmentHours : null );
                            }
                            @if(_adjustment == null)
                            {
                                <MudText>N/A</MudText>                                
                            }
                            else{
                                <MudText>Hr @_adjustment</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Billable Hours" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                        <CellTemplate>
                            @{decimal? _billableHours = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.FinalBillableHours
                        : ( context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.FinalBillableHours : null );
                            }

                            @if(_billableHours >= 0)
                            {
                                <MudText>Hr @_billableHours</MudText>
                            }
                            else if (_billableHours == null)
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Payment" Sortable="true" Filterable="true" Groupable="false" Hideable="true">
                        <CellTemplate>
                            @{var paymentAmount = context.Item.PrimaryEditorId == _currentUserId ? context.Item.PrimaryEditorDetails.PaymentAmount
                            : (context.Item.SecondaryEditorId == _currentUserId ? context.Item.SecondaryEditorDetails.PaymentAmount : null);
                            }
                            @if (paymentAmount >= 0)
                            {
                                <MudText>$@paymentAmount</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                }

            }
            @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
            {
                <PropertyColumn Property="x => x.ClientBillableHours" Title="Client Billable Hours" Groupable=false Hideable="true" Editable=false CellStyle="text-align:center;">
                    <CellTemplate>
                        @if(context.Item.ClientBillableHours >= 0)
                        {
                            <MudText>Hr @context.Item.ClientBillableHours</MudText>
                        }
                        else
                        {
                            <MudText>N/A</MudText>
                        }
                    </CellTemplate>
                    <EditTemplate>
                        <MudText Style="display:none;" />
                    </EditTemplate>
                </PropertyColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("ClientBillableAmount"))
            {
                if(_isAdminView)
                {
                    <PropertyColumn Property="x => x.ClientBillableAmount" Title="Client Payment" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;">
                        <CellTemplate>
                            @if(context.Item.ClientBillableAmount >= 0)
                            {
                                <MudText>$@context.Item.ClientBillableAmount</MudText>
                            }
                            else
                            {
                                <MudText>N/A</MudText>
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
                else if(_isClientView)
                {
                    <PropertyColumn Property="x => x.ClientBillableAmount" Title="Payment Amount" Hideable="true" Groupable=false Editable=false CellStyle="text-align:center;">
                        <CellTemplate Context="context">
                            @{
                                var project = context.Item as Project;
                                @if (project?.IsPaymentVisible == true)
                                {
                                    <MudText>$@project.ClientBillableAmount</MudText>
                                }
                                else
                                {
                                    <span>Unassigned</span>
                                }
                            }
                        </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
                }
            }
            @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
            {
                <TemplateColumn T="Project" Title="Payment Visible" Sortable="false" Filterable="false" Groupable=false Hideable="true">
                    <CellTemplate>
                        <MudItem >
                            <MudIconButton Icon="@(context.Item.IsPaymentVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                            Color="@(context.Item.IsPaymentVisible ? Color.Success : Color.Error)"
                            OnClick="@(async () => await TogglePaymentVisibility(context.Item))" Class="d-flex justify-center" style="text-align:center;"
                            Size="Size.Small" />
                        </MudItem>
                    </CellTemplate>
                </TemplateColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("SubmittedStatus"))
            {
                <PropertyColumn Property="x => x.SubmissionStatus" Title="Deliverables Details" CellStyle="text-align:center;" Hideable="true">
                    <CellTemplate>
                        @{
                            var submissionStatus = context.Item.SubmissionStatus == Models.SubmissionStatus.Submitted ?
                        Color.Info : context.Item.SubmissionStatus == Models.SubmissionStatus.Approved ? Color.Success : Color.Error;

                        }
                        @if(_isAdminView)
                        {
                            <MudButton Color="@submissionStatus"
                            Variant="Variant.Filled"
                            Size="Size.Small"
                            OnClick="@(() => TimeCalculator(context.Item))" Style="min-width:5vw">
                                @context.Item.SubmissionStatus.ToString()
                            </MudButton>
                        }
                        else if(_isEditorView){
                            <MudButton Color="@submissionStatus"
                            Variant="Variant.Filled"
                            Size="Size.Small"
                            Disabled="(_isEditorView && context.Item.SubmissionStatus == Models.SubmissionStatus.Approved)"
                            OnClick="@(() => TimeCalculator(context.Item))" FullWidth=true
                            Style="min-width:5vw"
                            Class="">
                                @context.Item.SubmissionStatus.ToString()
                            </MudButton>
                        }
                    </CellTemplate>
                </PropertyColumn>
            }


            @if (RoleBasedColumns[_currentRole].Contains("Actions"))
            {
                <TemplateColumn CellClass="" Title="Actions" Hideable="true" Groupable="false" >
                    <CellTemplate>
                        <MudStack Spacing="0" Class="mb-1">
                            @if (_isArchived && _isAdminView)
                            {
                                <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                Variant="Variant.Filled"
                                Size="Size.Small"
                                OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(context.Item))"
                                StartIcon="@Icons.Material.Filled.Archive"
                                Class="mb-1">
                                    @(context.Item.IsArchived ? "Unarchive" : "Archive")
                                </MudButton>
                                <MudButton Color="Color.Error"
                                Variant="Variant.Filled"
                                Size="Size.Small"
                                OnClick="@(() => DeleteDialog(context.Item))"
                                StartIcon="@Icons.Material.Filled.Delete"
                                Class="mb-1">
                                    Delete
                                </MudButton>
                            }
                            else if(!_isArchived && _isAdminView || !_isArchived && _isClientView)
                            {
                                <MudButton Color="Color.Warning"
                                Variant="Variant.Filled"
                                Size="Size.Small"
                                OnClick="@(() => ArchiveProject(context.Item))"
                                StartIcon="@Icons.Material.Filled.Archive"
                                Class="mb-1">
                                    Archive
                                </MudButton>
                                <MudButton Color="Color.Info"
                                Variant="Variant.Filled"
                                Size="Size.Small"
                                OnClick="@(() => Duplicate(context.Item))"
                                StartIcon="@Icons.Material.Filled.Edit"
                                Class="mb-1">
                                    Duplicate
                                </MudButton>
                            }
                        </MudStack>


                        @if(_isAdminView || _isEditorView)
                        {
                            <MudStack Spacing="0">
                                <MudButton Color="Color.Success"
                                Variant="Variant.Filled"
                                Size="Size.Small"
                                OnClick="@(() => Logging(context.Item,_currentUserId))"
                                StartIcon="@Icons.Material.Filled.Edit"
                                Class="mb-1">
                                    Logging
                                </MudButton>
                            </MudStack>
                        }

                    </CellTemplate>
                </TemplateColumn>
            }
            @if (RoleBasedColumns[_currentRole].Contains("Archive"))
            {
                @if (_isArchived)
                {
                    <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" Hideable="true"/>
                }
            }        
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Project"/>
        </PagerContent>
    </MudDataGrid>
    <MudContainer Class="justify-start d-flex flex-grow-1 gap-2 flex-wrap container-for-toggles" Gutters=false
    Style="margin-top: -230px; transform: scale(0.7); transform-origin: top left; padding-left: 15px;">
        @if(isAdminView)
        { 
            <MudButton Color="Color.Success"
            Variant="Variant.Filled" Size="Size.Small"
            StartIcon="@Icons.Material.Filled.AddCircle"
            OnClick="@(() => AddProjectDialogAsync(DialogOptions))" Class="mt-3">
                Add Project
            </MudButton>
            <MudSpacer />

            <MudDivider style="border-width:0px !important;" />

        }
        else if (_isClientView)
        {
            <MudButton Color="Color.Success" Class="mt-5"
            Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.AddCircle" Size="Size.Small"
            OnClick="@(() => CreateProjectDialogAsync(DialogOptions))">
                Create New Project
            </MudButton>
        }
    </MudContainer>
    @if (ProjectState.CurrentProject != null )
    {
        <div class="mud-overlay mud-overlay-dialog" style=""><div class="mud-overlay-scrim mud-overlay-dark"></div></div>
        <div class="floating-chat-container">

            <Chats.ProjectChatDialog Project="@ProjectState.CurrentProject"
            UserId="@_currentUserId"
            IsAdminView="@isAdminView"
            IsClientView="@_isClientView" isEditorView="@_isEditorView"
            TimezoneOffsetMinutes="@timezoneOffsetMinutes" /> </div>
    }

}



@code {
    private bool _loading = true;
    private bool _loadingIndicator;
    [CascadingParameter]
    public ClaimsPrincipal? currentUser { get; set; }
    private MudDataGrid<Project> _dataGrid = new();
    private IEnumerable<Project?> projects = new List<Project?>();
    private Project? projectToDelete;
    private bool HasAnySecondaryEditor;
    private bool HasAnyPrimaryEditor;
    private readonly DialogOptions DialogOptions = new() { CloseButton = true, FullScreen = false };
    private bool _isArchived;
    private bool _isAdminView;
    private bool isAdminView;
    private bool _isEditorView;
    private bool _isClientView;
    private bool _groupByClientName;
    private int timezoneOffsetMinutes; // Gets User local time to change timing according to his own.
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string EditTemplateCss => _currentRole == "Client" ? "d-none" : "d-block";
    private string? CircuitId;
    private List<UserRoleViewModel.UserProjectViewModel> Editors = new List<UserRoleViewModel.UserProjectViewModel>();
    private List<UserRoleViewModel.UserProjectViewModel> Clients = new List<UserRoleViewModel.UserProjectViewModel>();
    [Inject] private IConfirmationService ConfirmationService { get; set; } = default!;
    [Inject] private LoadingService LoadingService { get; set; }
    private enum ProgressBarValue
    {
        Zero = 0,
        Twenty = 20,
        Forty = 40,
        Sixty = 60,
        Eighty = 80,
        Hundred = 100
    }
    private void HandleProjectStateChange()
    {
        InvokeAsync(StateHasChanged);
    }
    // quick filter - filter globally across multiple columns with the same input
    private Func<Project, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // Null-safe string comparisons
        if (x.ProjectName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (x.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        // Combine all fields with null checks
        var searchableText = string.Join(" ", new string[]
        {
        x.Link,
        x.FormatStatus,
        x.FormatAdminStatus,
        x.PrimaryEditorName,
        x.SecondaryEditorName,
        x.FormattedShootDate,
        x.FormattedDueDate,
        x.NotesForProject,
        x.FormattedWorkingMonth,
            }.Where(s => s != null));

        return searchableText.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };
    protected override async Task OnInitializedAsync()
    {
        // Get the current user ID
        LoadingService.Subscribe(isVisible =>
        {
            _loadingIndicator = isVisible;
            StateHasChanged();
        });    
        ProjectState.OnChange += HandleProjectStateChange;
        _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!;
        if (currentUser.IsInRole("Admin"))
        {
            _currentRole = "Admin";
            _isAdminView = true;
            isAdminView = true;
        }
        else if (currentUser.IsInRole("Editor"))
        {
            _currentRole = "Editor";
            _isEditorView = true;
            _isAdminView = false;

        }
        else if (currentUser.IsInRole("Client"))
        {
            _currentRole = "Client";
            _isClientView = true;
            _isAdminView = false;
        }
        CircuitId = Guid.NewGuid().ToString(); 
        Broadcaster.Subscribe(CircuitId, HandleProjectsUpdated);
        await LoadProjects();

        _loading = false;
    }    
    private async Task OnClick(){
        await ScrollManager.ScrollToBottomAsync(".mud-table-container", ScrollBehavior.Smooth);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timezoneOffsetMinutes = await JSRuntime.InvokeAsync<int>("getTimezoneOffset");            
        }

    }
    private async Task OnRowClick(DataGridRowClickEventArgs<Project> args)
    {
        StateHasChanged();
        await _dataGrid.SetEditingItemAsync(args.Item);
        LoadingService.HideLoading();
        StateHasChanged();

    }
    private async Task HandleProjectsUpdated()
    {
        await InvokeAsync(async () =>
        {
            await LoadProjects();
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        if (CircuitId != null)
        {
            Broadcaster.Unsubscribe(CircuitId);
        }
        ProjectState.OnChange -= HandleProjectStateChange;
    }
    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","AdminStatus","PrivateNotes","AdminBillableHoursView","ClientBillable","ClientBillableAmount","EditorBillable","SubmittedStatus","Actions","Archive" } },
        { "Editor", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","PrivateNotes","BillableHours","EditorBillable","SubmittedStatus", "Actions"} },
        { "Client", new List<string> { "ExternalId", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate","ClientBillableAmount", "Status" } }
    };
    private Guid _gridKey = Guid.NewGuid();
    private async Task AdminToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task EditorToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task ClientToggle()
    {
        LoadingService.ShowLoading();
        _gridKey = Guid.NewGuid();
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjects();
        LoadingService.HideLoading();
    }

    private async Task ArchivedToggle()
    {
        LoadingService.ShowLoading();
        _isArchived = !_isArchived;
        await LoadProjects();
        LoadingService.HideLoading();
    }
    private async Task OpenProjectChat(Project Project)
    {
        try
        {
            LoadingService.ShowLoading();
            await Task.Yield(); 
            ProjectState.SetProject(Project);
            await Task.Yield(); 
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }
    /// <summary>
    /// Ensures thread-safe access to the LoadProjects method using SemaphoreSlim.
    /// SemaphoreSlim(1,1) creates a lightweight synchronization object that:
    /// - Allows only 1 thread to access the protected code at a time (first parameter)
    /// - Has a maximum count of 1 (second parameter)
    /// WaitAsync() acquires the lock before executing the code
    /// Release() ensures the lock is released after execution, even if an exception occurs
    /// This prevents race conditions when LoadProjects is called simultaneously by multiple events
    /// </summary>
    
    // Using it here to prevent LoadProject and RowsPerPageChanged from calling LoadProjects simultaneously
    private SemaphoreSlim _loadingSemaphore = new SemaphoreSlim(1, 1);
    //  Load project for admin/editor view only (will later be split )
    private async Task LoadProjects()
    {
        try
        {
            await _loadingSemaphore.WaitAsync();
            if (_isAdminView)
            {
                projects = await projectServices.GetProjectsAsync(_isArchived,_dataGrid.RowsPerPage);
                Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                HasAnyPrimaryEditor = !projects.Any(x => x.PrimaryEditorId != null);
                HasAnySecondaryEditor = !projects.Any(x => x.SecondaryEditorId != null);

            }
            // for client view which will fetch his own projects only)
            else if (_isClientView && isAdminView == false)
                await LoadProjectsForClient();
            // this is for the admin to see all the projects but from the client view
            else if (_isClientView && isAdminView == true || _isEditorView && isAdminView == true)
            {
                projects = await projectServices.GetProjectsAsync(_isArchived, _dataGrid.RowsPerPage);
                Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
                Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
            }
            else if (_isEditorView && isAdminView == false)
                await LoadProjectsForEditors();
            StateHasChanged();
        }
        finally
        {
            _loadingSemaphore.Release();
        }

    }
    // Loading Projects for Editors View
    private async Task LoadProjectsForEditors()
    {
        LoadingService.ShowLoading();
        projects = await projectServices.GetProjectsForEditors(_isArchived, _currentUserId, _dataGrid.RowsPerPage);
        LoadingService.HideLoading();
        StateHasChanged();
    }
    // Loading Projects for Client View
    private async Task LoadProjectsForClient()
    {
        LoadingService.ShowLoading();
        projects = await projectServices.GetProjectsForClients(_isArchived, _currentUserId,_dataGrid.RowsPerPage);
        LoadingService.HideLoading();
        StateHasChanged();
    }

    // Add new project dialog
    private async Task AddProjectDialogAsync(DialogOptions options)
    {   
        LoadingService.ShowLoading();
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;

        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView},
            { "Editors", Editors},
            { "Clients", Clients}
        };
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", dialogParameters,options);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var newProject = (Project) result.Data!;
            if(newProject.ClientId == null)
            {
                newProject.ClientId = _currentUserId;
            }
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
        LoadingService.HideLoading();

    }
    private async Task CreateProjectDialogAsync(DialogOptions options)
    {
        LoadingService.ShowLoading();
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;
        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault },
            { "_isClientView", _isClientView}
        };
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Create New Project", dialogParameters, options);
        LoadingService.HideLoading();
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var newProject = (Project) result.Data!;
            newProject.WorkingMonth = DateTime.Today;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
            if(_isClientView)
            {
                var project = await projectServices.GetProjectByIdAsync(newProject.ProjectId);
                await _notificationService.QueueProjectCreationNotification(project);
            }
        }
    }
    // Deleting project in archive
    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        if (!await ConfirmationService.Confirm($"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"))
        {            
            return;
        }
        LoadingService.ShowLoading();
        await projectServices.DeleteProjectAsync(projectToDelete.ProjectId);
        await LoadProjects();
        LoadingService.HideLoading();
        StateHasChanged();
    }
    // Archiving and Unarchiving the project
    public async Task ArchiveProject(Project project)
    {
        LoadingService.ShowLoading();
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var archivedProject = (string) result.Data!;
            if(archivedProject != null)
            {
                await projectServices.ArchiveProjectAsync(project.ProjectId, archivedProject);
                await projectServices.ReorderProjectAsync(project.ProjectId, project.InternalOrder = null, false);
                await LoadProjects();

            }
        }
        LoadingService.HideLoading();

    }
    public async Task Duplicate(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newProject = new Project();
            newProject.ClientId = project.ClientId;
            newProject.ProjectName = project.ProjectName + "- Copy ";
            newProject.FootageLink = project.FootageLink;
            newProject.Deliverables = project.Deliverables;
            newProject.Description = project.Description;
            newProject.MusicPreference = project.MusicPreference;
            newProject.ShootDate = DateTime.UtcNow;
            newProject.DueDate = DateTime.UtcNow.AddDays(28);
            newProject.MusicPreference = project.MusicPreference;

            newProject.ProjectSpecifications = project.ProjectSpecifications;
            {
                newProject.ProjectSpecifications.ColorProfile = project.ProjectSpecifications.ColorProfile;
                newProject.ProjectSpecifications.CameraNumber = project.ProjectSpecifications.CameraNumber;
                newProject.ProjectSpecifications.Resolution = project.ProjectSpecifications.Resolution;
                newProject.ProjectSpecifications.Size = project.ProjectSpecifications.Size;
                newProject.ProjectSpecifications.AudioDetails = project.ProjectSpecifications.AudioDetails;
            };
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            LoadingService.HideLoading();
            Snackbar.Add("Successfully duplicated this project!", Severity.Success);


        }
        catch (Exception ex)
        {

            Snackbar.Add("Failed to duplicate this project !", Severity.Error);
            throw ex;

        }

    }

    private async Task UnarchiveProject(Project project)
    {
        LoadingService.ShowLoading();
        if (await ConfirmationService.Confirm($"Are you sure you'd like to unarchive this project {project.ProjectName}?"))
        {
            await projectServices.UnarchiveProjectAsync(project.ProjectId);
            await LoadProjects();
        }
        LoadingService.HideLoading();
        

    }
    // Opens Description Dialog
    private void OpenDescriptionDialog(Project context)
    {
        LoadingService.ShowLoading();
        var parameters = new DialogParameters
        {
            { "context", context },
            { "currentRole", _currentRole},
            { "modifiedProject", EventCallback.Factory.Create<Project>(this, async (modifiedProject) =>
                {
                    await updateProject(modifiedProject);
                })
            }
        };
        var options = new DialogOptions { };
        DialogService.Show<ProjectNameAndDescriptionDialog>("Project Description", parameters, options);
        LoadingService.HideLoading();

    }

    private async Task updateProject(Project modifiedProject)
    {
        LoadingService.ShowLoading();

        if (modifiedProject is Project project)
        {
            await UpdateProjectAsync(project);
        }
        LoadingService.HideLoading();
        
    }

    private void OpenViewClientEditingGuidelinesComponent(Project context)
    {
        LoadingService.ShowLoading();

        var parameters = new DialogParameters
        {
            { "userId", context.ClientId },
        };
        var options = new DialogOptions { FullScreen = false };
        DialogService.Show<ViewClientEditingGuidelinesComponent>("Client Preferences", parameters, options);
        LoadingService.HideLoading();

    }

    // Opens private note for modification
    private async Task OpensPrivateNoteForProject(Project context)
    {
        LoadingService.ShowLoading();

        var parameters = new DialogParameters
        {
            { "project", context },
        };
        var options = new DialogOptions { FullScreen = false };
        var dialog = await DialogService.ShowAsync<PrivateNoteForProjectComponent>("", parameters, options);
        var result = await dialog.Result;
        if(!result!.Canceled)
        {
            var project = (Project) result.Data!;
            await UpdateProjectAsync(project!);
            Snackbar.Add($"Successfully updated the project notes", Severity.Info);
            await LoadProjects();
        }
        LoadingService.HideLoading();

    }

    private async Task UpdateProjectAsync(Project project)
    {
        LoadingService.ShowLoading();
        await projectServices.UpdateProjectAsync(project,_currentUserId);
        LoadingService.HideLoading();

    }
    // Calculates Total Client Billable hours based on a formula.
    private async Task TimeCalculator( Project project)
    {
        LoadingService.ShowLoading();
        if (_isEditorView && project.SubmissionStatus == Models.SubmissionStatus.Approved)
        {
            Snackbar.Add($"As an Editor you aren't allowed to modify projects which status is {project.SubmissionStatus.ToString()}",Severity.Error);
            return;
        }
        var dialogParameters = new DialogParameters<ProjectTotalHoursCalculatorDialog> {
            { nameof(ProjectTotalHoursCalculatorDialog.newProject), project },
            { "_isAdminView", _isAdminView},
            { "_isEditorView", _isEditorView}
        };
        var dialog = await DialogService.ShowAsync<ProjectTotalHoursCalculatorDialog>("Time Calculator", dialogParameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var _project = result.Data! as Project;
            if (_project != null)
            {

                await projectServices.UpdateProjectBillableHoursAsync(_project);
                await projectServices.CalculateProjectFinalPrice(_project);

                Snackbar.Add($"Successfully updated deliverable details of the project: {_project.ProjectName}", Severity.Success);
                await LoadProjects();
            }
        }
        LoadingService.HideLoading();

    }

    private async Task Logging(Project project,string currentUserId)
    {
        LoadingService.ShowLoading();

        var dialogParameters = new DialogParameters<LoggingDialog> {
            { nameof(LoggingDialog.currentProject), project },
            { "CurrentUserId", currentUserId},
            { "isAdmin", isAdminView}
        };

        var dialog = await DialogService.ShowAsync<LoggingDialog>("Logging Hours", dialogParameters);
        var result = await dialog.Result;
        await LoadProjects();
        LoadingService.HideLoading();


    }

    // Checks if there is changes between two projects in any property excluding the excluded.
    private bool HasNoSignificantChanges(Project original, Project modified, params string[] excludeProperties)
    {
        if (original == null || modified == null)
            return original == modified;  // Both null = true, one null = false

        var excluded = new HashSet<string>(excludeProperties, StringComparer.OrdinalIgnoreCase);  // Added case-insensitive comparison
        var properties = typeof(Project).GetProperties();

        foreach (var prop in properties)
        {
            if (excluded.Contains(prop.Name))
                continue;

            var originalValue = prop.GetValue(original);
            var modifiedValue = prop.GetValue(modified);

            if (!Equals(originalValue, modifiedValue))
                return false;
        }
        return true;
    }

    Project beforeModification = new Project();
    void StartedEditingItem(Project project)
    {
        beforeModification = JsonSerializer.Deserialize<Project>(
            JsonSerializer.Serialize(project))!;
    }
    void CanceledEditingItem(Project project)
    {

    }
    private async Task CommittedItemChanges(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            if (_isClientView)
            {
                if (HasNoSignificantChanges(beforeModification, project, "ExternalOrder", "Status", "ShootDate") == false)
                {
                    if(project.Status != ProjectStatus.Upcoming && (
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Resolution) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.Size) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.CameraNumber) ||
                            string.IsNullOrEmpty(project.ProjectSpecifications?.ColorProfile) ))
                    {
                        throw new Exception("Please Open Project Brief and fill-out all the information before changing status.");
                    }
                    await UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }
            else if(_isAdminView)
            {
                await UpdateProjectAsync(project);
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add($"Successfully updated the project", Severity.Info);
                await LoadProjects();
                StateHasChanged();
            }
            else
            {
                if (HasNoSignificantChanges(beforeModification, project, "Status", "ShootDate", "DueDate", "ProgressBar", "WorkingMonth") == false)
                {
                    await UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    await LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }
            LoadingService.HideLoading();

        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message ,Severity.Warning);
            await LoadProjects();
        }        
    }

    private string GetStatusStyle(Project project)
    {
        return project.Status switch
        {
            ProjectStatus.Upcoming => "background-color: #6E7AD4; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #5A66B3; text-align:center;",
            ProjectStatus.Scheduled => "background-color: #4A90E2; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #3A7AC5; text-align:center;",
            ProjectStatus.Ready_To_Edit => "background-color: #E55F7E; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #C74A6A; text-align:center;",
            ProjectStatus.Working => "background-color: #8E6ECE; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #7558B0; text-align:center;",
            ProjectStatus.Delivered => "background-color: #4CAF50; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #3A8C3E; text-align:center;",
            ProjectStatus.Review => "background-color: #FFA726; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #E69325; text-align:center;",
            ProjectStatus.Revision => "background-color: #EF5350; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #D32F2F; text-align:center;",
            ProjectStatus.Finished => "background-color: #26A69A; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #00897B; text-align:center;",
            _ => "background-color: #757575; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.2); border: 1px solid #616161; text-align:center;"
        };
    }
    // Downloading Filtered as CSV
    private async Task DownloadFilteredAsCsv()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the filtered CSV file?"))
            {
                var filteredItems = _dataGrid.FilteredItems.ToList();
                var csvContent = GenerateCsvContentFiltered(filteredItems);
                var filename = $"Projects_{DateTime.Now:MM_dd_yyyy_HH_mm_ss}.csv";
                await DownloadFile(filename, csvContent);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private async Task DownloadAllProjects()
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the All Projects as CSV file?"))
            {
                if (projects.Any())
                {
                    var nonNullProjects = projects.Where(p => p != null).Cast<Project>().ToList(); // Remove null warning
                    var csvContent = ConvertProjectsToCsv(nonNullProjects);
                    var filename = $"All_Projects_{DateTime.Now:MM_dd_yyyy_HH_mm_ss}.csv";
                    await DownloadFile(filename, csvContent);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private string FormatStringToCsv(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        // If the string contains commas, newline characters, or double quotes, wrap it in double quotes
        if (value.Contains(",") || value.Contains("\n") || value.Contains("\r") || value.Contains("\""))
        {
            // Escape double quotes by replacing them with two double quotes
            value = "\"" + value.Replace("\"", "\"\"") + "\"";
        }

        return value;
    }

    public string ConvertProjectsToCsv(List<Project> projects)
    {
        var sb = new System.Text.StringBuilder();

        // Add CSV headers with the additional fields for editor details
        sb.AppendLine("ID,Project Name,Project Description,Client Name,Primary Editor Name,Secondary Editor Name,Progress,Shoot Date,Due Date,Status, Payment Status,Client Billable Hours,Client Billable Amount,Primary Editor Billable Hours,Primary Editor Overtime,Primary Editor Payment Amount,Secondary Editor Billable Hours,Secondary Editor Overtime,Secondary Editor Payment Amount, Revisions");

        // Add each project as a CSV line
        foreach (var project in projects)
        {
            // Populate the names for the client and editors
            var clientName = project.Client?.UserName ?? "N/A";
            var primaryEditorName = project.PrimaryEditor?.UserName ?? "N/A";
            var secondaryEditorName = project.SecondaryEditor?.UserName ?? "N/A";
            // Remove HTML tags from the Description
            var descriptionWithoutHtml = project.Description != null ? System.Text.RegularExpressions.Regex.Replace(project.Description, "<.*?>", String.Empty) : String.Empty; // Removes HTML tags
            descriptionWithoutHtml = FormatStringToCsv(descriptionWithoutHtml);

            // Retrieve the Billable Hours and Payment Amounts for Client and Editors
            var clientBillableHours = project.ClientBillableHours?.ToString("0.##") ?? "0";
            var clientBillableAmount = project.ClientBillableAmount?.ToString("0.##") ?? "0";

            var primaryEditorBillableHours = project.PrimaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var primaryEditorOvertime = project.PrimaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var primaryEditorPaymentAmount = project.PrimaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";

            var secondaryEditorBillableHours = project.SecondaryEditorDetails?.BillableHours?.ToString("0.##") ?? "0";
            var secondaryEditorOvertime = project.SecondaryEditorDetails?.Overtime?.ToString("0.##") ?? "0";
            var secondaryEditorPaymentAmount = project.SecondaryEditorDetails?.PaymentAmount?.ToString("0.##") ?? "0";
            var revisions = project.Revisions != null && project.Revisions.Any()
            ? project.Revisions.Select(r =>
                $"{r.RevisionDate.ToString("MM-dd-yyyy")}: {r.Content.Replace("\n", " ").Replace("\r", "")}")
                .Aggregate((current, next) => current + " || " + next)
               : string.Empty;
            revisions = FormatStringToCsv(revisions);
            // Append the project data to the CSV
            sb.AppendLine($"{project.ProjectId},{project.ProjectName},{descriptionWithoutHtml},{clientName},{primaryEditorName},{secondaryEditorName},{project.ProgressBar},{project.FormattedShootDate},{project.FormattedDueDate},{project.FormatStatus},{project.FormatAdminStatus},{clientBillableHours},{clientBillableAmount},{primaryEditorBillableHours},{primaryEditorOvertime},{primaryEditorPaymentAmount},{secondaryEditorBillableHours},{secondaryEditorOvertime},{secondaryEditorPaymentAmount},{revisions}");
        }

        return sb.ToString();
    }


    private async Task DownloadFile(string filename, string content)
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                Convert.ToBase64String(bytes)
            );
            Snackbar.Add($"File has started downloading!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"File save error: {ex.Message}", Severity.Error);
        }
    }
    private string GenerateCsvContentFiltered(List<Project> projects)
    {
        // Create CSV header
        decimal total = 0;
        var csv = new System.Text.StringBuilder();
        csv.AppendLine(string.Join(",",
            nameof(Project.ProjectName),
            "Price"
            ));


        // Add data rows
        foreach (var project in projects)
        {
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(project.ProjectName),
                project.ClientBillableAmount
            ));
            if(project.ClientBillableAmount != null )
                total += project.ClientBillableAmount.Value;
        }
        csv.AppendLine();
        csv.AppendLine(string.Join(",",
            $"Total Price: {total}",
        $" Date: {DateTime.Now:MM-dd-yyyy}"));
        return csv.ToString();
    }

    private string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        // Escape commas and quotes
        value = value.Replace("\"", "\"\"");
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = $"\"{value}\"";
        }
        return value;
    }

    // DRAGGING FUNCTIONALITIES 
    private List<Project> _Projects { get; set; } = new();
    private Project? draggedProject;
    private Project? dropTarget;
    private bool isDragging;



    private string GetRowClass(Project project, int rowNumber)
    {
        var classes = new List<string> { };

        if (isDragging && dropTarget?.ProjectId == project.ProjectId)
            classes.Add("drop-target");

        if (draggedProject?.ProjectId == project.ProjectId)
            classes.Add("being-dragged");

        return string.Join(" ", classes);
    }

    private void HandleDragStart(Project project)
    {
        if (project == null) return;
        draggedProject = project;
        isDragging = true;
        StateHasChanged();
    }

    private void HandleDragOver(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (draggedProject?.ProjectId == target.ProjectId)
            return;
    }

    private void HandleDragEnter(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (draggedProject?.ProjectId != target.ProjectId)
        {
            dropTarget = target;
            StateHasChanged();
        }
    }

    private void HandleDragLeave(Project target)
    {
        if (draggedProject == null || target == null)
            return;
        if (target != null && dropTarget?.ProjectId == target.ProjectId)
        {
            dropTarget = null;
            StateHasChanged();
        }
    }

    private async Task HandleDropForInternalOrder(Project targetProject)
    {
        try
        {
        LoadingService.ShowLoading();

            if (draggedProject == null || targetProject == null)
                return;

            if (draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.InternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,false);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;
            LoadingService.HideLoading();
            ResetDragState();
            await RefreshGridData();
        }
    }
    private async Task HandleDropForExternalOrder(Project targetProject)
    {
        try
        {
            LoadingService.ShowLoading();

            if (draggedProject == null || targetProject == null)
                return;

            if (draggedProject.ProjectId == targetProject.ProjectId)
                return;

            int? newOrder = targetProject.ExternalOrder;
            await projectServices.ReorderProjectAsync(draggedProject.ProjectId, newOrder,true);

            Snackbar.Add($"Project: {draggedProject.ProjectName} has been moved to '{newOrder}' successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update project order", Severity.Error);
            Console.WriteLine(ex);
        }
        finally
        {
            // Reset state
            isDragging = false;
            draggedProject = null;
            dropTarget = null;
            LoadingService.HideLoading();
            ResetDragState();
            await RefreshGridData();
        }
    }
    private void ResetDragState()
    {
        isDragging = false;
        draggedProject = null;
        dropTarget = null;
    }
    private async Task RefreshGridData()
    {
        projects = ( await projectServices.GetProjectsAsync() ).ToList();
        await LoadProjects();
        StateHasChanged();
    }

    private async Task ToggleUrgentVisibility(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newValue = !project.IsUrgent;
            project.IsUrgent = newValue;
            await UpdateProjectAsync(project);
            if (newValue == true)
            { Snackbar.Add($"Warning is visible now.", Severity.Success); }
            else
            {
                Snackbar.Add($"Warning is hidden now.", Severity.Info);
            }
            LoadingService.HideLoading();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to add warning!", Severity.Error);
            Console.WriteLine($"Error updating warning urgent visibility: {ex.Message}");
        }
    }
    private async Task TogglePaymentVisibility(Project project)
    {
        try
        {
            LoadingService.ShowLoading();

            var newValue = !project.IsPaymentVisible;
            project.IsPaymentVisible = newValue;
            await UpdateProjectAsync(project);
            if (newValue == true)
            { Snackbar.Add($"Payment is visible to the client now.", Severity.Success); }
            else
            {
                Snackbar.Add($"Payment is hidden from the client now.", Severity.Info);
            }
            LoadingService.HideLoading();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update payment visibility", Severity.Error);
            Console.WriteLine($"Error updating payment visibility: {ex.Message}");
        }
    }
}


<style>
    .cursor-move {
        cursor: grab;
    }
    
    .being-dragged {
        opacity: 0.6;
        cursor: grabbing;
        background-color: var(--mud-palette-success);
    }
    
    .drop-target {
        border-top: 2px solid var(--mud-palette-primary);

    }
    
    .drag-handle {
        display: flex;
        align-items: center;
        padding: 4px;
        cursor: grab;
    }
    
    .drag-handle:hover {
        background-color: var(--mud-palette-background-grey);
        border-radius: 4px;
    }
    .drag-handle.grabbing {
    cursor: grabbing;
}
</style>
