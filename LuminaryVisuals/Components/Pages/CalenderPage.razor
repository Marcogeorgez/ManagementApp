@attribute [Authorize(Policy = "RequireAdminEditor")]
@page "/Calendar"
@using LuminaryVisuals.Components.ProjectPageDialogue
@implements IDisposable
<PageTitle>Calendar</PageTitle>

<MudMainContent class="main-content-sm" Style="height:auto; padding-top:25px; padding-left:25px; padding-right:25px;">
    <MudPaper>
        <MudCalendar @ref=_calender Items="_events" ShowDay="false" ShowWeek="false" MonthCellMinHeight="115" Height="700" ButtonVariant="Variant.Outlined" Color="Color.Info"
                     EnableDragItems="@canDrag" EnableResizeItems="@canDrag" DateRangeChanged="DateRangeChanged" ItemChanged="DateChanged" ItemClicked="ShowCalenderProject">
            <ToolbarContent>

                <MudStack Row="true" style="align-items:center;">
                    <MudMenu Label="Schedule Project Details" Color="Color.Info" Size="Size.Medium" Class="mx-1 my-2"  Variant="Variant.Outlined" OpenChanged="ResetSelected">
                        <MudAutocomplete T="Project" Label="Select Project"
                                         @bind-Value="selectedProject"
                                         SearchFunc="@Search1"
                                         ToStringFunc="@(p => p?.ProjectName ?? "")"
                                         ResetValueOnEmptyText="true"
                                         CoerceText="true"
                                         CoerceValue="true" />

                        @if (selectedProject != null)
                        {
                            <MudDateRangePicker   @bind-DateRange="@selectedProject.Range" Margin="Margin.Dense" Clearable="true"
                            PlaceholderStart="Start Date" PlaceholderEnd="End Date" Label="Date Range" />
                        }
                        <div class="d-flex justify-end mt-5">
                            <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@Cancel"Class="mr-3">Cancel</MudButton>
                            <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="@Confirm">Confirm</MudButton>
                        </div>
                    </MudMenu>




                    <MudSelect T="string" Label="Status Filter" Value="@_statusFilterString" ValueChanged="OnStatusFilterChanged" Class="mb-3" style="min-width:150px;">
                        @foreach (var status in GetUniqueStatuses())
                        {
                            <MudSelectItem Value="@status.ToString()">@status.ToString().Replace('_',' ')</MudSelectItem>
                        }
                    </MudSelect>

                    @if(isAdmin)
                    {
                        <MudSelect T="string" Label="Editor Filter" Value="@editorFilter" style="min-width:150px;"  Class="mb-3" 
                        ValueChanged="OnEditorFilterChanged">
                            @foreach (var editor in GetUniqueEditors())
                            {
                                <MudSelectItem Value="@editor">@editor</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    <MudIconButton Icon="@Icons.Material.Rounded.Flag"
                    OnClick="toggleFlag" Size="Size.Medium"
                    Variant="Variant.Filled"
                    Color="@(showFlag ? Color.Primary : Color.Default)">
                    </MudIconButton>

                    <MudIconButton Icon="@Icons.Material.Filled.CameraRoll"
                    OnClick="toggleCameraRoll"
                    Variant="Variant.Filled" Size="Size.Medium"
                    Color="@(showCameraRoll ? Color.Primary : Color.Default)">
                    </MudIconButton>
                    <MudButton OnClick="ClearFilters" Class="mx-1 my-2" Variant="Variant.Outlined">Clear Filters</MudButton>
                </MudStack>
            </ToolbarContent>
            <MonthTemplate>
                @{
                    var extendedItem = context as ExtendedCalendarItem;
                }
                @if (extendedItem?.IsDot == true)
                {
                    if (extendedItem.DueDate == false && showCameraRoll == true)
                    {
                        <div class="d-flex gap-1 not-draggable">
                            <MudIcon Icon="@Icons.Material.Filled.CameraRoll" Color="Color.Info" Size="Size.Small" />
                            <div>@context.Text </div>
                        </div>
                    }
                    else if(extendedItem.DueDate == true && showFlag == true)
                    {
                        <div class="d-flex gap-1 not-draggable">
                            <MudIcon Icon="@Icons.Material.Rounded.Flag" Color="@(extendedItem.IsUrgent ? Color.Warning : Color.Default)" Size="Size.Small" />
                            <div>@context.Text </div>
                        </div>
                    }
                }
                else
                {

                    <div class="mud-cal-cell-template">
                        <MudChip T="string" Label="true" Color="Color.Primary" Class="mud-cal-cell-template-chip">@context.Text</MudChip>
                    </div>
                }
            </MonthTemplate>
        </MudCalendar>
    </MudPaper>
</MudMainContent>
@code {
    [Inject] private ProjectService projectService { get; set; } = null!;
    private List<ExtendedCalendarItem> _events = new();
    private List<Project>? allProjectsInDateRange = new();
    private List<Project>? allProjects = new();
    bool showCameraRoll = true;
    bool showFlag = true;
    private List<Project> filteredProjects = new();
    private ProjectStatus? statusFilter;
    private string? editorFilter;
    private Project? selectedProject = new() ;
    private bool _subscribed = false;
    private bool canDrag => BreakpointService.CurrentBreakpoint >= Breakpoint.Md;
    public class ExtendedCalendarItem : CalendarItem
    {
        public bool IsDot { get; set; } = false;
        public bool IsUrgent { get; set; } = false;
        public bool DueDate { get; set; } = false;
        public int ProjectId = 0;
    }
    [CascadingParameter] public ClaimsPrincipal? currentUser { get; set; }
    [Inject] private BreakpointService BreakpointService { get; set; } = null!;
    public void Dispose()
    {
        if (_subscribed)
        {
            BreakpointService.OnChange -= StateHasChanged;
            _subscribed = false;
        }
    }

    string _currentUserId = null!;
    string? _userName;
    bool isAdmin;
    DateRange? date;
    string? _statusFilterString;
    void ResetSelected()
    {
        selectedProject = null;
    }
    protected override async Task OnInitializedAsync()
    {
        _currentUserId = currentUser!.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value!;
        isAdmin = currentUser.IsInRole("Admin");
        if(isAdmin)
        {
            allProjects = await projectService.GetProjectsAsync(false);
        }
        else{
            allProjects = allProjectsInDateRange;
        }
        if (!_subscribed)
        {
            BreakpointService.OnChange += StateHasChanged;
            _subscribed = true;
        }
    }
    private void toggleFlag() => showFlag = !showFlag;
    private void toggleCameraRoll() => showCameraRoll = !showCameraRoll;



    private async Task DateRangeChanged(DateRange dateRange)
    {
        // Clear previous events if needed
        _events.Clear();

        allProjectsInDateRange = await projectService.GetProjectsDateRangeCalenderAsync(false, dateRange, isAdmin, _currentUserId);
        date = dateRange;
        await ApplyFilters();

        try
        {
            if (_subscribed)
            {
                await JS.InvokeVoidAsync("updateDraggable");
            }
        }
        catch (JSDisconnectedException)
        {
            // Circuit disconnected — no action needed
        }
    }
    private async Task ApplyFilters()
    {
        try
        {
            if (allProjectsInDateRange == null)
                return;
            filteredProjects = allProjectsInDateRange.ToList();
            if (statusFilter != null)
            {
                filteredProjects = filteredProjects.Where(p => p.Status == statusFilter).ToList();
            }
            if (!string.IsNullOrEmpty(editorFilter))
            {
                filteredProjects = filteredProjects.Where(p =>
                    (p.PrimaryEditor != null && p.PrimaryEditor.UserName == editorFilter)
                    || (p.SecondaryEditor != null && p.SecondaryEditor.UserName == editorFilter)
                ).ToList();

            }
            UpdateEvents();

            if (_subscribed) { 
                await JS.InvokeVoidAsync("updateDraggable"); 
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    private void UpdateEvents()
    {
        _events.Clear();
        foreach (var project in filteredProjects)
        {
            // Add CalendarItem for ShootDate
            if (project.ShootDate.HasValue)
            {
                _events.Add(new ExtendedCalendarItem
                    {
                        Start = project.ShootDate.Value,
                        End = null,
                        IsDot = true,
                        AllDay = false,
                        Text = project.ProjectName,
                        IsUrgent = false,
                            ProjectId = project.ProjectId

                    });
            }

            // Add CalendarItem for DueDate
            if (project.DueDate.HasValue)
            {
                _events.Add(new ExtendedCalendarItem
                    {
                        Start = project.DueDate.Value,
                        End = null,
                        IsDot = true,
                        DueDate = true,
                        Text = project.ProjectName,
                        IsUrgent = project.IsUrgent,
                            ProjectId = project.ProjectId

                    });
            }

            // Add CalendarItem for StartWorkingTime and EndWorkingTime
            if (project.Range != null && project.Range.Start != null && project.Range.End != null)
            {
                _events.Add(new ExtendedCalendarItem
                    {
                        Start = project.Range.Start.Value,
                        End = project.Range.End, // Multi-day event if needed
                        IsDot = false,
                        AllDay = true,
                        Text = project.ProjectName,
                        IsUrgent = project.IsUrgent,
                        ProjectId = project.ProjectId
                    });
            }
        }

    }
    private async Task OnStatusFilterChanged(string status)
    {
        _statusFilterString = status;
        statusFilter = (ProjectStatus)Enum.Parse(typeof(ProjectStatus), _statusFilterString);
        await ApplyFilters();
        StateHasChanged();
    }

    private async Task OnEditorFilterChanged(string editor)
    {
        editorFilter = editor;
        await ApplyFilters();
        StateHasChanged();
    }

    // Clear filters
    private async Task ClearFilters()
    {
        _statusFilterString = "";
        statusFilter = null;
        editorFilter = null;
        showCameraRoll = true;
        showFlag = true;
        await ApplyFilters();
        StateHasChanged();
    }
    private IEnumerable<ProjectStatus> GetUniqueStatuses()
    {
        IEnumerable<ProjectStatus> projects = new List<ProjectStatus>();
        if (allProjectsInDateRange != null)
        {
            projects = allProjectsInDateRange.Select(p => p.Status).Distinct();
        }
        return projects;
    }

    private IEnumerable<string> GetUniqueEditors()
    {
        if (allProjectsInDateRange == null)
            return Enumerable.Empty<string>();

        var primaryEditors = allProjectsInDateRange
            .Where(p => p.PrimaryEditor?.UserName != null)
            .Select(p => p.PrimaryEditor!.UserName!);

        var secondaryEditors = allProjectsInDateRange
            .Where(p => p.SecondaryEditor?.UserName != null)
            .Select(p => p.SecondaryEditor!.UserName!);

        return primaryEditors
            .Concat(secondaryEditors)
            .Where(name => !string.IsNullOrWhiteSpace(name))
            .Distinct();
    }

    private async Task DateChanged(CalendarItem changedItem)
    {

        if (changedItem is ExtendedCalendarItem extendedItem)
        {

            await projectService.UpdateProjectAsync(extendedItem, _currentUserId, isAdmin);

        }
        else
        {
            Snackbar.Add("Received an item that is not ExtendedCalendarItem, please contact manager.",Severity.Error);
            return;
        }

        await Task.CompletedTask;
    }
    [Inject]
    private IDialogService DialogService { get; set; } = default!;
    [Inject] UserManager<ApplicationUser> _userManager { get; set; } = default!;
    public List<ApplicationUser>? Editors { get; set; }

    private async Task ShowCalenderProject(CalendarItem item)
    {
        var clickedItem = (ExtendedCalendarItem)item;
        var project = filteredProjects.FirstOrDefault(p => p.ProjectId == clickedItem.ProjectId);
        Editors = (await _userManager.GetUsersInRoleAsync("Editor")).ToList();
        var parameters = new DialogParameters
        {
            ["project"] = project,
            ["isAdmin"] = isAdmin,
            ["Editors"] = Editors
        };

        var dialog = await DialogService.ShowAsync<CalendarDialog>("", parameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            if (result.Data is Project _project)
            {
                ExtendedCalendarItem extendedItem = new();
                if (_project.StartDate != null)
                {
                    extendedItem.Start = _project.StartDate!.Value;
                    extendedItem.End = _project.EndDate;
                    extendedItem.ProjectId = _project.ProjectId;
                }
                if (_project.StartDate == null && _project.EndDate == null)
                {
                    var deletedProject = allProjectsInDateRange?.FirstOrDefault(p => p.ProjectId == _project.ProjectId);
                    if (deletedProject != null)
                    {
                        allProjectsInDateRange?.Remove(deletedProject);
                        var itemToRemove = _events?.FirstOrDefault(e => e.ProjectId == deletedProject.ProjectId);
                        if (itemToRemove != null)
                        {
                            _events?.Remove(itemToRemove);
                        }
                    }
                }
                if(isAdmin && project != null)
                {
                    await projectService.UpdateProjectAsync(project ,_currentUserId);

                }
                await DateChanged(extendedItem);
                await ApplyFilters();
            }
            StateHasChanged();
        }

    }


    [Inject] IJSRuntime JS { get; set; } = null!;
    private MudCalendar? _calender;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            _calender?.Refresh();
            if (_subscribed)
            {
                await JS.InvokeVoidAsync("updateDraggable");
            }

        }
    }
    [Inject] ISnackbar Snackbar { get; set; } = default!;
    private async Task Confirm()
    {
        if (selectedProject != null )
        {
            if(selectedProject.Range?.Start != null && selectedProject.Range?.End != null)
            {
                await projectService.UpdateProjectAsync(selectedProject, _currentUserId);
                var projectToUpdate = allProjectsInDateRange?.FirstOrDefault(p => p.ProjectId == selectedProject.ProjectId);
                if (projectToUpdate != null)
                {
                    projectToUpdate.StartDate = selectedProject.StartDate;
                    projectToUpdate.EndDate = selectedProject.EndDate;
                    projectToUpdate.Range = selectedProject.Range;
                    
                }
                else
                {
                    allProjectsInDateRange?.Add(selectedProject);
                }
                Snackbar.Add("It have been saved successfully.", Severity.Success);
                
                await ApplyFilters();
            }
            else
            {
                Snackbar.Add("Start and End Date can't be empty.", Severity.Warning);
                return;
            }
        }
    }
    private Task<IEnumerable<Project>> Search1(string value, CancellationToken token)
    {
        if (allProjects == null)
            return Task.FromResult(Enumerable.Empty<Project>());

        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(allProjects.ToList().AsEnumerable());  // Return all projects when search is empty

        return Task.FromResult(allProjects.Where(x =>
            x.ProjectName?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false
        ));
    }
    private void Cancel()
    {
        selectedProject = null;
    }
}
<style>
.mud-layout.mud-drawer-close-mini-md-left.mud-drawer-left-clipped-never {
    overflow-y:auto !important;
}

.mud-menu-list.mud-list
{
    overflow-y: unset !important;
    padding-left: 3%;
    padding-right: 3%;
    padding-top: 20px;

}
</style>
<script>
     window.updateDraggable = function() {
        const dropItems = document.querySelectorAll('.mud-drop-item');
        dropItems.forEach(item => {
            if (item.querySelector('.not-draggable')) {
                item.draggable = false;
                item.setAttribute('draggable', 'false');
            }
        });

        // Run once more after a short delay
        setTimeout(() => {
            const dropItems = document.querySelectorAll('.mud-drop-item');
            dropItems.forEach(item => {
                if (item.querySelector('.not-draggable')) {
                    item.draggable = false;
                    item.setAttribute('draggable', 'false');
                }
            });
        }, 1000);
    };
</script>