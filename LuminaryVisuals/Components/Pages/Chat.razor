@using LuminaryVisuals.Components.Shared.Chat
@inject ChatService ChatService
@inject ProjectService ProjectService
@inject IDialogService DialogService

<MudFab 
        StartIcon="@Icons.Material.Filled.Chat"
        Class="floating-chat-icon"
        Style="position: fixed; bottom: 20px; right: 20px; z-index: 1000; background: rgba(112,160,255,0.8);"
        OnClick="OpenChatPopup" />

@code {
    [Parameter] public string userId { get; set; }

    private void OpenChatPopup()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                Position = DialogPosition.BottomRight,
                NoHeader = true
            };
        var parameters = new DialogParameters<ChatProjectListDialog>
        {
            { "userId" , userId },
        };
        DialogService.Show<ChatProjectListDialog>("", parameters, options);
    }
}





















@* @page "/chat"
@using LuminaryVisuals.Components.Shared.Chat
@inject ChatService ChatService
@inject ProjectService ProjectService

@inject IDialogService DialogService

<MudFab Color="Color.Primary"
        StartIcon="@Icons.Material.Filled.Chat"
        Class="floating-chat-icon"
        Style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;"
        OnClick="OpenChatPopup" />

@code {
    [Parameter] public string UserId { get; set; }
    private List<Project?> projects = new();
    private List<Data.Entities.Chat> chatMessages = new();
    private string selectedProjectId;
    private bool isLoadingProjects = true;
    private bool isLoadingMessages = false;
    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetProjectsForClients(false, UserId); // Fetch projects (not archived)
        isLoadingProjects = false;
    }

    private void OpenChatPopup()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                Position = DialogPosition.BottomRight,
                NoHeader = true
            };
        DialogService.Show<ChatPoppup>("",options);
    }
    private async Task LoadMessagesForProject(int projectId)
    {
        isLoadingMessages = true;
        chatMessages = await ChatService.GetMessagesAsync(projectId, UserId,true); // Fetch messages based on projectId
        isLoadingMessages = false;
    }
}
 *@