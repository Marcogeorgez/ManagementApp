@inject IDbContextFactory<ApplicationDbContext> _contextFactory;
@inject IDialogService DialogService
@if (Loading)
{

    <div class="" style="position: absolute;top: 50%; left: 50%; transform: translate(-50%); text-align: center; display:block; z-index: 5000;">
        <MudCard Elevation="4">
            <MudCardContent>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                <MudText Typo="Typo.h5" Color="Color.Default" Class="ma-5">Downloading.. Please wait for few seconds.</MudText>
            </MudCardContent>
        </MudCard>
    </div>
}

<MudOverlay Visible="Loading" Absolute DarkBackground="true" Style="z-index:1401;" />

<MudDialog>
    <DialogContent>

        @if (isAdmin)
        {
            <MudStack Row AlignItems="AlignItems.Center">
                <MudText>Select target users</MudText>
                <MudSpacer/>
                <MudRadioGroup @bind-Value="ViewClient">
                    <MudRadio Value="@("clients")" Color="Color.Info" Dense="true">Clients</MudRadio>
                    <MudRadio Value="@("editors")" Color="Color.Info" Dense="true">Editors</MudRadio>
                </MudRadioGroup>
            </MudStack>

            <MudStack Row AlignItems="AlignItems.Center">
                <MudItem xs="6" sm="4" >
                    <MudText>Users</MudText>
                </MudItem>
                <MudItem xs="6" sm="8" >
                    <MudSelect T="ApplicationUser" SelectAll="true" Label="Select User" Variant="Variant.Outlined" Dense="true" MultiSelection="true" 
                    @bind-SelectedValues="selectedUsers">
                        @if (ViewClient == "clients")
                        {
                            foreach (var client in _clients)
                            {
                                <MudSelectItem Value="@client">@client.UserName</MudSelectItem>
                            }
                        }
                        else
                        {
                            foreach (var editor in _editors)
                            {
                                <MudSelectItem Value="@editor">@editor.UserName</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            </MudStack>
        }
        <MudStack Row AlignItems="AlignItems.Center">
            <MudItem xs="6" sm="4">
                <MudText>Working Status</MudText>
            </MudItem>
            <MudItem xs="6" sm="8" >
                <MudSelect T="ProjectStatus" MultiSelectionTextFunc="@((values)=> GetMultiSelectionTextForStatus(values))" @bind-SelectedValues="selectedStatuses" SelectAll="true" Label="Select Status" Variant="Variant.Outlined" Dense="true" MultiSelection="true">
                    @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                    {
                        <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudStack>
        @if(isAdmin)
        {
            <MudStack Row AlignItems="AlignItems.Center">
                <MudItem xs="6" sm="4">
                    <MudText>Client Payment Status</MudText>
                </MudItem>
                <MudItem xs="6" sm="8" >
                    <MudSelect T="AdminProjectStatus" MultiSelectionTextFunc="@((values)=> GetMultiSelectionTextForStatus(values))" @bind-SelectedValues="selectedPaymentStatuses" SelectAll="true" Label="Select Status" Variant="Variant.Outlined" Dense="true" MultiSelection="true">
                        @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                        {
                            <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudStack>
        }
        <MudStack AlignItems="AlignItems.Start" Row="true" >
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="4" Style="display: flex; align-items:center;">
                    <MudText Style="justify-self:center">Set Pay Date For Editor:</MudText>
                </MudItem>
                <MudItem xs="6" sm="4" Style="padding-left: 14px !important;">
                    <MudDatePicker Label="Start Date" Variant="Variant.Outlined" Required="false" FixDay="1"
                    DateFormat="MM/yyyy" Date="StartDate" OverflowBehavior="OverflowBehavior.FlipAlways"
                    DateChanged="@(date => OnStartDateChanged(date.Value))" Class="mb-1 w-100" />
                </MudItem>
                <MudItem xs="6" sm="4" Style="padding-left: 14px !important;">
                    <MudDatePicker Label="End Date" Variant="Variant.Outlined" Required="false" FixDay="1"
                    DateFormat="MM/yyyy" Date="EndDate" DateChanged="@(date => OnEndDateChanged(date.Value))" Class="w-100" />
                </MudItem>
            </MudGrid>
        </MudStack>
        @if (ViewClient == "editors")
        {
            <MudStack Row AlignItems="AlignItems.Center" Class="my-2">
                <MudText>Editor Payment Status</MudText>
                <MudSpacer />
                <MudRadioGroup @bind-Value="editorPaid">
                    <MudRadio Value="true" Color="Color.Info" Dense="true">Paid</MudRadio>
                    <MudRadio Value="false" Color="Color.Info" Dense="true">Unpaid</MudRadio>
                </MudRadioGroup>
            </MudStack>
        }
        <MudDivider Class="mb-2"/>
        <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
            <MudItem sm="4">
                <MudText>Selected Projects</MudText>
            </MudItem>
            <MudItem sm="8">
                <MudSelect T="Project" style="width: 100%" MultiSelectionTextFunc="@((values)=> GetMultiSelectionText(SelectedProjectNames))" @bind-SelectedValues="selectedProjects" SelectAll="true" Label="Filter By Projects" Variant="Variant.Outlined" Dense="true" MultiSelection="true">
                    @if (projects != null)
                    {
                        @foreach (var project in projects)
                        {
                            <MudSelectItem Value="project">
                                <div style="display: flex; justify-content: space-between; width: 100%;">
                                    <span>@project.ProjectName</span>
                                    @if(isAdmin && ViewClient == "clients")
                                    {
                                        <span>
                                            <span style="color:#b0dfe8; ">@(Math.Round(project.ClientBillableHours ?? 0,1))h</span>
                                            <span style="color:#74c85f"> @(Math.Round(project.ClientBillableAmount ?? 0, 1))$</span>
                                        </span>
                                    }
                                    else if(isAdmin && ViewClient == "editors"){
                                        <span>
                                            <span style="color:#b0dfe8">@(Math.Round((project.PrimaryEditorDetails.FinalBillableHours + project.SecondaryEditorDetails.FinalBillableHours),1))h</span>
                                            <span style="color:#74c85f">
                                                @(Math.Round((project.PrimaryEditorDetails?.PaymentAmount ?? 0) + (project.SecondaryEditorDetails?.PaymentAmount ?? 0),1))$
                                            </span>
                                        </span>

                                    }
                                    else{
                                        <span>
                                            <span style="color:#b0dfe8">
                                                @((project.PrimaryEditorId == currentUserId && editorPaid == (project.PrimaryEditorDetails.DatePaidEditor != null) ?
                                    project.PrimaryEditorDetails.FinalBillableHours : 0)
                                    + (project.SecondaryEditorId == currentUserId && editorPaid == (project.SecondaryEditorDetails.DatePaidEditor != null) ?
                                    project.SecondaryEditorDetails.FinalBillableHours : 0))h
                                            </span>
                                            <span style="color:#74c85f">
                                                @((Math.Round((project.PrimaryEditorId == currentUserId && editorPaid == (project.PrimaryEditorDetails.DatePaidEditor != null) ?
                                    project.PrimaryEditorDetails.PaymentAmount ?? 0m : 0m),1))
                                    + (Math.Round((project.SecondaryEditorId == currentUserId && editorPaid == (project.SecondaryEditorDetails.DatePaidEditor != null) ?
                                    project.SecondaryEditorDetails.PaymentAmount ?? 0m : 0m),1)))$
                                            </span>
                                        </span>
                                    }
                                </div>
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudStack>

        <MudGrid Justify="Justify.Center" Class="mb-3 mt-n1" >
            <MudItem xs="12" md="4" Style="display: flex; justify-content: center; ">
                <MudButton Variant="Variant.Outlined" Color=Color.Success OnClick="GetProjects">Apply Filters</MudButton>
            </MudItem>
        </MudGrid>

        <MudDivider Class="mb-2" />
        @if (isAdmin && ViewClient == "clients")
        {
            <MudStack Row Class="my-3" Style="align-items: center;">
                <MudItem xs="6">
                    <MudText>Mark Status of Selected Projects as 'Sent-Invoice'</MudText>
                </MudItem>
                <MudItem xs="6" Class="ml-auto d-flex justify-end" >
                    <MudButton OnClick="ShowConfirmation" Color="Color.Warning" Variant="Variant.Outlined" Style="padding: 5px 36px;">Apply!</MudButton>
                </MudItem>
            </MudStack>
            <MudDivider Class="mb-2" />
            <MudStack Row Class="my-3" Style="align-items: center;">
                <MudItem xs="6">
                    <MudText>Send Invoice to Management-Chat</MudText>
                </MudItem>
                <MudItem xs="6" Class="ml-auto d-flex justify-end">
                    <MudButton OnClick="SentInvoiceToChat" Color="Color.Warning" Variant="Variant.Outlined" Style="padding: 5px 36px;">Send!</MudButton>
                </MudItem>
            </MudStack>
        }
        @if (isAdmin && ViewClient == "editors")
        {
            <MudStack AlignItems="AlignItems.Start" Row="true">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="4" Style="display: flex; align-items:center;">
                        <MudText Style="justify-self:center">Working Month Range:</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="4" Style="padding-left: 7px !important;">
                        <MudDatePicker Label="Primary Editor" Variant="Variant.Outlined" @bind-Date="_PrimaryEditorPaymentDate"
                        Class="mt-3" Clearable="true" Required="false" />
                    </MudItem>
                    <MudItem xs="6" sm="4" Style="padding-left: 7px !important;">
                        <MudDatePicker Label="Secondary Editor" Variant="Variant.Outlined" @bind-Date="_SecondaryEditorPaymentDate"
                        Class="mt-3" Clearable="true" Required="false" />
                    </MudItem>
                </MudGrid>
            </MudStack>
            <MudItem xs="6" Class="ml-auto d-flex justify-end my-2">
                <MudButton OnClick="ShowEditorDateDialog" Color="Color.Warning" Variant="Variant.Outlined" Style="padding: 5px 36px;">Apply!</MudButton>
            </MudItem>
        }
        <MudDivider />

        @if (projects != null)
        {
            if (isAdmin && ViewClient == "clients")
            {
                <MudText Class="my-2">
                    Total: <span style="color:#b0dfe8">@(selectedProjects.Sum(p => p.ClientBillableHours) ?? 0)h</span>
                    <span style="color:#74c85f">@(selectedProjects.Sum(p => p.ClientBillableAmount) ?? 0)$</span>
                </MudText>
            }
            else if(isAdmin && ViewClient == "editors")
            {
                var totalHours = selectedProjects?.Sum(p =>
                (editorPaid == (p.PrimaryEditorDetails.DatePaidEditor != null) ? p.PrimaryEditorDetails.FinalBillableHours : 0) +
                (editorPaid == (p.SecondaryEditorDetails.DatePaidEditor != null) ? p.SecondaryEditorDetails.FinalBillableHours : 0)
                ) ?? 0;

                var totalPayment = selectedProjects?.Sum(p =>
                (editorPaid == (p.PrimaryEditorDetails.DatePaidEditor != null) ? (p.PrimaryEditorDetails.PaymentAmount ?? 0) : 0) +
                (editorPaid == (p.SecondaryEditorDetails.DatePaidEditor != null) ? (p.SecondaryEditorDetails.PaymentAmount ?? 0) : 0)
                ) ?? 0;
                var selectedUsersIds = selectedUsers.Select(u => u.Id).ToList();
                var editorTotals = selectedProjects?
                    .SelectMany(p => new[]
                    {
                        new {
                        EditorId = p.PrimaryEditorId,
                        Name = p.PrimaryEditor?.UserName,
                        Hours = p.PrimaryEditorDetails?.FinalBillableHours ?? 0,
                        Payment = p.PrimaryEditorDetails?.PaymentAmount ?? 0,
                        IsPaid = p.PrimaryEditorDetails?.DatePaidEditor != null
                        },
                        new {
                        EditorId = p.SecondaryEditorId,
                        Name = p.SecondaryEditor?.UserName,
                        Hours = p.SecondaryEditorDetails?.FinalBillableHours ?? 0,
                        Payment = p.SecondaryEditorDetails?.PaymentAmount ?? 0,
                        IsPaid = p.SecondaryEditorDetails?.DatePaidEditor != null
                        }
                    })
                    .Where(e => e.EditorId != null && (editorPaid ? e.IsPaid : !e.IsPaid) && (  selectedUsersIds?.Count == 0 || selectedUsersIds.Contains(e.EditorId)))
                    .GroupBy(e => new { e.EditorId, e.Name })
                    .Select(g => new
                    {
                        EditorName = g.Key.Name,
                        TotalHours = g.Sum(e => e.Hours),
                        TotalPayment = g.Sum(e => e.Payment)
                    })
                    .ToList();
                if(editorTotals.Count > 0)
                {
                    <div style="margin-left: 0.8rem; margin-top:10px;">
                        @foreach (var editor in editorTotals)
                        {
                            <li>@editor.EditorName: <span style="color:#b0dfe8">@(Math.Round(editor.TotalHours,1))h</span> <span style="color:#74c85f">@Math.Round(editor.TotalPayment,1)$</span></li>
                        }
                    </div>
                    <div style="border-bottom: solid 1px var(--mud-palette-divider); margin-bottom: 10px; margin-top:10px;" />
                }
                <MudText>
                    Total: <span style="color:#b0dfe8">@(Math.Round(totalHours, 1))h</span> <span style="color:#74c85f"> @(Math.Round(totalPayment,1))$</span>
                </MudText>

            }
            else if(!isAdmin)
            {
                var totalHours = selectedProjects?.Sum(p =>
                (p.PrimaryEditorId == currentUserId && editorPaid == (p.PrimaryEditorDetails.DatePaidEditor != null) ?
                p.PrimaryEditorDetails.FinalBillableHours : 0) +
                (p.SecondaryEditorId == currentUserId && editorPaid == (p.SecondaryEditorDetails.DatePaidEditor != null) ?
                p.SecondaryEditorDetails.FinalBillableHours : 0)
                ) ?? 0;

                var totalPayment = selectedProjects?.Sum(p =>
                (p.PrimaryEditorId == currentUserId && editorPaid == (p.PrimaryEditorDetails.DatePaidEditor != null) ?
                p.PrimaryEditorDetails.PaymentAmount ?? 0 : 0) +
                (p.SecondaryEditorId == currentUserId && editorPaid == (p.SecondaryEditorDetails.DatePaidEditor != null) ?
                p.SecondaryEditorDetails.PaymentAmount ?? 0 : 0)
                ) ?? 0;

                <MudText>
                    Total: <span style="color:#b0dfe8">@(Math.Round(totalHours, 1))h</span> <span style="color:#74c85f"> @(Math.Round(totalPayment,1))$</span>
                </MudText>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color=Color.Error OnClick="Cancel" Style="padding: 5px 36px;" Disabled="Loading">Close</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="Submit" Disabled="Loading">Download</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Inject] private IConfirmationService ConfirmationService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] ISnackbar Snackbar { get; set; } = default!;
    [Inject] private ProjectService projectServices { get; set; } = default!;
    [Inject] private UserManager<ApplicationUser> _userManager { get; set; } = default!;
    [Parameter] public ClaimsPrincipal? CurrentUser { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public bool isEditor { get; set; }
    [Parameter] public bool isAdmin { get; set; }
    [Parameter] public string currentUserId { get; set; }
    bool Loading = false;
    private DateTime? _PrimaryEditorPaymentDate = DateTime.Today;
    private DateTime? _SecondaryEditorPaymentDate = DateTime.Today;
    List<ApplicationUser> _clients = new();
    List<ApplicationUser> _editors = new();
    IEnumerable<ApplicationUser> selectedUsers { get; set; }
    IEnumerable<ProjectStatus> selectedStatuses { get; set; }
    IEnumerable<AdminProjectStatus> selectedPaymentStatuses { get; set; }
    IEnumerable<Project> projects { get; set; }
    IEnumerable<Project> selectedProjects = new List<Project>() ;
    private bool editorPaid = false;
    private bool sentInvoiceStatus = false;
    private DateTime? StartDate;
    private DateTime? EndDate;
    private readonly List<string> Months = Enumerable.Range(1, 12)
    .Select(i => new DateTime(DateTime.Now.Year, i, 1).ToString("MMMM"))
    .ToList();

    private string _viewClient = string.Empty;
    public string ViewClient
    {
        get => _viewClient;
        set
        {
            if (_viewClient != value)
            {
                _viewClient = value;
                selectedUsers = new List<ApplicationUser>(); // Reset selectedUsers when viewClient changes
                GetProjects(); // Call GetProjects to refresh the project list
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _clients = (await _userManager.GetUsersInRoleAsync("Client")).ToList();
        _editors = (await _userManager.GetUsersInRoleAsync("Editor")).ToList();

        if (isAdmin)
        {
            ViewClient = "clients";
        }
        else
        {
            ViewClient = "editors";
        }
    }

    private async Task ShowConfirmation()
    {
        if(selectedProjects == null || selectedProjects.ToList().Count <= 0)
        {
            Snackbar.Add("Please make sure more than 1 project is selected", Severity.Error);
            return;
        }
        var projectNames = selectedProjects.Select(x => x.ProjectName).ToList();

        var grouped = projectNames
            .Select((name, index) => new { name, index })
            .GroupBy(x => x.index / 2)
            .Select(g => string.Join(", ", g.Select(x => x.name)));

        var formattedMessage = string.Join("<br />", grouped);

        var parameters = new DialogParameters
        {
            { "Message", $"Are you sure you want to change these projects status to sent Invoice  <br /> WARNING: THIS IS IRREVERSIBLE. <br /><br /> {formattedMessage}" }
        };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            foreach(var project in selectedProjects)
            {
                project.AdminStatus = AdminProjectStatus.Sent_Invoice;
            }
            await projectServices.UpdateProjectsInBatchAsync(projects, currentUserId);
        }
    }
    private async Task ShowEditorDateDialog()
    {
        if (selectedProjects == null || selectedProjects.ToList().Count <= 0)
        {
            Snackbar.Add("Please make sure more than 1 project is selected", Severity.Error);
            return;
        }
        var projectNames = projects.Select(x => x.ProjectName).ToList();

        var grouped = projectNames
            .Select((name, index) => new { name, index })
            .GroupBy(x => x.index / 2)
            .Select(g => string.Join(", ", g.Select(x => x.name)));

        var formattedMessage = string.Join("<br />", grouped);

        var parameters = new DialogParameters
        {
            { "Message", $"Are you sure you want to change these projects payment date for existing editors?  <br /> WARNING: THIS IS IRREVERSIBLE. <br /><br /> {formattedMessage}" }
        };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirmation", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        foreach (var project in selectedProjects)
        {
            if (project.PrimaryEditorId != null && _PrimaryEditorPaymentDate != null)
            {
                project.PrimaryEditorDetails.DatePaidEditor = DateTime.SpecifyKind(_PrimaryEditorPaymentDate.Value, DateTimeKind.Utc);
            }
            if (project.SecondaryEditor != null && _SecondaryEditorPaymentDate != null)
            {
                project.SecondaryEditorDetails.DatePaidEditor = DateTime.SpecifyKind(_SecondaryEditorPaymentDate.Value, DateTimeKind.Utc);
            }
        }
        await projectServices.UpdateProjectsInBatchAsync(projects, currentUserId);
    }
    private void OnStartDateChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            // Set StartDate to the first day of the selected month
            StartDate = new DateTime(date.Value.Year, date.Value.Month, 1);

            // Ensure EndDate is not earlier than StartDate
            if (EndDate.HasValue && EndDate < StartDate)
            {
                EndDate = StartDate.Value.AddMonths(1).AddDays(-1);
            }
        }
    }

    private void OnEndDateChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            // Set EndDate to the last day of the selected month
            EndDate = new DateTime(date.Value.Year, date.Value.Month, 1)
                .AddMonths(1).AddDays(-1);

            // Ensure StartDate is not after EndDate
            if (StartDate.HasValue && StartDate > EndDate)
            {
                StartDate = new DateTime(EndDate.Value.Year, EndDate.Value.Month, 1);
            }
        }
    }

    private async Task GetProjects()
    {
        using var context = _contextFactory.CreateDbContext();

        var query = context.Projects
        .Include(p => p.Client)
        .Include(p => p.PrimaryEditor)
        .Include(p => p.SecondaryEditor)
        .Include(p => p.PrimaryEditorDetails)
        .Include(p => p.SecondaryEditorDetails)
        .AsQueryable();

        // Filter by selected users (Client ID)
        if (selectedUsers?.Any() == true)
        {
            var selectedUserIds = selectedUsers.Select(u => u.Id)
            .Where(id => id != null).ToList();
            if (ViewClient == "clients" && isAdmin)
            {
                query = query.Where(p => selectedUserIds.Contains(p.ClientId));
            }
            else if(ViewClient == "editors" && isAdmin)
            {
                query = query.Where(p => selectedUserIds.Contains(p.PrimaryEditorId!) || selectedUserIds.Contains(p.SecondaryEditorId!));
            }

        }
        else if (isEditor && (selectedUsers == null || !selectedUsers.Any()))
        {
            query = query.Where(p => p.PrimaryEditorId == currentUserId || p.SecondaryEditorId == currentUserId);
        }

        // Filter by selected ProjectStatus (if any)
        if (selectedStatuses?.Any() == true)
        {
            var selectedStatusValues = selectedStatuses.ToList();
            query = query.Where(p => selectedStatusValues.Contains(p.Status));
        }

        // Filter by AdminProjectStatus (Paid, NotPaid, etc.)
        if (selectedPaymentStatuses?.Any() == true)
        {
            var selectedPaymentStatusValues = selectedPaymentStatuses.ToList();
            query = query.Where(p => selectedPaymentStatusValues.Contains(p.AdminStatus));
        }

        // Filter by WorkingMonth (StartDate and EndDate)
        if (StartDate.HasValue)
        {
            query = query.Where(p => p.WorkingMonth >= StartDate.Value);
        }

        if (EndDate.HasValue)
        {
            query = query.Where(p => p.WorkingMonth < EndDate.Value);
        }
        if (ViewClient == "editors")
        {
            query = query.Where(p =>
                (editorPaid == false ? p.PrimaryEditorDetails.DatePaidEditor == null : p.PrimaryEditorDetails.DatePaidEditor != null) ||
                (editorPaid == false ? p.SecondaryEditorDetails.DatePaidEditor == null : p.SecondaryEditorDetails.DatePaidEditor != null)
            );
        }
        query = query.Where(p => p.IsArchived == false);
        // Execute the query
        projects = await query.ToListAsync();
        selectedProjects = projects;

    }
    private async Task Submit()
    {
        GenerateProjectDTO generateProjectDTO;
        if (ViewClient == "clients")
        {
            await DownloadFilteredAsCsvPayoneer(selectedProjects.ToList());
        }
        else
        {
            var selectedUsersIds = selectedUsers.Select(u => u.Id).ToList();
            generateProjectDTO = new()
                {
                    project = selectedProjects.Where(e =>
                            selectedUsersIds?.Count == 0 ||
                            (e.PrimaryEditorId != null && selectedUsersIds.Contains(e.PrimaryEditorId)) ||
                            (e.SecondaryEditorId != null && selectedUsersIds.Contains(e.SecondaryEditorId))
                        ).ToList(),
                    ViewClient = ViewClient,
                    editorPaid = editorPaid,
                };
            await DownloadFilteredAsCsvEditors(generateProjectDTO.project.ToList(), generateProjectDTO.editorPaid!.Value);
        }
    }

    // Downloading Filtered as CSV for editors
    private async Task DownloadFilteredAsCsvEditors(List<Project> _projects, bool editorPaid)
    {
        try
        {
            if (await ConfirmationService.Confirm("Do you want to download the filtered projects in CSV file?"))
            {
                Loading = true;
                StateHasChanged();
                // Group projects by either PrimaryEditorName or SecondaryEditorName
                if (isAdmin)
                {
                    var groupedByEditor = _projects
                        .SelectMany(p => new[]
                        {
                        new { EditorName = p.PrimaryEditor?.UserName, Project = p },
                        new { EditorName = p.SecondaryEditor?.UserName, Project = p }
                            })
                        .GroupBy(e => e.EditorName)
                        .Where(g => !string.IsNullOrEmpty(g.Key) && g.Key != "N/A") // Filter out groups with empty editor names
                        .ToList();
                    foreach (var editorGroup in groupedByEditor)
                    {
                        var editorName = editorGroup.Key;
                        var projects = editorGroup.Select(e => e.Project).ToList();
                        var csvContent = GenerateCsvContentFilteredForEditors(projects, editorName, editorPaid);
                        var filename = $"{editorName.Replace(" ", "-")}_{DateTime.Now:MM_dd_yyyy}.csv";
                        if (csvContent == string.Empty)
                            continue;
                        await DownloadFile(filename, csvContent);
                    }
                }
                else
                {
                    var filteredProjects = _projects
                        .Where(p => p.PrimaryEditorId == currentUserId || p.SecondaryEditorId == currentUserId)
                        .ToList();
                    if (filteredProjects.Count != 0)
                    {
                        var editorName = CurrentUser?.Identity?.Name;
                        var csvContent = GenerateCsvContentFilteredForEditors(filteredProjects, editorName, editorPaid);
                        var filename = $"{editorName.Replace(" ", "-")}_{DateTime.Now:MM_dd_yyyy}.csv";
                        await DownloadFile(filename, csvContent);
                    }
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            Loading = false;
        }
    }
    private async Task DownloadFilteredAsCsvPayoneer(List<Project> projects)
    {
        if (await ConfirmationService.Confirm("Do you want to download the filtered projects in CSV file?"))
        {
            Loading = true;
            StateHasChanged();
            try
            {
                var csvContent = await GenerateCsvContentFilteredPayoneer(projects);
                var filename = $"PayoneerPaymentBatch-{DateTime.Now:dd_MM_yyyy}.csv";
                await DownloadFile(filename, csvContent);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
            }
            finally
            {
                Loading = false;
            }
        }
    }
    private void Cancel() => MudDialog.Cancel();


    private List<string> SelectedProjectNames => selectedProjects.Select(p => p.ProjectName).ToList();
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Selected Project{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues)}";
    }
    private string GetMultiSelectionTextForStatus(List<string> selectedValues)
    {
        return $"{string.Join(", ", selectedValues).Replace('_',' ')}";
    }
    private static string GenerateCsvContentFilteredForEditors(List<Project> projects, string editorName, bool editorPaid)
    {
        // Create CSV header
        decimal total = 0;
        var csv = new System.Text.StringBuilder();
        csv.AppendLine(string.Join(",",
            nameof(Project.ProjectName),
            "Editor Name",
            "Payment Amount"
        ));

        // Add data rows
        foreach (var project in projects)
        {
            decimal paymentAmount = 0;

            // Check if the editor is Primary or Secondary and assign the PaymentAmount
            if (project?.PrimaryEditor?.UserName == editorName && editorPaid == (project?.PrimaryEditorDetails?.DatePaidEditor != null))
            {
                paymentAmount = project.PrimaryEditorDetails?.PaymentAmount ?? 0;
            }
            else if (project?.SecondaryEditor?.UserName == editorName && editorPaid == (project?.SecondaryEditorDetails?.DatePaidEditor != null))
            {
                paymentAmount = project.SecondaryEditorDetails?.PaymentAmount ?? 0;
            }
            if (paymentAmount == 0)
                continue;
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(project.ProjectName),
                EscapeCsvValue(editorName),
                $"${Math.Round(paymentAmount, MidpointRounding.AwayFromZero)}"

            ));

            total += paymentAmount;
        }

        // Add total
        csv.AppendLine();
        csv.AppendLine(string.Join(",",
            $"Total Payment: ${Math.Round(total, MidpointRounding.AwayFromZero)}",
            $"  Date: {DateTime.Now:dd-MM-yyyy}"
        ));
        if (total == 0)
        {
            return string.Empty;
        }
        return csv.ToString();
    }

    [Inject] private InvoiceService InvoiceService { get; set; } = default!;
    [Inject] private ChatService chatService { get; set; } = default!;
    [Inject] private PayoneerSettingsService PayoneerSettingsService { get; set; } = default!;
    private async Task SentInvoiceToChat()
    {
        Loading = true;

        var projects = selectedProjects.ToList();
        var updatedByUserId = currentUserId;
        // Get unique client IDs from projects
        List<string> clientIds = projects.Select(p => p.ClientId).Distinct().ToList();

        // Get Payoneer settings for all clients
        Dictionary<string, PayoneerSettings> clientSettings = await PayoneerSettingsService.GetSettingsForClientsAsync(clientIds);

        IEnumerable<IGrouping<string, Project>> groupedByClient = projects.GroupBy(p => p.ClientId);

        foreach (var client in groupedByClient)
        {
            var clientName = client.First().Client.UserName;
            Console.WriteLine($"CLIENT NAME IS: {clientName}");
            var clientId = client.First().ClientId;
            if (!clientSettings.TryGetValue(client.Key, out var settings))
            {
                // Skip if no settings found for this client
                Snackbar.Add($"User {clientName} does not have Payoneer settings. We won't be able to generate the invoice file for him.", Severity.Warning);
                continue;
            }
            var messageToSend = await GenerateInvoicePDF(client.ToList(), settings);
            await chatService.AddMessageAsync(clientId, updatedByUserId, messageToSend);
            Snackbar.Add($"Successfully sent invoice to {clientName}.", Severity.Success);
        }
        Loading = false;

    }
    private async Task<string> GenerateCsvContentFilteredPayoneer(List<Project> projects)
    {
        // Get unique client IDs from projects
        List<string> clientIds = projects.Select(p => p.ClientId).Distinct().ToList();

        // Get Payoneer settings for all clients
        Dictionary<string, PayoneerSettings> clientSettings = await PayoneerSettingsService.GetSettingsForClientsAsync(clientIds);

        IEnumerable<IGrouping<string, Project>> groupedByClient = projects.GroupBy(p => p.ClientId);

        var csv = new System.Text.StringBuilder();

        // Payoneer CSV headers
        csv.AppendLine(string.Join(",",
            "Company Name",
            "Company URL",
            "First Name",
            "Last Name",
            "Email",
            "Amount",
            "Currency",
            "Description",
            "Payment Due By"));

        foreach (var client in groupedByClient)
        {
            var clientName = client.First().Client.UserName;
            if (!clientSettings.TryGetValue(client.Key, out var settings))
            {
                // Skip if no settings found for this client
                Snackbar.Add($"User {clientName} does not have Payoneer settings. The CSV won't include his projects!! ", Severity.Warning);
                continue;
            }

            decimal clientTotal = client.Sum(p => p.ClientBillableAmount ?? 0);
            var projectDescription = GenerateProjectDescription(client.ToList(),settings.Currency);
            projectDescription += $"   Total: ${Math.Round(clientTotal, MidpointRounding.AwayFromZero)}";
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(settings.CompanyName!),
                EscapeCsvValue(settings.CompanyUrl ?? ""),
                EscapeCsvValue(settings.FirstName!),
                EscapeCsvValue(settings.LastName!),
                EscapeCsvValue(settings.Email!),
                $"{Math.Round(clientTotal, MidpointRounding.AwayFromZero)}",
                settings.Currency,
               EscapeCsvValue(projectDescription),
                DateTime.Now.AddDays(7).ToString("dd/MM/yyyy")
            ));
        }
        return csv.ToString();
    }
    private string GenerateProjectDescription(List<Project> projects, string currency)
    {
        var projectDescriptions = projects.Select(p => $"{p.ProjectName}: {Math.Round(p.ClientBillableAmount ?? 0, MidpointRounding.AwayFromZero)}").ToList();
        return string.Join(" ", projectDescriptions);
    }
    // This generates the description for the Payoneer CSV by combining the projects and returning the total amount.
    private async Task<string> GenerateInvoicePDF(List<Project> projects, PayoneerSettings? setting)
    {
        if (projects == null || projects.Count == 0)
            return string.Empty;
        var url = "Hello, I hope you are doing great, this is the invoice for the payment request sent on Payoneer \n"; 
        url += await InvoiceService.GenerateInvoicePdfAsync(projects, setting);
        url += "\nPlease download within 120 days as the file will get deleted.";
        return url;
    }
    private static string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        // Escape commas and quotes
        value = value.Replace("\"", "\"\"");
        if (value.Contains(',') || value.Contains('"') || value.Contains('/') || value.Contains('\n'))
        {
            value = $"\"{value}\"";
        }
        return value;
    }
    private async Task DownloadFile(string filename, string content)
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                Convert.ToBase64String(bytes)
            );
            Snackbar.Add($"File has started downloading!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"File save error: {ex.Message}", Severity.Error);
        }
    }
}
