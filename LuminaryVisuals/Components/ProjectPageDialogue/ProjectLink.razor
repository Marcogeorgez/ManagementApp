<MudDialog>
    <DialogContent>
        <LoadingIndicator IsVisible="@loadingIndicator" />

        <MudStack Spacing="4">
            <!-- Preview Toggle -->
            <MudLink Href="@projectFolderPath" Target="_blank">Folder Link</MudLink>

            <div class="d-flex flex-row">
                <MudText Inline="true" Style="align-content:center;"> Is the folder inside Preview Folder?

                </MudText>
                <MudCheckBox T="bool" Label="Yes" Class="ml-5"
                @bind-Value="@project.IsPreview"
                Color="Color.Info" />
            </div>
            <!-- Actions -->
            <MudText >Actions</MudText>
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="4" Class="d-flex align-center">
                    <MudButton Variant="Variant.Outlined"
                    Color="Color.Success"
                    StartIcon="@Icons.Material.Filled.Link" Disabled="isLoading"
                    OnClick="GenerateLink"
                    FullWidth="true"
                    Class="">
                        Generate
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="4" Class="align-center">
                    <MudButton Variant="Variant.Outlined"
                    Color="Color.Info"
                    Disabled="isLoading"
                    OnClick="async () => await MoveFolder(paid)"
                    FullWidth="true"
                    Class="">
                        Move to Paid
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="4" Class="align-center">
                    <MudButton Variant="Variant.Outlined" 
                    Color="Color.Error" Style="text-wrap: nowrap;"
                    Disabled="isLoading"
                    OnClick="async () => await MoveFolder(preview)"
                    FullWidth="true">
                        Move to Preview
                    </MudButton>
                </MudItem>
            </MudGrid>
            <!-- Link Generation -->
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudTextField Label="Project Link" 
                    Variant="Variant.Outlined"
                    @bind-Value="@project.Link"
                    AdornmentText="🔗"
                    AdornmentIcon="@Icons.Material.Filled.Link"
                    AdornmentAriaLabel="Project link"
                    Class="flex-grow-1" />
                </MudItem>

            </MudGrid>
        </MudStack>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Disabled="isLoading" Color="Color.Error" Variant="Variant.Outlined" Class="mr-3" Size="Size.Large">Close</MudButton>
        <MudButton OnClick="@Save" Disabled="isLoading" Color="Color.Info" Variant="Variant.Outlined" Class="mr-3" Size="Size.Large">Save</MudButton>

    </DialogActions>

</MudDialog>
@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter]
    public Project project { get; set; }
    private string? Text = "";
    [Inject] private LoadingService LoadingService { get; set; }
    private bool loadingIndicator;
    bool isLoading;
    [Inject] private DropboxService DropboxService { get; set; }
    private ClientEditingGuidelines? preferences = new();
    [Inject] IDbContextFactory<ApplicationDbContext> DbFactory { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IConfirmationService ConfirmationService { get; set; }

    private string paid = "Paid";
    private string preview = "Preview";
    string? previewPath;
    string? paidPath;
    string? projectDateName;
    string? projectFolderPath; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LoadingService.Subscribe(isVisible =>
            {
                loadingIndicator = isVisible;
                StateHasChanged();
            });

            preferences = await GetPreferences(project.ClientId);
            previewPath = preferences?.PreviewFolderPath;
            paidPath = preferences?.PaidFolderPath;
            projectDateName = $"{project.FormattedShootDate}-{project.ProjectName}";
            if(previewPath != null)
            {
                projectFolderPath = await DropboxService.GetOrCreateSharedLink(RemoveLastSegmentAndAddSlashAtBeginning(previewPath));
            }
            else if (paidPath != null)
            {
                projectFolderPath = await DropboxService.GetOrCreateSharedLink(RemoveLastSegmentAndAddSlashAtBeginning(paidPath));
            }
            else
            {
                projectFolderPath = preferences?.PaidFolderLink;
            }
        }
        catch(ArgumentOutOfRangeException ex) when (ex.ParamName == "path")
        {
            Snackbar.Add("The Preview/Paid folder path is invalid, please check the path in the client editing guidelines", Severity.Error);
        }

    }
    static string RemoveLastSegmentAndAddSlashAtBeginning(string path)
    {
        if (string.IsNullOrWhiteSpace(path))
            return path; 

        int lastSlash = path.LastIndexOf('/');

        if (lastSlash != -1)
            path = path.Substring(0, lastSlash); // Remove last segment

        // Ensure the path starts with '/'
        if (!path.StartsWith("/"))
            path = "/" + path;

        return path;
    }

    private async Task<ClientEditingGuidelines> GetPreferences(string _userId)
    {
        using var context = DbFactory.CreateDbContext();
        if (_userId != null)
        {
            preferences = await context.ClientEditingGuidelines
            .FirstOrDefaultAsync(ceg => ceg.UserId == _userId);
        }
        if (preferences != null)
        {
            return preferences;
        }
        else
        {
            return new ClientEditingGuidelines();
        }
    }
    private async Task MoveFolder(string folder)
    {
        try
        {
            if (isLoading)
            {
                return;
            }
            isLoading = true;
            LoadingService.ShowLoading();
            if (previewPath == null || paidPath == null)
            {
                if (!await ConfirmationService.Confirm($"The project is on the clients Paid folder. By choosing yes it will move it to their preview folder an they won't be able download it anymore!"))
                {
                    return;
                }

                Snackbar.Add("Please set the folder paths in the client editing guidelines first, It's empty!!", Severity.Error);
                return;
            }

            await Task.Delay(10);
            if(folder == "Preview")
            {
                project.IsPreview = true;
                await DropboxService.MoveFolderContentsAsync(paidPath, previewPath, projectDateName);
            }

            if(folder == "Paid")
            {
                project.IsPreview = false;

                if (!await ConfirmationService.Confirm($"Please make sure the client has paid for this project as it will be accessible by them to download. Do you want to proceed?"))
                {
                    return;
                }
                await DropboxService.MoveFolderContentsAsync(previewPath, paidPath, projectDateName);

            }
            Snackbar.Add($"Folder has been moved to {folder} Folder", Severity.Success);

            await GenerateLink();
            

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            LoadingService.HideLoading();
            isLoading = false;
        }
    }
    private async Task GenerateLink()
    {

        try
        {
            isLoading = true;
            LoadingService.ShowLoading();
            await Task.Delay(10);
            if (previewPath == null || paidPath == null)
            {
                Snackbar.Add("Please set the folder paths in the client editing guidelines first, It's empty!!", Severity.Error);
                return;
            }
            if (project.IsPreview == false) // Assume it's in paid folder and enable downloading the link
            {
                project.Link = DropboxService.CreateSharableDownloadLinkAsync($"{paidPath}/{projectDateName}");
                project.IsPreview = false;

            }
            else // If it's in preview folder, enable viewing the link and disable downloading
            {
                project.Link = DropboxService.CreateViewOnlySharableLinkAsync($"{previewPath}/{projectDateName}");
                project.IsPreview = true;
            }
            Snackbar.Add("Link Generated", Severity.Success);

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            LoadingService.HideLoading();
            isLoading = false;
        }

    }
    private async Task Save()
    {

        MudDialog.Close(DialogResult.Ok(project));
    }
    private void Cancel()
    {
        MudDialog.Cancel(); // Close without saving
    }

}
