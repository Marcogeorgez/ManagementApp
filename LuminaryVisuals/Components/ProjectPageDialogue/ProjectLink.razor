<MudDialog>
    <DialogContent>
        <LoadingIndicator IsVisible="@loadingIndicator" />

        <MudStack Spacing="4">
            <!-- Preview Toggle -->
            <MudCheckBox T="bool?" Label="Preview Mode" 
            TriState="true" @bind-Value="@project.IsPreview"
            Color="Color.Info" Class="mb-2" />

            <!-- Movement Options -->
            <MudRadioGroup @bind-Value="@MoveAction" Name="Transfer Options:" Class="mb-2" >
                <MudRadio Value="@MoveOption.None">Don't Move</MudRadio>
                <MudRadio Value="@MoveOption.ToPaid"  Disabled="@(project.IsPreview == false)">Preview → Paid</MudRadio>
                <MudRadio Value="@MoveOption.ToPreview" Disabled="@(project.IsPreview == true)">Paid → Preview</MudRadio>
            </MudRadioGroup>

            <!-- Link Generation -->
            <MudGrid>
                <MudItem xs="12" sm="8">
                    <MudTextField Label="Project Link" 
                    Variant="Variant.Outlined"
                    @bind-Value="@project.Link"
                    AdornmentText="@((project.IsPreview ?? false) ? "🔗" : "")"
                    AdornmentIcon="@((project.IsPreview ?? false) ? Icons.Material.Filled.Link : null)"
                    AdornmentAriaLabel="Project link"
                    Class="flex-grow-1" />
                </MudItem>
                <MudItem xs="12" sm="4" Class="d-flex align-center">
                    <MudButton Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    StartIcon="@Icons.Material.Filled.Link"
                    OnClick="GenerateLink"
                    FullWidth="true"
                    Class="ml-2">
                        Generate
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudStack>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel" Color="Color.Error" Variant="Variant.Outlined" Class="mr-3" Size="Size.Large">Close</MudButton>
        <MudButton OnClick="@Save" Color="Color.Info" Variant="Variant.Outlined" Class="mr-3" Size="Size.Large">Save</MudButton>

    </DialogActions>

</MudDialog>
@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    enum MoveOption { None, ToPaid, ToPreview }
    MoveOption MoveAction { get; set; } = MoveOption.None;
    [Parameter]
    public Project project { get; set; }
    private string? Text = "";
    [Inject] private LoadingService LoadingService { get; set; }
    private bool loadingIndicator;
    [Inject] private DropboxService DropboxService { get; set; }
    private ClientEditingGuidelines? preferences = new();
    [Inject] IDbContextFactory<ApplicationDbContext> DbFactory { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    protected override async Task OnInitializedAsync()
    {
        LoadingService.Subscribe(isVisible =>
        {
            loadingIndicator = isVisible;
            StateHasChanged();
        });

        preferences = await GetPreferences(project.ClientId);
    }

    private async Task<ClientEditingGuidelines> GetPreferences(string _userId)
    {
        using var context = DbFactory.CreateDbContext();
        if (_userId != null)
        {
            preferences = await context.ClientEditingGuidelines
            .FirstOrDefaultAsync(ceg => ceg.UserId == _userId);
        }
        if (preferences != null)
        {
            return preferences;
        }
        else
        {
            return new ClientEditingGuidelines();
        }
    }
    private async Task GenerateLink()
    {

        LoadingService.ShowLoading();
        try
        {
            string previewPath = preferences.PreviewFolderPath;
            string paidPath = preferences.PaidFolderPath;
            string projectName = $"{project.FormattedShootDate}-{project.ProjectName}";

            // MoveAction will decide if move the folder contents from Preview to Paid or Paid To Preview or do nothing.
            if (MoveAction == MoveOption.ToPaid)
            {
                DropboxService.MoveFolderContentsAsync(previewPath, paidPath);
                project.IsPreview = false;

            }
            else if (MoveAction == MoveOption.ToPreview)
            {
                DropboxService.MoveFolderContentsAsync(paidPath, previewPath);
                project.IsPreview = true;
            }
            if (project.IsPreview == null || project.IsPreview == false) // Assume it's in paid folder and enable downloading the link
            {
                project.Link = DropboxService.CreateSharableDownloadLinkAsync($"{paidPath}/{projectName}");
                project.IsPreview = false;

            }
            else // If it's in preview folder, enable viewing the link and disable downloading
            {
                project.Link = DropboxService.CreateViewOnlySharableLinkAsync($"{previewPath}/{projectName}");
                project.IsPreview = true;
            }
            Snackbar.Add("Link Generated", Severity.Success);

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    LoadingService.HideLoading();

    }
    private async Task Save()
    {

        MudDialog.Close(DialogResult.Ok(project));
    }
    private void Cancel()
    {
        MudDialog.Cancel(); // Close without saving
    }

}
