<MudDialog>
    <DialogContent>
        <MudGrid Class="mt-5" Style="flex-direction:column;" >
            <MudTextField Label="Project Name" Variant="Variant.Outlined" T="string" Value="@project.ProjectName" ReadOnly="true" />
            <MudTextField Label="Client Name" Variant="Variant.Outlined" T="string" Value="@project.Client.UserName" ReadOnly="true" />

            <MudTextField Label="Shoot Date" Variant="Variant.Outlined" T="DateTime?" Value="@project.ShootDate" ReadOnly="true" />
            <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
            Class="d-flex justify-center mud-width-full" Variant="Variant.Outlined" Label="Primary Editor" ReadOnly="!isAdmin"
            ValueChanged="@(async value => {
                           if (value == null) {
                               var result = await dialogService.ShowMessageBox(
                                   "Confirm Unassign",
                                   "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED.",
                                   yesText: "Unassign",
                                   cancelText: "Cancel"
                               );
                               if (result == true)
                                   project.PrimaryEditorId = value;
                           }
                           else {
                               project.PrimaryEditorId = value;
                           }
                       })"
            Value="@project.PrimaryEditorId">
                <MudSelectItem Class="" T="string" Value="null"> 
                    Unassign Editor
                </MudSelectItem>
                @foreach (var editor in Editors)
                {
                    <MudSelectItem Class="" T="string" Value="@editor.Id">
                        @editor.UserName
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
            Class="d-flex justify-center mud-width-full" Variant="Variant.Outlined" Label="Secondary Editor" ReadOnly="!isAdmin"
            ValueChanged="@(async value => {
                           if (value == null) {
                               var result = await dialogService.ShowMessageBox(
                                   "Confirm Unassign",
                                   "Are you sure you want to unassign the editor? HIS LOGGED HOURS WILL BE DELETED.",
                                   yesText: "Unassign",
                                   cancelText: "Cancel"
                               );
                               if (result == true)
                                   project.SecondaryEditorId = value;
                           }
                           else {
                               project.SecondaryEditorId = value;
                           }
                       })"
            Value="@project.SecondaryEditorId">
                <MudSelectItem Class="" T="string" Value="null">
                    Unassign Editor
                </MudSelectItem>
                @foreach (var editor in Editors)
                {
                    <MudSelectItem Class="" T="string" Value="@editor.Id">
                        @editor.UserName
                    </MudSelectItem>
                }
            </MudSelect>

            <MudDatePicker Label="Due Date"
            Variant="Variant.Outlined"
            Date="@project.DueDate"
            DateChanged="@(date => project.DueDate = date.Value)"
            Class="" ReadOnly="!isAdmin"
            Required="false" />
            <MudCheckBox Label="Mark as Urgent" @bind-Value="@project.IsUrgent" Class="mb-1" Style="@(!isAdmin ? "display:none;" : "" )" ReadOnly="!isAdmin"/>
            <MudDateRangePicker @bind-DateRange="@project.Range" Margin="Margin.Dense" Clearable="true" 
            PlaceholderStart="Start Date" PlaceholderEnd="End Date" Label="Date Range"Variant="Variant.Outlined" />
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color=Color.Error Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Project project { get; set; } = new();
    [Parameter] public bool isAdmin { get; set; }
    public List<ApplicationUser>? Editors { get; set; } = new();
    [Inject] IDialogService dialogService { get; set; } = default!;
    [Inject] UserManager<ApplicationUser> _userManager { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        Editors = (await _userManager.GetUsersInRoleAsync("Editor")).ToList();

    }
    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(project));
    }

    private void Cancel() => MudDialog.Cancel();

 
}
