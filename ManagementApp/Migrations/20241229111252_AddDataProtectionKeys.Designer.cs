// <auto-generated />
using System;
using ManagementApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ManagementApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241229111252_AddDataProtectionKeys")]
    partial class AddDataProtectionKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManagementApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("WeeksToDueDateDefault")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Archive", b =>
                {
                    b.Property<int>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArchiveId"));

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Archives", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.CalculationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculationParameterId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalculationParameterId");

                    b.ToTable("CalculationOption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculationParameterId = 1,
                            Multiplier = 0.9m,
                            OptionName = "Straight Forward Linear, little mixing"
                        },
                        new
                        {
                            Id = 2,
                            CalculationParameterId = 1,
                            Multiplier = 1m,
                            OptionName = "Hybrid Mostly Linear"
                        },
                        new
                        {
                            Id = 3,
                            CalculationParameterId = 1,
                            Multiplier = 1.2m,
                            OptionName = "Movie with heavy SFX + VFX"
                        },
                        new
                        {
                            Id = 4,
                            CalculationParameterId = 2,
                            Multiplier = 1m,
                            OptionName = "0%"
                        },
                        new
                        {
                            Id = 5,
                            CalculationParameterId = 2,
                            Multiplier = 0.95m,
                            OptionName = "30%"
                        },
                        new
                        {
                            Id = 6,
                            CalculationParameterId = 2,
                            Multiplier = 0.85m,
                            OptionName = "60%"
                        },
                        new
                        {
                            Id = 7,
                            CalculationParameterId = 2,
                            Multiplier = 0.7m,
                            OptionName = "100%"
                        },
                        new
                        {
                            Id = 8,
                            CalculationParameterId = 3,
                            Multiplier = 1m,
                            OptionName = "1080p"
                        },
                        new
                        {
                            Id = 9,
                            CalculationParameterId = 3,
                            Multiplier = 1.05m,
                            OptionName = "Mixed"
                        },
                        new
                        {
                            Id = 10,
                            CalculationParameterId = 3,
                            Multiplier = 1.1m,
                            OptionName = "4k"
                        },
                        new
                        {
                            Id = 11,
                            CalculationParameterId = 4,
                            Multiplier = 1.15m,
                            OptionName = "Needs work"
                        },
                        new
                        {
                            Id = 12,
                            CalculationParameterId = 4,
                            Multiplier = 1.05m,
                            OptionName = "Mostly good"
                        },
                        new
                        {
                            Id = 13,
                            CalculationParameterId = 4,
                            Multiplier = 1m,
                            OptionName = "Great"
                        },
                        new
                        {
                            Id = 14,
                            CalculationParameterId = 4,
                            Multiplier = 0.9m,
                            OptionName = "Excellent"
                        });
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.CalculationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DefaultValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CalculationParameter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultValue = 1.0m,
                            Description = "Highlights Difficulty ",
                            Name = "HighlightsDifficulty",
                            ParameterType = "Option"
                        },
                        new
                        {
                            Id = 2,
                            DefaultValue = 1.0m,
                            Description = "Pre-Parts Percentage",
                            Name = "PrePartsPercentage",
                            ParameterType = "Option"
                        },
                        new
                        {
                            Id = 3,
                            DefaultValue = 1.0m,
                            Description = "Resolution of video",
                            Name = "Resolution",
                            ParameterType = "Option"
                        },
                        new
                        {
                            Id = 4,
                            DefaultValue = 1.0m,
                            Description = "Quality of Footage",
                            Name = "FootageQuality",
                            ParameterType = "Option"
                        },
                        new
                        {
                            Id = 5,
                            DefaultValue = 0.3m,
                            Description = "Multiplier for camera when there exist more than 2",
                            Name = "CameraMulti",
                            ParameterType = "Decimal"
                        },
                        new
                        {
                            Id = 6,
                            DefaultValue = 0.4m,
                            Description = "Multiplier for raw footage size when bigger than 300gb",
                            Name = "SizeMulti",
                            ParameterType = "Decimal"
                        });
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.ChatReadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReadTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("MessageId", "UserId")
                        .IsUnique();

                    b.ToTable("ChatReadStatus");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.ClientEditingGuidelines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlackAndWhite")
                        .HasColumnType("text");

                    b.Property<string>("ClientSamples")
                        .HasColumnType("text");

                    b.Property<string>("ColorReferences")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrossFades")
                        .HasColumnType("text");

                    b.Property<string>("DoubleExposure")
                        .HasColumnType("text");

                    b.Property<string>("FadeToBlack")
                        .HasColumnType("text");

                    b.Property<string>("FilmReferences")
                        .HasColumnType("text");

                    b.Property<string>("LensFlares")
                        .HasColumnType("text");

                    b.Property<string>("MaskingTransitions")
                        .HasColumnType("text");

                    b.Property<string>("OldFilmLook")
                        .HasColumnType("text");

                    b.Property<string>("OtherTransitions")
                        .HasColumnType("text");

                    b.Property<string>("PictureInPicture")
                        .HasColumnType("text");

                    b.Property<string>("SongSamples")
                        .HasColumnType("text");

                    b.Property<string>("SoundDesignComments")
                        .HasColumnType("text");

                    b.Property<string>("SoundDesignEmphasis")
                        .HasColumnType("text");

                    b.Property<string>("SpeechComments")
                        .HasColumnType("text");

                    b.Property<string>("TransitionComments")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UseSpeeches")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VideoStructure")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("text");

                    b.Property<string>("musicLicensingSites")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientEditingGuidelines", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.DataProtectionKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.EditorLoggingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("EditorWorkingHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId", "ProjectId", "Date")
                        .IsUnique();

                    b.ToTable("EditorLoggingHours");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.MigratedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoogleProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MigrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GoogleProviderKey")
                        .IsUnique();

                    b.ToTable("MigratedUsers");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Revision", b =>
                {
                    b.Property<int>("RevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RevisionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RevisionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Revisions");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ConversionRateUSToLek")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.UserNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetUserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("UserNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("AdminStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ClientBillableAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ClientBillableHours")
                        .HasColumnType("numeric");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Deliverables")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("ExternalOrder")
                        .HasColumnType("integer");

                    b.Property<string>("FootageLink")
                        .HasColumnType("text");

                    b.Property<int?>("InternalOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaymentVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrgentDueDate")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("MusicPreference")
                        .HasColumnType("text");

                    b.Property<string>("NotesForProject")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryEditorId")
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProgressBar")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SecondaryEditorId")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ShootDate")
                        .HasColumnType("DATE");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WorkingMonth")
                        .HasColumnType("DATE");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PrimaryEditorId");

                    b.HasIndex("SecondaryEditorId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Archive", b =>
                {
                    b.HasOne("Project", "Project")
                        .WithOne("Archive")
                        .HasForeignKey("ManagementApp.Data.Entities.Archive", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.CalculationOption", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.CalculationParameter", null)
                        .WithMany("Options")
                        .HasForeignKey("CalculationParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Chat", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany("Chats")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Project", "Project")
                        .WithOne("Chat")
                        .HasForeignKey("ManagementApp.Data.Entities.Chat", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.ChatReadStatus", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.Message", "Message")
                        .WithMany("ChatReadStatuses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.ClientEditingGuidelines", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.EditorLoggingHours", b =>
                {
                    b.HasOne("Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Message", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Revision", b =>
                {
                    b.HasOne("Project", "Project")
                        .WithMany("Revisions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Setting", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.UserNote", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany("CreatedNotes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "PrimaryEditor")
                        .WithMany()
                        .HasForeignKey("PrimaryEditorId");

                    b.HasOne("ManagementApp.Data.Entities.ApplicationUser", "SecondaryEditor")
                        .WithMany()
                        .HasForeignKey("SecondaryEditorId");

                    b.OwnsOne("ManagementApp.Models.ProjectCalculationDetails", "CalculationDetails", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("integer");

                            b1.Property<string>("CameraNumber")
                                .HasColumnType("text");

                            b1.Property<decimal?>("ClientDiscount")
                                .HasColumnType("numeric");

                            b1.Property<string>("DocumentaryMulticameraDuration")
                                .HasColumnType("text");

                            b1.Property<string>("DocumentaryMulticameraDurationHours")
                                .HasColumnType("text");

                            b1.Property<decimal?>("FinalProjectBillableHours")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("FootageQuality")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("FootageSize")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("HighlightsDifficulty")
                                .HasColumnType("numeric");

                            b1.Property<string>("HighlightsDuration")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Misc")
                                .HasColumnType("numeric");

                            b1.Property<string>("PrePartsDuration")
                                .HasColumnType("text");

                            b1.Property<decimal?>("PrePartsPrecentage")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Resolution")
                                .HasColumnType("numeric");

                            b1.Property<string>("SocialMediaDuration")
                                .HasColumnType("text");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("ManagementApp.Models.ProjectSpecifications", "ProjectSpecifications", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("integer");

                            b1.Property<string>("AudioDetails")
                                .HasColumnType("text");

                            b1.Property<string>("CameraNumber")
                                .HasColumnType("text");

                            b1.Property<string>("ColorProfile")
                                .HasColumnType("text");

                            b1.Property<string>("Resolution")
                                .HasColumnType("text");

                            b1.Property<string>("Size")
                                .HasColumnType("text");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("ManagementApp.Models.EditorDetails", "PrimaryEditorDetails", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("AdjustmentHours")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("BillableHours")
                                .HasColumnType("numeric");

                            b1.Property<DateTime?>("DatePaidEditor")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal?>("FinalBillableHours")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Overtime")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PaymentAmount")
                                .HasColumnType("numeric");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("ManagementApp.Models.EditorDetails", "SecondaryEditorDetails", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("AdjustmentHours")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("BillableHours")
                                .HasColumnType("numeric");

                            b1.Property<DateTime?>("DatePaidEditor")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal?>("FinalBillableHours")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Overtime")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PaymentAmount")
                                .HasColumnType("numeric");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("CalculationDetails")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("PrimaryEditor");

                    b.Navigation("PrimaryEditorDetails")
                        .IsRequired();

                    b.Navigation("ProjectSpecifications")
                        .IsRequired();

                    b.Navigation("SecondaryEditor");

                    b.Navigation("SecondaryEditorDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("CreatedNotes");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.CalculationParameter", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ManagementApp.Data.Entities.Message", b =>
                {
                    b.Navigation("ChatReadStatuses");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Archive")
                        .IsRequired();

                    b.Navigation("Chat")
                        .IsRequired();

                    b.Navigation("Revisions");
                });
#pragma warning restore 612, 618
        }
    }
}
