@inject IDialogService dialogService
<MudDialog>
    <DialogContent>
        @if (Editors != null && Editors.Any())
        {
            <MudMessageBox @ref="_confirmUnassignDialog" 
                           CancelText="Cancel" YesText="Unassign">
                <TitleContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Class="mr-2" />
                        <MudText Color="Color.Error">Confirm Removal of Secondary Editor</MudText>
                    </div>
                </TitleContent>
                <MessageContent>
                    Are you sure you want to unassign the Secondary Editor? All of his logged hours will be <b style="color: #d22525;">DELETED</b>.
                </MessageContent>
            </MudMessageBox>

            <MudSelect T="string" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                       Class="d-flex justify-center mud-width-full py-2" Variant="Variant.Outlined" Label="Secondary Editor"
                       ValueChanged="@HandleEditorSelectionChanged"
                       Value="@SecondaryEditorId">
                <MudSelectItem Class="" T="string" Value="null">
                    Unassign Editor
                </MudSelectItem>
                @foreach (var editor in Editors)
                {
                    <MudSelectItem Class="" T="string" Value="@editor.UserId">
                        @editor.UserName
                    </MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <MudText Style="display:none;" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color=Color.Error OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string? SecondaryEditorId { get; set; }
    [Parameter] public List<UserRoleViewModel.UserProjectViewModel>? Editors { get; set; }
    private MudMessageBox _confirmUnassignDialog;
    private string _tempSelectedValue;

    private async Task HandleEditorSelectionChanged(string value)
    {
        if (value == null)
        {
            _tempSelectedValue = value;
            var result = await _confirmUnassignDialog.ShowAsync();
            if (result == true)
            {
                SecondaryEditorId = _tempSelectedValue;
            }
        }
        else
        {
            SecondaryEditorId = value;
        }
    }
    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(SecondaryEditorId));
    }

    private void Cancel() => MudDialog.Cancel();


}
