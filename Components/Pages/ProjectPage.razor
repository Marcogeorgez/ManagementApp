@page "/project"
@inject ProjectService ProjectService
@inject ISnackbar Snackbar
@inject IDialogService DialogService



<MudDataGrid T="Project" Items="@projects" SortMode="SortMode.Single"
    Dense=false Hover="true" Bordered=true 
    QuickFilter="new Func<Project,bool>(FilterFunc1)">
    <ToolBarContent>
            <MudText Typo="Typo.h6">Your Projects</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search"
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0" Clearable="true" Immediate="true" />
    </ToolBarContent>
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
            <col style="width: 1%;" />
            <col style="width: 10%;" />
            <col style="width: 15%;" />
            <col style="width: 5%;" />
            <col style="width: 5%;" />
            <col style="width: 5%;" />
            <col style="width: 1%;" />
            <col style="width: stretch;" />
            <col style="width: 5%;" /> 
            @if (_isArchived)
            {
                <col style="width: 10px;" />
            }        
        </MudHidden>
    </ColGroup>
    <Columns>
            <PropertyColumn Property="x => x.ProjectId" Title="Id" Sortable="false" Filterable="false"  />
            <PropertyColumn Property="x => x.ProjectName" Title="Project Name" />
            <PropertyColumn Property="x => x.Description" Title="Project Description" />
            <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" >
                <CellTemplate>
                    <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Class="my-0" />
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" />
            <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" />
            <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" />
            <PropertyColumn Property="x => x.Status" Title="Status" CellStyleFunc="@_cellStyleFunc" />
            <TemplateColumn CellClass="" Title="Actions">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Small"
                                   OnClick="@(() => DeleteDialog(context.Item))"
                           StartIcon="@Icons.Material.Filled.Delete">
                            Delete
                        </MudButton>
                        @if (_isArchived)
                        {
                            <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(_closeButton, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                @(context.Item.IsArchived ? "Unarchive" : "Archive")
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Warning"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => ArchiveProject(_closeButton, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                Archive
                            </MudButton>
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            @if (_isArchived)
            {
            <PropertyColumn Property="x => x.IsArchived" Title="Archive" />
            }
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Project"/>
    </PagerContent>
</MudDataGrid>
<MudStack Row="true">
    <MudSwitch T="bool" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
</MudStack>

    <div class="mb-4">
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   OnClick="@(() => AddProjectDialogAsync(_closeButton))">
            Add New Project
        </MudButton>
    </div>

@code {
    private IEnumerable<Project> projects = new List<Project>();
    private Project projectToDelete;
    private readonly DialogOptions _closeButton = new() { CloseButton = true, FullScreen = true };
    private bool _isArchived = false;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }
    private async Task ArchivedToggle()
    {
        _isArchived = !_isArchived;
        await LoadProjects();
    }
    private async Task LoadProjects()
    {
        projects = await ProjectService.GetProjectsAsync(_isArchived);
        StateHasChanged();
    }

    private async Task AddProjectDialogAsync(DialogOptions options)
    {
        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            await ProjectService.AddProjectAsync(newProject);
            LoadProjects();
        }
    }
    public async Task ArchiveProject(DialogOptions options,Project project)
    {
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var archivedProject = (string)result.Data;
            if(archivedProject != null)
            {
                await ProjectService.ArchiveProjectAsync(project.ProjectId, archivedProject);
                LoadProjects();
            }
        }
    }
    private async Task UnarchiveProject(Project project)
    {
        await ProjectService.UnarchiveProjectAsync(project.ProjectId);
        await LoadProjects();
    }

    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        var parameters = new DialogParameters
        {
            {"Message", $"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"}
        };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirmation",parameters);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            return;
        }
        await ProjectService.DeleteProjectAsync(projectToDelete.ProjectId);
        LoadProjects();
        StateHasChanged();
    }
    private async Task DeleteProject(int projectId)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(projectId);
            await LoadProjects();
            Snackbar.Add("Project deleted successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting project: {ex.Message}", Severity.Error);
        }
        StateHasChanged();
    }
    private bool FilterFunc1(Project project) => FilterFunc(project, _searchString);
    private bool FilterFunc(Project project, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (project.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (project.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private Func<Project, string> _cellStyleFunc => x =>
    {
        string style = string.Empty;

        switch (x.Status)
        {
            case ProjectStatus.Upcoming:
                style += "background-color: var(--mud-palette-info-lighten);"; // Using CSS variables for theming
                break;

            case ProjectStatus.Scheduled:
                style += "background-color: var(--mud-palette-gray-dark);";
                break;
            case ProjectStatus.Revision:
                style += "background-color: rgb(255,102,153);";
                break;


            case ProjectStatus.Working:
                style += "background-color: var(--mud-palette-info-darken);";
                break;

            case ProjectStatus.Delivered:
                style += "background-color:  rgb(9,154,108);";
                break;

            case ProjectStatus.Paid:
                style += "background-color: var(--mud-palette-success-darken);";
                break;

            default:
                style += "background-color: transparent;";
                break;
        }
        style += "color: rgba(255,255,255,1); text-align: center";

        return style;
    };
}
