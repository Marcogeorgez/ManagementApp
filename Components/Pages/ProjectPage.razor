@page "/project"
@inject ProjectService ProjectService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject UserServices UserServices
<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    <MudTabPanel Text="Project Management System">
<MudDataGrid T="Project" Items="@projects" SortMode="SortMode.Single" 
    Dense=true Hover="true" Bordered=true 
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
    ApplyDropClassesOnDragStarted="true"
    DragDropColumnReordering=true
    ColumnsPanelReordering=true
    Groupable=true
    ShowMenuIcon=true
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.Manual"
    ReadOnly=false
    DragIndicatorSize="Size.Small"
    StartedEditingItem="@StartedEditingItem" 
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges">

    <ToolBarContent>
            <MudText Typo="Typo.h6">Your @_userName Projects</MudText>
            <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
        </MudHidden>
    </ColGroup>
    <Columns>
        @if (RoleBasedColumns[_currentRole].Contains("Id"))
        {
            <PropertyColumn Property="x => x.ProjectId" Title="Id" Sortable="false" Filterable="false" DragAndDropEnabled="false" Groupable="false" Editable=false >
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
        {
                    <PropertyColumn Property="x => x.ProjectName" Title="Project Name" DragAndDropEnabled="false" Groupable="false" Editable=false />
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientName"))
        {
                    <PropertyColumn Property="x => x.ClientName" Title="Client Name" Grouping="_groupByClientName" Hideable="true" Groupable="true" Editable=false Required=false >
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                        </GroupTemplate>
                    </PropertyColumn>
        }
                @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
        {
                    <PropertyColumn Property="x => x.PrimaryEditorName" Title="Primary Editor" Hideable="true" Groupable="true" Editable=false Required=false >
                    <GroupTemplate> 
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                    </GroupTemplate>    
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
        {
                    <PropertyColumn Property="x => x.SecondaryEditorName" Title="2nd Editor" Hideable="true" Groupable="false" Editable=false Required=false />
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectDescription"))
        {
                    <PropertyColumn Property="x => x.Description" Title="Project Description" Hideable="true" Groupable="false" CellStyle="max-width:70vw;min-width:20vw;" Editable=false Required=false>
                <CellTemplate >
                    @{
                        string descriptionValue = context.Item.Description ?? string.Empty;
                    }
                    <MudTextField T="string"
                        HelperText="Click to expand"
                        Value="@(UserRoleViewModel.StripHtmlTags(descriptionValue))" 
                        ReadOnly="true"
                        Immediate="true" Adornment="Adornment.End" 
                        AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                        AutoGrow=true
                        MaxLines="4"
                        OnAdornmentClick="@(() => OpenDescriptionDialog(descriptionValue, context.Item))">
                            <MudTooltip Text="Expand">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInFull"/>
                            </MudTooltip>
                    </MudTextField>                    
                    </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
            </PropertyColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
        {
            <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle="width: 2vw; min-width:1vw;"> 
                <CellTemplate>
                    <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                </CellTemplate>

                <EditTemplate Context="context">
                            @if (!_isClientView)
                            {
                                <MudSelect T="ProgressBarValue" Label
                                ="Progress" Class
                                ="mt-3" 
                                Value="@((ProgressBarValue)context.Item.ProgressBar)"
                Variant="Variant.Outlined"
                ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                </MudSelect>            
                }
                </EditTemplate>

            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
        {
            <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" Groupable="true">
                        <EditTemplate Context="context">
                            @* If changed from here I will later need of a way to change due date*@
                            <MudDatePicker Label="Shoot Date"
                                           Variant="Variant.Outlined"
                                           Date="@context.Item.ShootDate"
                                           DateChanged="@(date => context.Item.ShootDate = date)"
                                           Class="mt-3"
                                           Required="true" />
                        </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
        {
            <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" Groupable="true" >
                        <EditTemplate>
                            <MudDatePicker Label="Due Date"
                                           Variant="Variant.Outlined"
                                           Class="mt-3"
                                           Date="@context.Item.DueDate"
                                           DateChanged="@(date => context.Item.DueDate = date)"
                                           Required="true" />
                        </EditTemplate>
            </PropertyColumn>

        }

        @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
        {
            <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true" Groupable="true" >
                <EditTemplate Context="context">
                    <MudDatePicker Required="true"
                        Label="Working Month"
                        Variant="Variant.Outlined"
                        Class="mt-3"
                        FixDay="1"
                        DateFormat="yyyy/MM"
                        Date="@context.Item.WorkingMonth"
                        DateChanged="@(date => context.Item.WorkingMonth = date)" />
                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("Status"))
        {
            
            <PropertyColumn Property="x => x.FormatStatus" Title="Status" CellStyleFunc="@_cellStyleFunc" Hideable="true" Groupable="true">
                <EditTemplate Context="context">
                            <MudSelect T="ProjectStatus" Class="mt-3"
                                       Variant="Variant.Outlined"
                                       Label="Status"
                                       @bind-Value="context.Item.Status"
                                       Required="true">
                                @if(!_isClientView){
                                @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                {
                                    <MudSelectItem Value="@status">@status</MudSelectItem>
                                }
                                }
                                else{
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                                }
                            </MudSelect>
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                </GroupTemplate>
                        </PropertyColumn>
                    
                }
        @if (RoleBasedColumns[_currentRole].Contains("Actions"))
        {
            <TemplateColumn CellClass="" Title="Actions" Hideable="true" Groupable="false" >
                <CellTemplate>
                    <MudStack Row>
                        @if (_isArchived && _isAdminView)
                        {
                            <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(DialogOptions, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                @(context.Item.IsArchived ? "Unarchive" : "Archive")
                            </MudButton>
                            <MudButton Color="Color.Error"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => DeleteDialog(context.Item))"
                                       StartIcon="@Icons.Material.Filled.Delete">
                                Delete
                            </MudButton>
                        }
                        else if(!_isArchived && _isAdminView)
                        {
                            <MudButton Color="Color.Warning"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => ArchiveProject(DialogOptions, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                Archive
                            </MudButton>
                        }
                        else if (_isClientView)
                        {
                            <MudButton Color="Color.Info"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => AddProjectDialogAsync(DialogOptions))"
                                       StartIcon="@Icons.Material.Filled.Archive"
                                       Class="ml-2">
                                Modify
                            </MudButton>
                        }
                    </MudStack>             
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("Archive"))
        {
            @if (_isArchived)
                {
                    <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" />
                }
        }
        
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Project"/>
    </PagerContent>
</MudDataGrid>
<MudStack Spacing="0">
    <MudSwitch T="bool" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
@*             <MudSwitch T="bool" Value="@_groupByClientName" ValueChanged="" Color="Color.Info">Group By Client Name</MudSwitch>
 *@
    <MudStack Row=true>
    <MudSwitch T="bool" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin View</MudSwitch>
    <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor View</MudSwitch>
    <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client View</MudSwitch>
    </MudStack>
</MudStack>
<div class="mb-4">
@if(_isAdminView || _isEditorView){
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   OnClick="@(() => AddProjectDialogAsync(DialogOptions))">
            Add New Project
        </MudButton>
}
else if (_isClientView)
{
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       OnClick="@(() => CreateProjectDialogAsync(DialogOptions))">
                Create New Project
            </MudButton>
}

    <MudButton Class="ml-2"
        Color="Color.Success"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.AddCircle"
               OnClick="@(() => AssignUsersToProjectAsync(DialogOptions))">
        Assign To Project
    </MudButton>
    </div>
    </MudTabPanel>
    @if (RoleBasedColumns[_currentRole].Contains("Tabs"))
    {
        <MudTabPanel Text
        ="Tracking System">



    </MudTabPanel>
    }
</MudTabs>

@code {
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private IEnumerable<Project> projects = new List<Project>();
    private Project projectToDelete;
    private readonly DialogOptions DialogOptions = new() { CloseButton = true, FullScreen = true };
    private bool _isArchived;
    private bool _isAdminView;
    private bool _isEditorView;
    private bool _isClientView;
    private bool _groupByClientName;
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string CurrentRole => _isAdminView ? "Admin" :
                          _isEditorView ? "Editor" : "Client";
    private enum ProgressBarValue
    {
        Zero = 0,
        Twenty = 20,
        Forty = 40,
        Sixty = 60,
        Eighty = 80,
        Hundred = 100
    }

    protected override async Task OnInitializedAsync()
    {
        AdminToggle();
        // Get the current user ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        _currentUserId = currentUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
    }
    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "Tabs", "Id", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status", "Actions","Archive" } },
        { "Editor", new List<string> { "Id", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status" } },
        { "Client", new List<string> { "Id", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "Status","Actions" } }
    };

    private async Task ArchivedToggle()
    {
        _isArchived = !_isArchived;
        await LoadProjects();
    }
    private async Task AdminToggle()
    {
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
        StateHasChanged();

    }
    private async Task EditorToggle()
    {
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        StateHasChanged();
        // await LoadProjectsForEditor(context.UserId)
    }
    private async Task ClientToggle()
    {
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjects();
        StateHasChanged();


    }
    //  Load project for admin/editor view only (will later be split )
    private async Task LoadProjects()
    {
        if (_isAdminView || _isEditorView)
            projects = await ProjectService.GetProjectsAsync(_isArchived);
        else if (_isClientView)
            LoadProjectsForClient();
        StateHasChanged();
    }
    // Loading Projects for Client View
    private async Task LoadProjectsForClient()
    {
        projects = await ProjectService.GetProjectByClientIdAsync(_isArchived, _currentUserId);
        StateHasChanged();
    }

    // Add new project dialog
    private async Task AddProjectDialogAsync(DialogOptions options)
    {

        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.ClientId = _currentUserId;
            await ProjectService.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    private async Task CreateProjectDialogAsync(DialogOptions options)
    {
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;
        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault }
        };
        var dialog = await DialogService.ShowAsync<CreateNewProjectDialog>("Create New Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.ClientId = _currentUserId;
            await ProjectService.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    // Asign to project
    private async Task AssignUsersToProjectAsync(DialogOptions options)
    {
        var dialog = await DialogService.ShowAsync<AssignUsersToProject>("Assign To Project", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add($"Successful! you should be happy, really!", Severity.Info);

            StateHasChanged();
        }
    }
    // Deleting project in archive
    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        var parameters = new DialogParameters
        {
            {"Message", $"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"}
        };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            return;
        }
        await ProjectService.DeleteProjectAsync(projectToDelete.ProjectId);
        await LoadProjects();
        StateHasChanged();
    }
    // Archiving and Unarchiving the project
    public async Task ArchiveProject(DialogOptions options,Project project)
    {
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var archivedProject = (string)result.Data;
            if(archivedProject != null)
            {
                await ProjectService.ArchiveProjectAsync(project.ProjectId, archivedProject);
                LoadProjects();
            }
        }
    }
    private async Task UnarchiveProject(Project project)
    {
        await ProjectService.UnarchiveProjectAsync(project.ProjectId);
        await LoadProjects();
    }
    // Opens Description Dialog
    private async void OpenDescriptionDialog(string description, object context)
    {
        var parameters = new DialogParameters
        {
            { "Description", description },
            { "NewDescription", EventCallback.Factory.Create<string>(this, async (newDescription) =>
                {
                    await SaveDescription(newDescription, context);
                })
            }
        };
        var options = new DialogOptions { FullScreen = true };
        DialogService.Show<DescriptionDialog>("Project Description", parameters, options);
    }
    // Update description and save it to DB
    private async Task SaveDescription(string newDescription, object context)
    {
        if (context is Project project)
        {
            project.Description = newDescription;
            await ProjectService.UpdateProjectAsync();
        }
    }

    private Func<Project, string> _cellStyleFunc => x =>
    {
        string style = string.Empty;

        switch (x.Status)
        {
            case ProjectStatus.Upcoming:
                style += "background-color: var(--mud-palette-gray-dark);";
                break;

            case ProjectStatus.Scheduled:
                style += "background-color: var(--mud-palette-info-lighten);";

                break;
            case ProjectStatus.Working:
                style += "background-color: var(--mud-palette-info-darken);";
                break;

            case ProjectStatus.Delivered:
                style += "background-color:  #53a653;";
                //style += "background-color:  rgb(9,154,108);";
                break;
            case ProjectStatus.Review:
                style += "background-color: var(--mud-palette-warning-lighten);";
                break;

            case ProjectStatus.Revision:
                style += "background-color: var(--mud-palette-error);";
                break;
            case ProjectStatus.Paid:
                style += "background-color: var(--mud-palette-success-darken);";
                break;

            default:
                style += "background-color: transparent;";
                break;
        }
        style += "color: rgba(255,255,255,1); text-align: center; max-width: 25vw;";

        return style;
    };
    // events
    void StartedEditingItem(Project project)
    {
    }
    void CanceledEditingItem(Project project)
    {
    }
    private async Task CommittedItemChanges(Project project)
    {
        try{
            await ProjectService.UpdateProjectAsync();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add($"Successfully updated the project", Severity.Info);
        }
        catch(Exception ex)
        {
            throw ex; 
        }

    }
}
