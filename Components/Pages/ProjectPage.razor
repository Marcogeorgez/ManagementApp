@page "/project"
@inject ProjectService ProjectService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDataGrid T="Project" Items="@projects" SortMode="SortMode.Single"
    Dense=false Hover="true" Bordered=true 
    QuickFilter="new Func<Project,bool>(FilterFunc1)">
    <ToolBarContent>
            <MudText Typo="Typo.h6">Your @_userName Projects</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search"
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" Class="mt-0" Clearable="true" Immediate="true" />
    </ToolBarContent>
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
        @if (_currentRole == "Admin")
        {
            <col style="width: 1%;" /> <!-- ID -->
            <col style="width: 4%;" /> <!-- ProjectName -->
            <col style="width: 35%;" /> <!-- ProjectDescription -->
            <col style="width: 5%;" /> <!-- ProgressBar -->
            <col style="width: 5%;" /> <!-- ShootDate -->
            <col style="width: 5%;" /> <!-- DueDate -->
            <col style="width: 5%;" /> <!-- WorkingMonth -->
            <col style="width: 5%;" /> <!-- Status -->
            <col style="width: 10%;" /> <!-- Actions -->
            <col style="width: 10%;" /> <!-- Archive (if _isArchived) -->
        }
        else if (_currentRole == "Editor")
        {
            <col style="width: 1%;" /> <!-- ID -->
            <col style="width: 4%;" /> <!-- ProjectName -->
            <col style="width: 35%;" /> <!-- ProjectDescription -->
            <col style="width: 10%;" /> <!-- ProgressBar -->
            <col style="width: 5%;" /> <!-- ShootDate -->
            <col style="width: 5%;" /> <!-- DueDate -->
            <col style="width: 5%;" /> <!-- WorkingMonth -->
            <col style="width: 5%;" /> <!-- Status -->
        }
        else if (_currentRole == "Client")
        {

            <col style="width: 1%;" /> <!-- ID -->
            <col style="width: 15%;" /> <!-- ProjectName -->
            <col style="width: 34%;" /> <!-- ProjectDescription -->
            <col style="width: 10%;" /> <!-- ProgressBar -->
            <col style="width: 5%;" /> <!-- ShootDate -->
            <col style="width: 10%;" /> <!-- Status -->
            <col style="width: 5%;" /> <!-- Actions  -->
            }
        </MudHidden>
    </ColGroup>
    <Columns>
        @if (RoleBasedColumns[_currentRole].Contains("Id"))
        {
            <PropertyColumn Property="x => x.ProjectId" Title="Id" Sortable="false" Filterable="false"  />
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
        {
            <PropertyColumn Property="x => x.ProjectName" Title="Project Name" />
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectDescription"))
        {
            <PropertyColumn Property="x => x.Description" Title="Project Description">
                <CellTemplate >
                    @{
                        string descriptionValue = context.Item.Description ?? string.Empty;
                    }
                    <MudTextField T="string"
                        HelperText="Click to expand" Value="@descriptionValue" 
                        Immediate="true" Adornment="Adornment.End" 
                        AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                        AutoGrow=true
                        MaxLines="4"
                        OnAdornmentClick="@(() => OpenDescriptionDialog(descriptionValue, context))">
                            <MudTooltip Text="Expand">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInFull"/>
                            </MudTooltip>
                    </MudTextField>
                    
                    </CellTemplate>
            </PropertyColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
        {
            <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" >
                <CellTemplate>
                    <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Class="my-0" />
                </CellTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
        {
            <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" />
        }
        @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
        {
            <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" />
        }

        @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
        {
                <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" />
        }
        @if (RoleBasedColumns[_currentRole].Contains("Status"))
        {
        <PropertyColumn Property="x => x.Status" Title="Status" CellStyleFunc="@_cellStyleFunc" />
        }
        @if (RoleBasedColumns[_currentRole].Contains("Actions"))
        {
            <TemplateColumn CellClass="" Title="Actions">
                <CellTemplate>
                    <MudStack Row>
                        @if (_isArchived && _isAdminView)
                        {
                            <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(_closeButton, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                @(context.Item.IsArchived ? "Unarchive" : "Archive")
                            </MudButton>
                        }
                        else if(!_isArchived && _isAdminView)
                        {
                            <MudButton Color="Color.Warning"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => ArchiveProject(_closeButton, context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="ml-2">
                                Archive
                            </MudButton>
                        }
                        else if (_isClientView)
                        {
                            <MudButton Color="Color.Info"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => AddProjectDialogAsync(_closeButton))"
                                       StartIcon="@Icons.Material.Filled.Archive"
                                       Class="ml-2">
                                Modify
                            </MudButton>
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("Archive"))
        {
            @if (_isArchived)
                {
                    <PropertyColumn Property="x => x.IsArchived" Title="Archive" />
                }

        }
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Project"/>
    </PagerContent>
</MudDataGrid>
<MudStack Spacing="0">
    <MudSwitch T="bool" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
    <MudStack Row=true>
    <MudSwitch T="bool" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin View</MudSwitch>
    <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor View</MudSwitch>
    <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client View</MudSwitch>
    </MudStack>
</MudStack>
<div class="mb-4">
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   OnClick="@(() => AddProjectDialogAsync(_closeButton))">
            Add New Project
        </MudButton>
    </div>

@code {
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private IEnumerable<Project> projects = new List<Project>();
    private Project projectToDelete;
    private readonly DialogOptions _closeButton = new() { CloseButton = true, FullScreen = true };
    private bool _isArchived = false;
    private bool _isAdminView = false;
    private bool _isEditorView = false;
    private bool _isClientView = false;
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string CurrentRole => _isAdminView ? "Admin" :
                          _isEditorView ? "Editor" : "Client";
    protected override async Task OnInitializedAsync()
    {
        AdminToggle();
        // Get the current user ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        _currentUserId = currentUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
    }
    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "Id", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status", "Actions","Archive" } },
        { "Editor", new List<string> { "Id", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status" } },
        { "Client", new List<string> { "Id", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "Status","Actions" } }
    };

    private async Task ArchivedToggle()
    {
        _isArchived = !_isArchived;
        await LoadProjects();
    }
    private async Task AdminToggle()
    {
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
        StateHasChanged();

    }
    private async Task EditorToggle()
    {
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        StateHasChanged();
        // await LoadProjectsForEditor(context.UserId)
    }
    private async Task ClientToggle()
    {
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjectsForClient();
        StateHasChanged();


    }
    private async Task LoadProjects()
    {
        if (_isClientView)
            projects = await ProjectService.GetProjectByClientIdAsync(_isArchived, _currentUserId);
        if(_isAdminView || _isEditorView)
            projects = await ProjectService.GetProjectsAsync(_isArchived);
        StateHasChanged();
    }
    private async Task LoadProjectsForClient()
    {
        projects = await ProjectService.GetProjectByClientIdAsync(_isArchived, _currentUserId);
        StateHasChanged();
    }


    private async Task AddProjectDialogAsync(DialogOptions options)
    {

        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.ClientId = _currentUserId;
            await ProjectService.AddProjectAsync(newProject);
            StateHasChanged();
        }
    }
    public async Task ArchiveProject(DialogOptions options,Project project)
    {
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var archivedProject = (string)result.Data;
            if(archivedProject != null)
            {
                await ProjectService.ArchiveProjectAsync(project.ProjectId, archivedProject);
                LoadProjects();
            }
        }
    }
    private async Task UnarchiveProject(Project project)
    {
        await ProjectService.UnarchiveProjectAsync(project.ProjectId);
        await LoadProjects();
    }
    private void OpenDescriptionDialog(string description, object context)
    {
        var parameters = new DialogParameters
        {
            { "Description", description }
        };
        var options = new DialogOptions { FullScreen = true };
        DialogService.Show<DescriptionDialog>("Project Description", parameters, options);
    }









    // Filter and Styling Functions
    private bool FilterFunc1(Project project) => FilterFunc(project, _searchString);
    private bool FilterFunc(Project project, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (project.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (project.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private Func<Project, string> _cellStyleFunc => x =>
    {
        string style = string.Empty;

        switch (x.Status)
        {
            case ProjectStatus.Upcoming:
                style += "background-color: var(--mud-palette-gray-dark);";
                break;

            case ProjectStatus.Scheduled:
                style += "background-color: var(--mud-palette-info-lighten);";

                break;
            case ProjectStatus.Working:
                style += "background-color: var(--mud-palette-info-darken);";
                break;

            case ProjectStatus.Delivered:
            style += "background-color:  #53a653;";
            //style += "background-color:  rgb(9,154,108);";
                break;
            case ProjectStatus.Review:
                style += "background-color: var(--mud-palette-warning-lighten);";
                break;

            case ProjectStatus.Revision:
                style += "background-color: var(--mud-palette-error);";
                break;
            case ProjectStatus.Paid:
                style += "background-color: var(--mud-palette-success-darken);";
                break;

            default:
                style += "background-color: transparent;";
                break;
        }
        style += "color: rgba(255,255,255,1); text-align: center";

        return style;
    };
}
