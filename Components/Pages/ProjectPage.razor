@page "/project"
@using System.Text.Json
@using LuminaryVisuals.Components.Shared.Logging
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserServices UserServices
@inject ProjectService projectServices

<MudDataGrid @ref=_dataGrid T="Project" Items="@projects" SortMode="SortMode.Single" @key=_gridKey
    Dense=true Hover="true" Bordered=true 
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
    ApplyDropClassesOnDragStarted="true"
    DragDropColumnReordering=true
    ColumnsPanelReordering=true
    Groupable=true
    ShowMenuIcon=true
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.Manual"
    ReadOnly=false
    DragIndicatorSize="Size.Small"
    StartedEditingItem="@StartedEditingItem" 
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges"
    RowClassFunc="@GetRowClass"
    >

    <ToolBarContent>
            <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
        </MudHidden>
    </ColGroup>
    <Columns>

        @if (RoleBasedColumns[_currentRole].Contains("InternalId"))
        {
            <PropertyColumn Property="x => x.InternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center;"
                            DragAndDropEnabled="false" Groupable="false" Editable=true InitialDirection="SortDirection.Ascending">
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ExternalId"))
        {
            <PropertyColumn Property="x => x.ExternalOrder" Title="Id" Sortable="true" Filterable="true" CellStyle="text-align:center;"
                            DragAndDropEnabled="false" Groupable="false" Editable=true InitialDirection="SortDirection.Ascending">
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectName"))
        {
                    <PropertyColumn Property="x => x.ProjectName" Title="Project Name" DragAndDropEnabled="false" Groupable="false" Editable=false CellStyle="text-align:center;" />
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientName"))
        {
                    <PropertyColumn Property="x => x.ClientName" Title="Client Name" Grouping="_groupByClientName" 
                        Hideable="true" Groupable="true" CellStyle="text-align:center;" 
                        Editable=false Required=false >
                        <GroupTemplate>
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Client Name" />
                        </GroupTemplate>
                <EditTemplate>
                    @if (Clients != null && Clients.Any() && _isAdminView)
                    {
                        <MudSelect T="string"
                                   AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                   Class="d-flex justify-center mud-width-full py-2"
                                   Variant="Variant.Outlined"
                                   Label="Client Name"
                                   @bind-Value="context.Item.ClientId">
                            @foreach (var client in Clients)
                            {
                                <MudSelectItem Class="" T="string" Value="@client.UserId" Ripple=true>
                                    @client.UserName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }
                </EditTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("PrimaryEditor"))
        {
                    <PropertyColumn Property="x => x.PrimaryEditorName" Title="Primary Editor" Hideable="true" 
                        Groupable="true" Editable=false Required=false  CellStyle="text-align:center;" >
                    <GroupTemplate> 
                            <GroupTemplateComponent TItem="Project" Context="@context" Label="Primary Editor" />
                    </GroupTemplate>   
                    <EditTemplate>
                    @if (Editors != null && Editors.Any() && _isAdminView){
                    <MudSelect T="string"
                               AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                               Class="d-flex justify-center mud-width-full py-2"
                               Variant="Variant.Outlined"
                               Label="Primary Editor"
                               @bind-Value="context.Item.PrimaryEditorId">
                               @foreach (var editor in Editors)
                               {
                                    <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                        @editor.UserName
                                    </MudSelectItem>
                               }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }
                    </EditTemplate>
                    </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("SecondaryEditor"))
        {
            <PropertyColumn Property="x => x.SecondaryEditorName" Title="2nd Editor" Hideable="true" 
                Groupable="true" Editable=false Required=false CellStyle="text-align:center;">
                <EditTemplate>
                    @if (Editors != null && Editors.Any() && _isAdminView)
                    {
                        <MudSelect T="string"
                                   AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                   Class="d-flex justify-center mud-width-full py-2"
                                   Variant="Variant.Outlined"
                                   Label="Secondary Editor"
                                   @bind-Value="context.Item.SecondaryEditorId">
                            @foreach (var editor in Editors)
                            {
                                <MudSelectItem Class="" T="string" Value="@editor.UserId" Ripple=true>
                                    @editor.UserName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Style="display:none;" />
                    }

                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ProjectDescription"))
        {
                <PropertyColumn Property="x => x.Description" Title="Project Description" Hideable="true" CellStyle="text-align:center; min-width:20vw;"
                    Groupable="false" Editable=false Required=false>
                <CellTemplate >
                    @{
                        string descriptionValue = context.Item.Description ?? string.Empty;
                    }
                    @if(descriptionValue.Contains("Warning"))
                    {
                        <MudIcon Icon="@Icons.Material.Rounded.WarningAmber" Color="Color.Warning" Size="Size.Medium"></MudIcon>
                        <MudTextField T="string"
                        HelperText="Click to expand"
                        Value="@(UserRoleViewModel.StripHtmlTags(descriptionValue))" 
                        ReadOnly="true"
                        Immediate="true" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                        AutoGrow=true
                        MaxLines="4"
                        OnAdornmentClick="@(() => OpenDescriptionDialog(descriptionValue, context.Item))">
                            <MudTooltip Text="Expand">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInFull"/>
                            </MudTooltip>
                    </MudTextField>   
                    }
                    else
                    {
                        <MudTextField T="string"
                                      HelperText="Click to expand"
                                      Value="@(UserRoleViewModel.StripHtmlTags(descriptionValue))"
                                      ReadOnly="true"
                                      Immediate="true" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                                      AutoGrow=true
                                      MaxLines="4"
                                      OnAdornmentClick="@(() => OpenDescriptionDialog(descriptionValue, context.Item))">
                            <MudTooltip Text="Expand">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInFull" />
                            </MudTooltip>
                        </MudTextField>
                    }
                 
                    </CellTemplate>
                        <EditTemplate>
                            <MudText Style="display:none;" />
                        </EditTemplate>
            </PropertyColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("ProgressBar"))
        {
            <PropertyColumn T="Project" TProperty="int" Property="x => x.ProgressBar" Title="Progress" Hideable="true" CellStyle=""> 
                <CellTemplate>
                    <MudProgressLinear Value="@context.Item.ProgressBar" Color="Color.Info" Size="Size.Small" Class="my-0" />
                </CellTemplate>

                <EditTemplate Context="context">
                            @if (!_isClientView)
                            {
                                <MudSelect T="ProgressBarValue" Label="Progress" Class="mt-3" 
                                AnchorOrigin="Origin.BottomCenter"
                                Value="@((ProgressBarValue)context.Item.ProgressBar)"
                Variant="Variant.Outlined"
                ValueChanged="@(newValue => context.Item.ProgressBar = (int)newValue)">
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Zero">0%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Twenty">20%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Forty">40%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Sixty">60%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Eighty">80%</MudSelectItem>
                    <MudSelectItem Class="mt-1" Value="ProgressBarValue.Hundred">100%</MudSelectItem>
                </MudSelect>            
                }
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Progress" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ShootDate"))
        {
            <PropertyColumn Property="x => x.FormattedShootDate" Title="Shoot Date" Hideable="true" 
                Groupable="true" Editable=false CellStyle="text-align:center;">
                        <EditTemplate Context="context">
                            @* If changed from here I will later need of a way to change due date*@
                            @if(_isAdminView || _isClientView){
                            <MudDatePicker Label="Shoot Date"
                                           Variant="Variant.Outlined"
                                           Date="@context.Item.ShootDate"
                                           DateChanged="@(date => context.Item.ShootDate = date)"
                                           Class="mt-3"
                                           Required="true" />
                            }
                        </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Shoot Date" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("DueDate"))
        {
            <PropertyColumn Property="x => x.FormattedDueDate" Title="Due Date" Hideable="true" CellStyle="text-align:center;"
                Groupable="true" Editable=false >
                        <EditTemplate>
                            @if(@_isAdminView){
                            <MudDatePicker Label="Due Date"
                                           Variant="Variant.Outlined"
                                           Class="mt-3"
                                           Date="@context.Item.DueDate"
                                           DateChanged="@(date => context.Item.DueDate = date)"
                                           Required="true" />
                            }
                        </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Due Date" />
                </GroupTemplate>
            </PropertyColumn>

        }
        @if (RoleBasedColumns[_currentRole].Contains("WorkingMonth"))
        {
            <PropertyColumn Property="x => x.FormattedWorkingMonth" Title="Month" Hideable="true"
                CellStyle="text-align:center;" Groupable="true" Editable=false>
                <EditTemplate Context="context">
                    @if(@_isAdminView){
                    <MudDatePicker Required="true"
                        Label="Working Month"
                        Variant="Variant.Outlined"
                        Class="mt-3"
                        FixDay="1"
                        DateFormat="yyyy/MM"
                        Date="@context.Item.WorkingMonth"
                        DateChanged="@(date => context.Item.WorkingMonth = date)" />
                    }
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Working Month" />
                </GroupTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("Status"))
        {           
            <PropertyColumn Property="x => x.FormatStatus" Title="Status" CellStyleFunc="@_cellStyleFunc" Hideable="true" Groupable="true">
                <EditTemplate Context="context">
                            <MudSelect T="ProjectStatus" Class="mt-3"
                                       Variant="Variant.Outlined"
                                       Label="Status"
                                       @bind-Value="context.Item.Status"
                                       Required="true">
                                @if(!_isClientView){
                                @foreach (ProjectStatus status in Enum.GetValues(typeof(ProjectStatus)))
                                {
                                    <MudSelectItem Value="@status">@status</MudSelectItem>
                                }
                                }
                                else{
                                    <MudSelectItem Value="ProjectStatus.Ready_To_Edit">Ready to Edit</MudSelectItem>
                                    <MudSelectItem Value="ProjectStatus.Revision">Revision</MudSelectItem>
                                }
                            </MudSelect>
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Status" />
                </GroupTemplate>
            </PropertyColumn>
                    
        }
        @if (RoleBasedColumns[_currentRole].Contains("AdminStatus"))
        {
            <PropertyColumn Property="x => x.FormatAdminStatus" Title="AdminStatus" Hideable="true" Groupable="true" CellStyle="text-align:center;">
                <EditTemplate Context="context">
                    <MudSelect T="AdminProjectStatus" Class="mt-3"
                               Variant="Variant.Outlined"
                               Label="Status"
                               @bind-Value="context.Item.AdminStatus"
                               Required="true">
                        @foreach (AdminProjectStatus status in Enum.GetValues(typeof(AdminProjectStatus)))
                            {
                            <MudSelectItem Value="@status">@status.ToString().Replace("_", " ")</MudSelectItem>
                            }
                    </MudSelect>
                </EditTemplate>
                <GroupTemplate>
                    <GroupTemplateComponent TItem="Project" Context="@context" Label="Payment Status" />
                </GroupTemplate>
            </PropertyColumn>

        }
        @if (RoleBasedColumns[_currentRole].Contains("BillableHours"))
        {           
            <PropertyColumn Property="x => x.BillableHours" Title="Editor Billable Hours" Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
        {
            <PropertyColumn Property="x => x.ClientBillableHours" Title="Client Billable Hours" Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>
        }
        @if (RoleBasedColumns[_currentRole].Contains("ClientBillable"))
        {
            <PropertyColumn Property="x => x.ClientBillableAmount" Title="Client Payment" Hideable="true" Editable=false CellStyle="text-align:center;">
                <EditTemplate>
                    <MudText Style="display:none;" />
                </EditTemplate>
            </PropertyColumn>            
        }
        @if (RoleBasedColumns[_currentRole].Contains("Actions"))
        {
            <TemplateColumn CellClass="" Title="Actions" Hideable="true" Groupable="false" >
                <CellTemplate>
                      <MudStack Spacing="0" Class="mb-1">
                        @if (_isArchived && _isAdminView)
                        {
                            <MudButton Color="@(!context.Item.IsArchived ? Color.Warning : Color.Success)"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => context.Item.IsArchived ? UnarchiveProject(context.Item) : ArchiveProject(context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="mb-1">
                                @(context.Item.IsArchived ? "Unarchive" : "Archive")
                            </MudButton>
                            <MudButton Color="Color.Error"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => DeleteDialog(context.Item))"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Class="mb-1">
                                Delete
                            </MudButton>
                        }
                        else if(!_isArchived && _isAdminView)
                        {
                            <MudButton Color="Color.Warning"
                                        Variant="Variant.Filled"
                                        Size="Size.Small"
                                        OnClick="@(() => ArchiveProject(context.Item))"
                                        StartIcon="@Icons.Material.Filled.Archive"
                                        Class="mb-1">
                                Archive
                            </MudButton>
                        }
                        @if (!_isArchived)
                        {
                            <MudButton Size="@Size.Small" StartIcon="@Icons.Material.Filled.Edit"
                                       Color="Color.Info" Variant="Variant.Filled"
                                       OnClick="@context.Actions.StartEditingItemAsync">Modify </MudButton>
                        }
                    </MudStack>

                        @if(_isAdminView || _isEditorView)
                        {
                        <MudStack Spacing="0">
                        <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Size="Size.Small"
                                       OnClick="@(() => TimeCalculator(context.Item))"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Class="mb-1">
                                Billable
                        </MudButton>
                        <MudButton Color="Color.Success"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => Logging(context.Item))"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   Class="mb-1">
                            Logging
                        </MudButton>
                        </MudStack>
                        }

                </CellTemplate>
            </TemplateColumn>
            }
        @if (RoleBasedColumns[_currentRole].Contains("Archive"))
        {
            @if (_isArchived)
                {
                    <PropertyColumn Property="x => x.Archive.Reason" Title="Archive Reason" />
                }
        }        
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Project"/>
    </PagerContent>
</MudDataGrid>
<MudStack Spacing="0">
    <MudSwitch T="bool" Value="@_isArchived" ValueChanged="ArchivedToggle" Color="Color.Info">Show Archived Projects</MudSwitch>
    <MudStack Row=false>
    <MudSwitch T="bool" Value="@_isAdminView" ValueChanged="AdminToggle" Color="Color.Info">Admin View</MudSwitch>
    <MudSwitch T="bool" Value="@_isEditorView" ValueChanged="EditorToggle" Color="Color.Info">Editor View</MudSwitch>
    <MudSwitch T="bool" Value="@_isClientView" ValueChanged="ClientToggle" Color="Color.Info">Client View</MudSwitch>
    </MudStack>
</MudStack>
<div class="mb-4">
@if(_isAdminView){
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   OnClick="@(() => AddProjectDialogAsync(DialogOptions))" Class="mb-1">
            Add New Project
        </MudButton>
        <MudSpacer></MudSpacer>
        <MudTooltip Text=" Download Filtered As Csv">           
        <MudButton OnClick="DownloadFilteredAsCsv"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.TwoTone.Download" IconSize="Size.Large">Download Filtered As Csv</MudButton>
                   </MudTooltip>

}
else if (_isClientView)
{
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       OnClick="@(() => CreateProjectDialogAsync(DialogOptions))">
                Create New Project
            </MudButton>
}
</div>

@code {

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private MudDataGrid<Project> _dataGrid;
    private IEnumerable<Project> projects = new List<Project>();
    private Project projectToDelete;
    private readonly DialogOptions DialogOptions = new() { CloseButton = true, FullScreen = true };
    private bool _isArchived;
    private bool _isAdminView;
    private bool _isEditorView;
    private bool _isClientView;
    private bool _groupByClientName;
    private string _searchString = "";
    private string _currentUserId = "";
    private string _currentRole = "";
    private string _userName = "";
    private string CurrentRole => _isAdminView ? "Admin" :
                          _isEditorView ? "Editor" : "Client";
    private List<UserRoleViewModel.UserProjectViewModel> Editors = new List<UserRoleViewModel.UserProjectViewModel>();
    private List<UserRoleViewModel.UserProjectViewModel> Clients = new List<UserRoleViewModel.UserProjectViewModel>();
    private enum ProgressBarValue
    {
        Zero = 0,
        Twenty = 20,
        Forty = 40,
        Sixty = 60,
        Eighty = 80,
        Hundred = 100
    }

    protected override async Task OnInitializedAsync()
    {
        AdminToggle();
        // Get the current user ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        _currentUserId = currentUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        _userName = currentUser.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
    }
    private Dictionary<string, List<string>> RoleBasedColumns => new()
    {
        { "Admin", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","AdminStatus","BillableHours","ClientBillable","EditorBillable","Actions","Archive" } },
        { "Editor", new List<string> { "InternalId", "ProjectName","ClientName","PrimaryEditor","SecondaryEditor", "ProjectDescription", "ProgressBar", "ShootDate", "DueDate", "WorkingMonth", "Status","BillableHours","EditorBillable", "Actions"} },
        { "Client", new List<string> { "ExternalId", "ProjectName", "ProjectDescription", "ProgressBar", "ShootDate", "Status","Actions" } }
    };
    private Guid _gridKey = Guid.NewGuid();


    private async Task AdminToggle()
    {
        _gridKey = Guid.NewGuid();
        _isAdminView = !_isAdminView;
        _isClientView = false;
        _isEditorView = false;
        _currentRole = "Admin";
        await LoadProjects();
    }
    private async Task EditorToggle()
    {
        _gridKey = Guid.NewGuid();
        _isEditorView = !_isEditorView;
        _isClientView = false;
        _isAdminView = false;
        _currentRole = "Editor";
        await LoadProjects();
        // await LoadProjectsForEditor(context.UserId)
    }
    private async Task ClientToggle()
    {
        _gridKey = Guid.NewGuid();
        _isClientView = !_isClientView;
        _isAdminView = false;
        _isEditorView = false;
        _currentRole = "Client";
        await LoadProjects();
    }

    private async Task ArchivedToggle()
    {
        _isArchived = !_isArchived;
        await LoadProjects();
    }
    //  Load project for admin/editor view only (will later be split )
    private async Task LoadProjects()
    {
        if (_isAdminView)
        {
            projects = await projectServices.GetProjectsAsync(_isArchived);
            Editors = await UserServices.GetEditorsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
            Clients = await UserServices.GetClientsWithProjectsAsync() ?? new List<UserRoleViewModel.UserProjectViewModel>();
        }
        else if (_isClientView)
            LoadProjectsForClient();
        else if (_isEditorView)
            LoadProjectsForEditors();
        StateHasChanged();
    }
    // Loading Projects for Editors View
    private async Task LoadProjectsForEditors()
    {
        projects = await projectServices.GetProjectsForEditors(_isArchived, _currentUserId);
        StateHasChanged();
    }
    // Loading Projects for Client View
    private async Task LoadProjectsForClient()
    {
        projects = await projectServices.GetProjectsForClients(_isArchived, _currentUserId);
        StateHasChanged();
    }

    // Add new project dialog
    private async Task AddProjectDialogAsync(DialogOptions options)
    {

        var dialog = await DialogService.ShowAsync<AddProjectDialog>("Add New Project", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    private async Task CreateProjectDialogAsync(DialogOptions options)
    {
        var currentUser = await UserServices.GetUserByIdAsync(_currentUserId);
        int weeksToDueDateDefault = currentUser.WeeksToDueDateDefault ?? 4;
        var dialogParameters = new DialogParameters
        {
            { "WeeksToDueDateDefault", weeksToDueDateDefault }
        };
        var dialog = await DialogService.ShowAsync<CreateNewProjectDialog>("Create New Project", dialogParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProject = (Project) result.Data;
            newProject.WorkingMonth = DateTime.Today;
            newProject.ClientId = _currentUserId;
            await projectServices.AddProjectAsync(newProject);
            await LoadProjects();
            StateHasChanged();
        }
    }
    // Deleting project in archive
    private async Task DeleteDialog(Project project)
    {
        projectToDelete = project;
        var parameters = new DialogParameters
        {
            {"Message", $"Are you sure you'd like to DELETE {project.ProjectName}? This will delete it permanently!"}
        };
        var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            return;
        }
        await projectServices.DeleteProjectAsync(projectToDelete.ProjectId);
        await LoadProjects();
        StateHasChanged();
    }
    // Archiving and Unarchiving the project
    public async Task ArchiveProject(Project project)
    {
        var dialogParameters = new DialogParameters<ArchivingDialog> { { nameof(ArchivingDialog.newProject), project } };
        var dialog = await DialogService.ShowAsync<ArchivingDialog>("Archive Project", dialogParameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var archivedProject = (string)result.Data;
            if(archivedProject != null)
            {
                await projectServices.ArchiveProjectAsync(project.ProjectId, archivedProject);
                await projectServices.ReorderProjectAsync(project.ProjectId, project.InternalOrder = null);
                LoadProjects();
            }
        }
    }
    private async Task UnarchiveProject(Project project)
    {
        await projectServices.UnarchiveProjectAsync(project.ProjectId);
        await LoadProjects();
    }
    // Opens Description Dialog
    private async void OpenDescriptionDialog(string description, object context)
    {
        var parameters = new DialogParameters
        {
            { "Description", description },
            { "NewDescription", EventCallback.Factory.Create<string>(this, async (newDescription) =>
                {
                    await SaveDescription(newDescription, context);
                })
            }
        };
        var options = new DialogOptions { FullScreen = true };
        DialogService.Show<DescriptionDialog>("Project Description", parameters, options);
    }
    // Update description and save it to DB
    private async Task SaveDescription(string newDescription, object context)
    {
        if (context is Project project)
        {
            project.Description = newDescription;
            await projectServices.UpdateProjectAsync(project);
        }
    }
    // Calculates Total Client Billable hours based on a formula.
    private async Task TimeCalculator( Project project)
    {
        var dialogParameters = new DialogParameters<ProjectTotalHoursCalculatorDialog> {
            { nameof(ProjectTotalHoursCalculatorDialog.newProject), project }
        };
        var dialog = await DialogService.ShowAsync<ProjectTotalHoursCalculatorDialog>("Time Calculator", dialogParameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var _project = (Project) result.Data;
            if (_project != null)
            {
                await projectServices.UpdateProjectBillableHoursAsync(_project);
                Snackbar.Add($"Successfully updated the billable hours to {_project.BillableHours} of project", Severity.Info);
                await LoadProjects();
            }
        }
    }

    private async Task Logging(Project project)
    {
        var dialogParameters = new DialogParameters<LoggingDialog> {
            { nameof(LoggingDialog.currentProject), project }
        };
        var dialog = await DialogService.ShowAsync<LoggingDialog>("Logging Hours", dialogParameters);
        var result = await dialog.Result;
        await LoadProjects();

    }

    // Checks if there is changes between two projects in any property excluding the excluded.
    private bool HasNoSignificantChanges(Project original, Project modified, params string[] excludeProperties)
    {
        if (original == null || modified == null)
            return original == modified;  // Both null = true, one null = false

        var excluded = new HashSet<string>(excludeProperties, StringComparer.OrdinalIgnoreCase);  // Added case-insensitive comparison
        var properties = typeof(Project).GetProperties();

        foreach (var prop in properties)
        {
            if (excluded.Contains(prop.Name))
                continue;

            var originalValue = prop.GetValue(original);
            var modifiedValue = prop.GetValue(modified);

            if (!Equals(originalValue, modifiedValue))
                return false;
        }
        return true;
    }

    Project beforeModification;
    void StartedEditingItem(Project project)
    {
        beforeModification = JsonSerializer.Deserialize<Project>(
            JsonSerializer.Serialize(project))!;
    }
    void CanceledEditingItem(Project project)
    {
    }
    private async Task CommittedItemChanges(Project project)
    {
        try
        {
            if (_isClientView)
            {
                if (HasNoSignificantChanges(beforeModification, project, "ExternalOrder", "Status", "ShootDate") == false)
                {
                    await projectServices.UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }
            else if(_isAdminView)
            {
                await projectServices.UpdateProjectAsync(project);
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add($"Successfully updated the project", Severity.Info);
                LoadProjects();
                StateHasChanged();
            }
            else
            {
                if (HasNoSignificantChanges(beforeModification, project, "Status", "ShootDate", "DueDate", "ProgressBar", "WorkingMonth") == false)
                {
                    await projectServices.UpdateProjectAsync(project);
                    Snackbar.Add($"Successfully updated the project", Severity.Info);
                    LoadProjects();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Detected unauthorized changes!", Severity.Error);
                }
            }

        }
        catch(Exception ex)
        {
            throw ex; 
        }        
    }
    private Func<Project, string> _cellStyleFunc => x =>
    {
        string style = string.Empty;

        switch (x.Status)
        {
            case ProjectStatus.Upcoming:
                style += "background-color: #9999FF;";
                break;

            case ProjectStatus.Scheduled:
                style += "background-color: var(--mud-palette-info-lighten);";

                break;
            case ProjectStatus.Ready_To_Edit:
                style += "background-color: var(--mud-palette-error);";
                break;
            case ProjectStatus.Working:
                style += "background-color: var(--mud-palette-info-darken);";
                break;

            case ProjectStatus.Delivered:
                style += "background-color:  #53a653;";
                break;
            case ProjectStatus.Review:
                style += "background-color: var(--mud-palette-warning-lighten);";
                break;

            case ProjectStatus.Revision:
                style += "background-color: var(--mud-palette-error);";
                break;
            case ProjectStatus.Paid:
                style += "background-color: var(--mud-palette-success-darken);";
                break;

            default:
                style += "background-color: transparent;";
                break;
        }
        style += "color: rgba(255,255,255,1); text-align: center;";

        return style;
    };

    // Downloading Filtered as CSV
    private async Task DownloadFilteredAsCsv()
    {
        try
        {
            var parameters = new DialogParameters
        {
            { "Message", "Do you want to download the filtered CSV file?" },
        };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Download", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                var filteredItems = _dataGrid.FilteredItems.ToList();
                var csvContent = GenerateCsvContent(filteredItems);
                var filename = $"Projects_{DateTime.Now:yyyy_MM_dd_HH_mm_ss}.csv";
                await DownloadFile(filename, csvContent);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }
    private async Task DownloadFile(string filename, string content)
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                Convert.ToBase64String(bytes)
            );
            Snackbar.Add($"File has started downloading!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"File save error: {ex.Message}", Severity.Error);
        }
    }
    private string GenerateCsvContent(List<Project> projects)
    {
        // Create CSV header
        decimal total = 0;
        var csv = new System.Text.StringBuilder();
        csv.AppendLine(string.Join(",",
            nameof(Project.ProjectName),
            "Price"
            ));


        // Add data rows
        foreach (var project in projects)
        {
            csv.AppendLine(string.Join(",",
                EscapeCsvValue(project.ProjectName),
                project.ClientBillable
            ));
            total += project.ClientBillable.Value;
        }
        csv.AppendLine();
        csv.AppendLine(string.Join(",",
            $"Total Price: {total}",
        $" Date: {DateTime.Now:yyyy/MM/dd}"));
        return csv.ToString();
    }

    private string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        // Escape commas and quotes
        value = value.Replace("\"", "\"\"");
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = $"\"{value}\"";
        }
        return value;
    }
}
<script>
    window.saveAsFile = (filename, base64Content) => {
        const byteCharacters = atob(base64Content);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'text/csv' });

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>
