@page "/admin-dashboard"
@using LuminaryVisuals.Data.Entities
@using LuminaryVisuals.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.Timers
@inject UserManagementService UserManagementService
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> RoleManager
@inject UserNoteService UserNoteService
@inject ISnackbar Snackbar
@inject ILogger<AdminDashboard> Logger
@inject IDialogService DialogService


@* @attribute [Authorize(Policy = "RequireAdminRole")]
 *@
<PageTitle>Admin Dashboard</PageTitle>

@if (_loading)
{
    <MudText Typo="Typo.h5">Admin Dashboard</MudText>
    <MudSpacer />
    <LoadingComponent />
}
else if (_error)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" >
        An error occurred while loading users.
    </MudAlert>
}
else
{
    @if (!string.IsNullOrEmpty(_updateMessage))
    {
        <MudAlert Severity="@(_updateMessageClass == "alert-success" ? Severity.Success : Severity.Error)"
                  Variant="Variant.Filled"
                  ShowCloseIcon="true"
                  CloseIconClicked="@(() => {_updateMessage = null;})"
                  OnClick="@(() => { _updateMessage = null; })">
            @_updateMessage
        </MudAlert>
    }


    <MudDataGrid T="UserRoleViewModel" Bordered="true" CanCancelEdit="true" MultiSelection="true" Items="@AllUsers" SortMode="SortMode.Multiple"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable="true"
                 ColumnResizeMode="ResizeMode.Container" DragIndicatorSize="Size.Small">
        <ToolBarContent>
            <MudText Typo="Typo.h5">Admin Dashboard</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search by name" Adornment="Adornment.Start"
                          Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                          Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="UserRoleViewModel" />
            <TemplateColumn T="UserRoleViewModel" Title="#" Sortable="false" Filterable="false" Style="min-width: 50px;">
                <CellTemplate Context="cell">
                    @{
                        var index = AllUsers.ToList().IndexOf(cell.Item) + 1;
                        @index
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Style="min-width: 150px" Property="x => x.UserName" Title="User Name">
            </PropertyColumn>
            <PropertyColumn Property="x => GetRolesAsString(x)" Title="Current Role" Style="min-width: 150px;" />

            <TemplateColumn Title="Change Role">
                <CellTemplate>
                    <MudMenu Label="@(context.Item.Roles?.FirstOrDefault() ?? "Select New Role")"
                             Variant="Variant.Outlined"
                             Color="Color.Success"
                             Dense="true"
                             Disabled="@(_isUpdating && _updatingUserId == context.Item.UserId)">
                        <MudMenuItem OnClick="@(() => UpdateSelectedRole(context.Item, "Admin"))">Admin</MudMenuItem>
                        <MudMenuItem OnClick="@(() => UpdateSelectedRole(context.Item, "Editor"))">Editor</MudMenuItem>
                        <MudMenuItem OnClick="@(() => UpdateSelectedRole(context.Item, "Client"))">Client</MudMenuItem>
                        <MudMenuItem OnClick="@(() => UpdateSelectedRole(context.Item, "Guest"))">Guest</MudMenuItem>
                    </MudMenu>
                    @if (_isUpdating && _updatingUserId == context.Item.UserId)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ms-3" />
                    }
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Style="min-width: 150px" Property="x => x.GetNoteValue(targetId)" Title="Private Notes">
                <CellTemplate>
                    @{

                        string noteValue = userNotesDict.ContainsKey(context.Item.UserId)
                        ? userNotesDict[context.Item.UserId]?.Note ?? string.Empty
                        : string.Empty;
                    }
                    <MudTextField T="string" Label="Note" Variant="Variant.Outlined" Lines="2"
                                  Value="@noteValue"
                                  ValueChanged="@(text => OnValueChanged(text, context))"
                                  Immediate="true" />
                </CellTemplate>
                </PropertyColumn>
</Columns>
        <PagerContent>
            <MudDataGridPager T="UserRoleViewModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private bool _loading = true;
    private bool _error = false;
    private bool _sortNameByLength;
    private bool _isUpdating;
    private string _updateMessage;
    private string _updateMessageClass;
    private string _updatingUserId;
    private string _searchString;
    private string creatorId;
    private string targetId;
    private string _pendingNoteText;

    private System.Timers.Timer _timer;
    private const double Delay = 1000 ; // 1 Second Delay
    private UserNote userNotes = new();
    private Dictionary<string, UserNote> userNotesDict = new();
    private List<string> _availableRoles = new();
    private List<UserRoleViewModel> _users;
    private IEnumerable<UserRoleViewModel> AllUsers = new List<UserRoleViewModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;


            creatorId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value; // to retrieve user ID


            _availableRoles = await GetAvailableRoles();
            AllUsers = await UserManagementService.GetAllUsersWithRolesAsync(creatorId);
            _users = AllUsers.ToList();

            await LoadUserNotes();


            _loading = false;
            _timer = new System.Timers.Timer(Delay);
            _timer.Elapsed += OnTimedEvent;
            _timer.AutoReset = false; // to prevent timer from restarting automatically
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            _error = true;
            _loading = false;
        }
    }

    // Load all user notes
    private async Task LoadUserNotes()
    {
        var notes = await UserNoteService.GetAllNotes(creatorId);

        foreach (var note in notes)
        {
            if (!userNotesDict.ContainsKey(note.TargetUserId))
            {
                userNotesDict[note.TargetUserId] = note;
            }
        }
    }

    // Save notes when user stops writing
    private void OnTimedEvent(object sender, ElapsedEventArgs e)
    {
        _timer.Stop();
        InvokeAsync(async () => await SaveNotes());
    }

    private void OnValueChanged(string text, CellContext<UserRoleViewModel> context)
    {

        targetId = context.Item.UserId;

        if (!userNotesDict.ContainsKey(targetId))
        {
            userNotesDict[targetId] = new UserNote { TargetUserId = targetId };
        }

        // Update the note text
        userNotesDict[targetId].Note = text;
        _pendingNoteText = text;  

        // Reset and start the timer each time the text changes
        _timer.Stop();
        _timer.Start(); 
    }
    private async Task SaveNotes()
    {
        if (userNotesDict.ContainsKey(targetId))
        {
            var noteToSave = userNotesDict[targetId];

            // Check if it's a new note or not 
            if (noteToSave.Id == 0)
            {
                // Add the new note
                var result = await UserNoteService.AddNoteAsync(creatorId, targetId, noteToSave.Note);
                if (result.Success)
                {
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = "Bottom-Right";
                    Snackbar.Add($"Successfully saved note", Severity.Info);
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
            else
            {
                // Update the existing note
                var result = await UserNoteService.UpdateNoteAsync(noteToSave.Id, noteToSave.Note);
                if (result.Success)
                {
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                    Snackbar.Add($"Successfully saved note", Severity.Info);
                    StateHasChanged();
                }
                else
                {

                    Console.WriteLine(result.Message);
                }
            }
        }
    }
        

    private async Task<List<string>> GetAvailableRoles()
    {
        var roles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
        return roles.Where(r => r != null).ToList();
    }

    private string GetRolesAsString(UserRoleViewModel user)
    {
        return string.Join(", ", user.Roles ?? new List<string>());
    }

    private async Task UpdateSelectedRole(UserRoleViewModel user, string newRole)
    {
        try
        {
            if (string.IsNullOrEmpty(newRole))
            {
                return;
            }
            if (newRole == "Admin")
            {
                var parameters = new DialogParameters
                {
                    { "Message" , $"Are you sure you want to change {user.UserName} role to Admin?"}
                };
                var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
                var toProceed = await dialog.Result;

                if (toProceed.Canceled || !(bool)toProceed.Data)
                {
                    return;
                }
            }
            _isUpdating = true;
            _updatingUserId = user.UserId;
            var result = await UserManagementService.ChangeUserRoleAsync(user.UserId, newRole);

            if (result)
            {
                var updatedUser = _users.First(u => u.UserId == user.UserId);
                updatedUser.Roles = new List<string> { newRole };
                _updateMessage = $"Successfully updated role for {user.UserName} to {newRole}";
                _updateMessageClass = "alert-success";

                var elementUser = AllUsers.First(u => u.UserId == user.UserId);
                elementUser.Roles = new List<string> { newRole };
            }
            else
            {
                _updateMessage = $"Failed to update role for {user.UserName}";
                _updateMessageClass = "alert-danger";
                Logger.LogError($"Failed to update role for user {user.UserName}");
            }
        }
        catch (Exception ex)
        {
            _updateMessage = $"Error updating role: {ex.Message}";
            _updateMessageClass = "alert-danger";
            Logger.LogError(ex, "Error changing user role");
        }
        finally
        {
            _isUpdating = false;
            _updatingUserId = null;
            StateHasChanged();
        }
    }
}