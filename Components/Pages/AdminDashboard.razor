@page "/admin-dashboard"
@using LuminaryVisuals.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@* @attribute [Authorize(Roles = "Admin")] *@
@inject UserManagementService UserManagementService
@inject ILogger<AdminDashboard> Logger
@inject HttpClient httpClient
@inject RoleManager<IdentityRole> RoleManager
<PageTitle>Admin Dashboard</PageTitle>
    @if (_loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_error)
    {
        <div class="alert alert-danger" role="alert">
            An error occurred while loading users.
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(_updateMessage))
        {
            <div class="alert @_updateMessageClass alert-dismissible fade show" role="alert">
                @_updateMessage
                <button type="button" class="btn btn-primary" @onclick="() => _updateMessage = null"></button>
            </div>
        }
    <MudDataGrid T="UserRoleViewModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" ColumnResizeMode="ResizeMode.Column">
        <ToolBarContent>
                <MudText Typo="Typo.h6">Admin Dashboard</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search username" Adornment="Adornment.Start" Immediate="true"
                 AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
                <Columns>
            <SelectColumn T="UserRoleViewModel" />
        <PropertyColumn Property="x => x.UserName" SortBy="@_sortBy" />
        <PropertyColumn Property="x => GetRolesAsString(x)" Title="Current Role"  />
            <PropertyColumn Property="x => x.SelectedRole" Title="Selected Role" style="max-width: 100px; overflow-x: hidden;" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary">Change Role</MudButton>
                </CellTemplate>
            </TemplateColumn>
    </Columns>
        <PagerContent>
            <MudDataGridPager T="UserRoleViewModel" />
    </PagerContent>
    </MudDataGrid>
    }

@code {
    private List<UserRoleViewModel> _users = new();
    private bool _loading = true;
    private bool _error = false;
    private List<string> _availableRoles = new();
    private string _updateMessage;
    private string _updateMessageClass;
    private bool _isUpdating;
    private string _updatingUserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get all roles from RoleManager
            _availableRoles = await GetAvailableRoles();

            // Get all users with their roles
            Elements = await UserManagementService.GetAllUsersWithRolesAsync();
            Console.WriteLine(Elements);
            _users = await UserManagementService.GetAllUsersWithRolesAsync();
            _loading = false;

            // Ensure SelectedRole is initialized to null or empty for each user
            foreach (var user in _users)
            {
                user.SelectedRole = null; // or string.Empty
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            _error = true;
            _loading = false;
        }
    }

    // Getting all roles from Asp Net Roles from db
     async Task<List<string?>> GetAvailableRoles()
    {
        var roles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
        return roles;
    }
    private string GetRolesAsString(UserRoleViewModel user)
    {
        return string.Join(", ", user.Roles);
    }

    // To Change users roles logic
    public async Task ChangeUserRole(UserRoleViewModel user)
    {
        try
        {
            if (string.IsNullOrEmpty(user.SelectedRole))
            {
                return; // Prevent further processing if no role is selected
            }

            _isUpdating = true;
            _updatingUserId = user.UserId;
            StateHasChanged(); // Trigger re-render for UI updates

            var result = await UserManagementService.ChangeUserRoleAsync(user.UserId, user.SelectedRole);

            if (result)
            {
                // Update the local user roles list
                var updatedUser = _users.First(u => u.UserId == user.UserId);
                updatedUser.Roles = new List<string> { user.SelectedRole };

                _updateMessage = $"Successfully updated role for {user.UserName} to {user.SelectedRole}";
                _updateMessageClass = "alert-success";

                Logger.LogInformation($"Successfully updated role for user {user.UserName} to {user.SelectedRole}");

                // Clear the selection after successful update
                user.SelectedRole = string.Empty; // Resetting selected role
            }
            else
            {
                _updateMessage = $"Failed to update role for {user.UserName}";
                _updateMessageClass = "alert-danger";
                Logger.LogError($"Failed to update role for user {user.UserName}");
            }
        }
        catch (Exception ex)
        {
            _updateMessage = $"Error updating role: {ex.Message}";
            _updateMessageClass = "alert-danger";
            Logger.LogError(ex, "Error changing user role");
        }
        finally
        {
            _isUpdating = false; // Reset updating state
            _updatingUserId = null;
            StateHasChanged(); // Trigger re-render to update UI
        }
    }

        private IEnumerable<UserRoleViewModel> Elements = new List<UserRoleViewModel>();
        private string _searchString;
        private bool _sortNameByLength;
        private List<string> _events = new();
        // custom sort by name length
        private Func<UserRoleViewModel, object> _sortBy => x =>
        {
            if (_sortNameByLength)
                return x.UserName.Length;
            else
                return x.UserName;
        };
        // quick filter - filter globally across multiple columns with the same input
        private Func<UserRoleViewModel, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;

            
            if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        };
}
