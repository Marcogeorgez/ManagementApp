@page "/admin-dashboard"
@inject UserServices UserManagementService
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> RoleManager
@inject UserNoteService UserNoteService
@inject ISnackbar Snackbar
@inject ILogger<AdminDashboardPage> Logger
@inject IDialogService DialogService
@inject ILocalStorageService localStorage

@attribute [Authorize(Policy = "RequireAdminRole")]

<PageTitle>Admin Dashboard</PageTitle>

@if (_loading)
{
    <MudText Typo="Typo.h5">Admin Dashboard</MudText>
    <MudSpacer />
    <LoadingComponent />
}
else if (_error)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" >
        An error occurred while loading users.
    </MudAlert>
}
else
{
    @if (!string.IsNullOrEmpty(_updateMessage))
    {
        <MudAlert Severity="@(_updateMessageClass == "alert-success" ? Severity.Success : Severity.Error)"
                  Variant="Variant.Filled"
                  ShowCloseIcon="true"
                  CloseIconClicked="@(() => {_updateMessage = null;})"
                  OnClick="@(() => { _updateMessage = null; })">
            @_updateMessage
        </MudAlert>
    }


    <MudDataGrid T="UserRoleViewModel" Bordered=true CanCancelEdit=true MultiSelection=true 
                 Items="@AllUsers" SortMode="SortMode.Multiple"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Filterable=true
                 DragIndicatorSize="Size.Small" Loading=@_loading Dense=true
                 EditTrigger="DataGridEditTrigger.OnRowClick" 
                 EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" 
                 CommittedItemChanges="@CommittedItemChanges" ReadOnly="@_readOnly"
                 >

        <ToolBarContent>
            <MudText Typo="Typo.h5">Admin Dashboard</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search by name" Adornment="Adornment.Start"
                          Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                          Class="mt-0" />
        </ToolBarContent>

        <ColGroup>
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert=true>
            <col style="width: 3vw;" />
            <col style="width: 10vw;" />
            <col style="width: 3vw;" />
            <col style="width: 1vw;" />
            <col style="width: 1vw;" />
            <col style="width: 50vw;" />
            </MudHidden>
        </ColGroup>
        <Columns>
            <TemplateColumn T="UserRoleViewModel" Title="#" Sortable="false" Filterable="false" Style="min-width: 50px;" Editable=false>
                <CellTemplate Context="cell">
                    @{
                        var index = AllUsers.ToList().IndexOf(cell.Item) + 1;
                        @index
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Style="min-width: 150px" Property="x => x.UserName" Title="User Name" CellStyle="text-align: center" Editable=false>
            </PropertyColumn>
            <PropertyColumn Property="x => x.SelectedRole" Title="Current Role" 
                Style="min-width: 150px;" CellStyle="text-align: center" >
                <EditTemplate >
                    <MudSelect @bind-Value="context.Item.SelectedRole" 
                               Required Variant="Variant.Outlined"
                               RequiredError="You must select a Role!!!"
                               Margin="@Margin.Dense">
                        @foreach (var role in _allAvailableRoles)
                        {
                            <MudSelectItem Value="@role">@role</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.HourlyRate" Title="Rate $"
                            CellStyle="text-align: center"
                            ShowFilterIcon="false" Format="C">
                <EditTemplate>
                    <MudTextField T="decimal?"
                                  @bind-Value="context.Item.HourlyRate"
                                  @onblur="() => UpdateHourlyRate(context.Item)"
                                  Format="N"
                                  Adornment="Adornment.Start"
                                  AdornmentText="$" IconSize="Size.Small" />
                </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.HourlyRateInLek" Title="Rate Lek"
                            CellStyle="text-align: center"
                            ShowFilterIcon="false" ShowColumnOptions="false" Format="L#,##0">
                <EditTemplate>
                    <MudTextField T="decimal?"
                                  @bind-Value="context.Item.HourlyRateInLek"
                                  @onblur="() => UpdateHourlyRateInLek(context.Item)"
                                  Format="N"
                                  Adornment="Adornment.Start"
                                  AdornmentText="L" IconSize="Size.Small" />
                </EditTemplate>
            </PropertyColumn>
            @if (_isCellEditMode)
            {
                <PropertyColumn Property
                ="x => x.Note" Title
                ="Private Notes" Editable
                ="true" Filterable
                ="true">
                    <EditTemplate>
                    <MudTextField T="string" Variant="Variant.Filled" Lines="2"
                                  Immediate="true"
                                  Value="@context.Item.Note"
                                  ValueChanged="@(text => OnNoteTextChanged(text, context))" AutoGrow=false
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                                  OnAdornmentClick="@(() => OpenNoteDialog(context.Item.Note, context))"
                                  Style="overflow-y: auto; max-height: 200px;"/>
                </EditTemplate>
            </PropertyColumn>
            }
            @if(!_isCellEditMode){
            <PropertyColumn Property="x => x.GetNoteValue(targetId)" Title="Private Notes" Editable=false Required=false>
                <CellTemplate>
                    @{

                        string noteValue = userNotesDict.ContainsKey(context.Item.UserId)
                        ? userNotesDict[context.Item.UserId]?.Note ?? string.Empty
                        : string.Empty;
                    }
                    <MudTextField T="string" Label="Note" Variant="Variant.Outlined" Lines="3"
                                  Value="@noteValue"
                                  ValueChanged="@(text => OnNoteTextChanged(text, context))"
                                  Immediate="true"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.OpenInFull"
                                  OnAdornmentClick="@(() => OpenNoteDialog(noteValue,context) )" />
                </CellTemplate>
            </PropertyColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UserRoleViewModel" />
        </PagerContent>
    </MudDataGrid>
    if(_usdToLek){
        <MudTextField T="decimal"
                  @bind-value="storedValue" Label="Usd To Lek"
                  Variant="Variant.Filled" Style="width:fit-content; margin-right: 8px;"
                  Immediate="true" />
    }
 <div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="_readOnly" Color="Color.Primary">Read Only</MudSwitch>
        <div class="d-flex justify-start align-center">
            <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
            <MudSwitch @bind-Value="_isCellEditMode" Color="Color.Primary">Cell</MudSwitch>
        </div>
        <MudDivider/>
        <MudSwitch @bind-Value="_usdToLek" Color="Color.Primary">Change Conversion Rate</MudSwitch>

    </div>
}

@code {
    private bool FilterNotes(UserRoleViewModel User, string searchText)
    {
        if (userNotesDict.ContainsKey(User.UserId))
        {
            var noteValue = userNotesDict[User.UserId]?.Note ?? string.Empty;
            return noteValue.Contains(searchText, StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }
    private bool _readOnly;
    private bool _loading = true;
    private bool _error;
    private bool _isUpdating;
    private bool _usdToLek;
    private bool isNoteChanged; // Flag to track if the note has changed
    private bool isCurrencyChanged; // Flag to track if the currency value has changed
    private string _updateMessage;
    private string _updateMessageClass;
    private string _updatingUserId;
    private string _searchString;
    private string creatorId; // DELETE  LATER
    private string targetId;
    private string _pendingNoteText;
    private decimal _storedValue;
    private decimal lastSavedValue;
    private const double Delay = 100 ; // 0.1 Second Delay
    private System.Timers.Timer _timer;
    private UserNote userNotes = new();
    private Dictionary<string, UserNote> userNotesDict = new();
    private List<string> _allAvailableRoles = new();
    private List<UserRoleViewModel> _users;
    private IEnumerable<UserRoleViewModel> AllUsers = new List<UserRoleViewModel>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            storedValue = await localStorage.GetItemAsync<decimal>("usdLek");
            if (storedValue == 0)
            {
                storedValue = 100;
            }
            lastSavedValue = storedValue;
            _allAvailableRoles = await GetAvailableRoles();
            AllUsers = await UserManagementService.GetAllUsersAsync(storedValue);
            _users = AllUsers.ToList();

            await LoadUserNotes();

            _loading = false;
            _timer = new System.Timers.Timer(Delay);
            _timer.Elapsed += OnTimedEvent;
            _timer.AutoReset = false; // to prevent timer from restarting automatically


        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            _error = true;
            _loading = false;
        }
    }

    private void OpenNoteDialog(string noteValue,CellContext<UserRoleViewModel> context)
    {
        var parameters = new DialogParameters
        {
            {
                "Text", noteValue
            }    
        };
        var options = new DialogOptions{ FullScreen = true};
        var dialog = DialogService.Show<FullNoteDialog>("Edit Note",parameters,options);
        dialog.Result.ContinueWith(async task =>
        {
            if (!task.IsCanceled && task.Result.Data is string updatedText)
            {
                OnNoteTextChanged(updatedText, context);
            }
        });
    }
    // Load all user notes
    private async Task LoadUserNotes()
    {
        var notes = await UserNoteService.GetAllNotes();

        foreach (var note in notes)
        {
            if (!userNotesDict.ContainsKey(note.TargetUserId))
            {
                userNotesDict[note.TargetUserId] = note;
            }
        }
    }
    // Save notes or (currency exchange ratio) when user stops writing
    private void OnTimedEvent(object sender, ElapsedEventArgs e)
    {
        _timer.Stop();
        InvokeAsync(async () =>
        {
            // Save the note if it has changed
            if (isNoteChanged)
            {
                await SaveNotes();
                isNoteChanged = false;
            }

            // Save the currency value if it has changed
            if (isCurrencyChanged)
            {
                await SaveCurrencyValue();
                isCurrencyChanged = false; 
            }
        });

    }
    private void OnNoteTextChanged(string text, CellContext<UserRoleViewModel> context)
    {
        targetId = context.Item.UserId;
        if (!userNotesDict.ContainsKey(targetId))
        {
            userNotesDict[targetId] = new UserNote { TargetUserId = targetId };
        }
        // Update the note text
        userNotesDict[targetId].Note = text;
        _pendingNoteText = text;  
        isNoteChanged = true;
        // Reset and start the timer each time the text changes
        _timer.Stop();
        _timer.Start(); 
    }

    private async Task SaveNotes()
    {
        if (userNotesDict.ContainsKey(targetId))
        {
            var noteToSave = userNotesDict[targetId];

            // Check if it's a new note or not 
            if (noteToSave.Id == 0)
            {
                // Add the new note
                var result = await UserNoteService.AddNoteAsync(targetId, noteToSave.Note);
                if (result.Success)
                {
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add($"Successfully saved note", Severity.Info);
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
            else
            {
                // Update the existing note
                var result = await UserNoteService.UpdateNoteAsync(noteToSave.Id, noteToSave.Note);
                if (result.Success)
                {
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                    Snackbar.Add($"Successfully saved note", Severity.Info);
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
        }
    }        
    // Get all available roles to allow drop-list menu to choose new roles
    private async Task<List<string>> GetAvailableRoles()
    {
        var roles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
        return roles.Where(r => r != null).ToList();
    }
    private async Task UpdateSelectedRole(UserRoleViewModel user, string newRole)
    {
        try
        {
            if (string.IsNullOrEmpty(newRole))
            {
                return;
            }
            if (newRole == "Admin")
            {
                var parameters = new DialogParameters
                {
                    { "Message" , $"Are you sure you want to change {user.UserName} role to Admin?"}
                };
                var dialog = DialogService.Show<ConfirmationDialog>("Confirmation", parameters);
                var toProceed = await dialog.Result;

                if (toProceed.Canceled || !(bool)toProceed.Data)
                {
                    return;
                }
            }
            _isUpdating = true;
            _updatingUserId = user.UserId;
            var result = await UserManagementService.ChangeUserRoleAsync(user.UserId, newRole);

            if (result)
            {
                var updatedUser = _users.First(u => u.UserId == user.UserId);
                updatedUser.Roles = new List<string> { newRole };
                _updateMessage = $"Successfully updated role for {user.UserName} to {newRole}";
                _updateMessageClass = "alert-success";

                var elementUser = AllUsers.First(u => u.UserId == user.UserId);
                elementUser.Roles = new List<string> { newRole };
            }
            else
            {
                _updateMessage = $"Failed to update role for {user.UserName}";
                _updateMessageClass = "alert-danger";
                Logger.LogError($"Failed to update role for user {user.UserName}");
            }
        }
        catch (Exception ex)
        {
            _updateMessage = $"Error updating role: {ex.Message}";
            _updateMessageClass = "alert-danger";
            Logger.LogError(ex, "Error changing user role");
        }
        finally
        {
            _isUpdating = false;
            _updatingUserId = null;
            StateHasChanged();
        }
    }
    
    // UpdateHourlyRate AND UpdateHourlyRateInLek to update the display only.
    private void UpdateHourlyRateInLek(UserRoleViewModel user)
    {
        user.HourlyRate = user.HourlyRateInLek / storedValue;
    }
    private void UpdateHourlyRate(UserRoleViewModel user)
    {
        user.HourlyRateInLek = user.HourlyRate * storedValue;
    }

    // Saving usd to lek exchange rate in local storage
    public decimal storedValue
    {
        get => _storedValue;
        set
        {
            if (_storedValue != value)
            {
                _storedValue = value;
                SaveCurrencyValue();
            }
        }
    }
    private async Task SaveCurrencyValue()
    {
        // Save the currency value only if it has changed
        if (storedValue != lastSavedValue)
        {
            await SaveToStorage();
            lastSavedValue = storedValue; // Update the last saved value
        }
        // Set the flag to true as the currency has changed
        isCurrencyChanged = true;

        _timer.Stop();
        _timer.Start();
    }
    private async Task SaveToStorage()
    {
        await localStorage.SetItemAsync("usdLek", storedValue);
        StateHasChanged();
    }

    // events
    private List<string> _events = new();
    private bool _isCellEditMode;
    private string _originalRole;
    private decimal? _originalHourlyRate;

    void StartedEditingItem(UserRoleViewModel user)
    {
        // Store the original values before editing
        _originalRole = user.SelectedRole;
        _originalHourlyRate = user.HourlyRate;
    }
    void CanceledEditingItem(UserRoleViewModel item)
    {
    }
    private async Task CommittedItemChanges(UserRoleViewModel user)
    {
        bool roleChanged = user.SelectedRole != _originalRole;
        bool hourlyRateChanged = user.HourlyRate != _originalHourlyRate;
        if (roleChanged && hourlyRateChanged)
        {
            UpdateSelectedRole(user, user.SelectedRole);
            await UserManagementService.UpdateHourlyRateAsync(user.UserId, user.HourlyRate);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add($"Successfully changed hourly rate {user.UserName} and his role", Severity.Info);
        }
        else if (roleChanged)
            UpdateSelectedRole(user, user.SelectedRole);
        else if (hourlyRateChanged)
        {
            await UserManagementService.UpdateHourlyRateAsync(user.UserId, user.HourlyRate);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add($"Successfully changed hourly rate {user.UserName} to {user.HourlyRate}$", Severity.Info);
            StateHasChanged();
        }
    }

}