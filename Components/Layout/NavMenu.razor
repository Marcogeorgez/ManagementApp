@using LuminaryVisuals.Data.Entities
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@* Main Top Bar *@
<MudAppBar Elevation="0" Dense="true">

    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"  />
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudImage Src="/Logo.png" Alt="Logo" Height="30" Class="fit-image" />
     </MudHidden>
     <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudImage Src="/Logo.png" Alt="Logo" Height="25" Class="fit-image" />
    </MudHidden>
    <MudText Typo="Typo.h5">Luminary Visuals</MudText>
    <MudSpacer />
    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
    <MudButton Color="Color.Warning" OnClick="ToggleTheme">
        <MudIcon Icon="@CurrentIcon" />
    </MudButton>

</MudAppBar>

<MudDrawer Class="" @bind-Open="_drawerOpen" Fixed="true" Variant="DrawerVariant.Mini" ClipMode="DrawerClipMode.Always" Elevation="1" OpenMiniOnHover="true" >
    @*Side Bar*@
        <MudNavMenu Class="mud-width-full ">
            <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" IconColor="Color.Primary">Home</MudNavLink>
        <MudDivider />
            <MudNavLink Href="auth" Icon="@Icons.Material.Filled.Security" IconColor="Color.Primary">Auth Required</MudNavLink>
        <MudDivider />
            <MudNavLink Href="admin-dashboard" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Primary">Admin Dashboard</MudNavLink>
        <MudDivider />
                <AuthorizeView>
                    <Authorized>
                        <MudNavGroup Title="Settings" Icon="fas fa-cogs" IconColor="Color.Primary" Expanded="true">
                            <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.People" IconColor="Color.Primary">Users</MudNavLink>
                        </MudNavGroup>
                <MudDivider />
                    <MudNavLink Class="" OnClick="@LogoutClick" Icon="@Icons.Material.Filled.ExitToApp" IconColor="Color.Primary">
                        Logout
                    </MudNavLink>
                    <form id="logoutForm" action="Account/Logout" method="post" style="display:none;">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    </form>
                    </Authorized>
                    <NotAuthorized>
                        <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Primary">Register</MudNavLink>
                <MudDivider />
                        <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login" IconColor="Color.Primary">Login</MudNavLink>
                <MudDivider />
                    </NotAuthorized>
                </AuthorizeView>
        </MudNavMenu>
</MudDrawer>


@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    MudTheme _theme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = Colors.Blue.Darken1,
                Secondary = Colors.Green.Accent4,
                AppbarBackground = Colors.Blue.Accent1,
                DrawerBackground = Colors.Blue.Accent1, 
                DrawerText = Colors.Red.Default
            },
            
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] {"Inter", "sans-serif" },
                    FontWeight = 400  
                },
            },
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "175px",
            }
        };
    private bool _isDarkMode;
    private string CurrentIcon => _isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode;
    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
    }
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    private async Task LogoutClick()
    {
        await JSRuntime.InvokeVoidAsync("submitForm", "logoutForm");
    }
}

