@using static LuminaryVisuals.Services.UserRoleViewModel
@inject UserServices userServices
@inject ProjectService projectServices
<MudDialog>
    <DialogContent>
        <MudGrid Spacing="1" Justify="Justify.Center">
            <!-- Editor List with CheckBoxes -->
            <MudItem xs="4">
                <MudPaper>
                    <MudText Typo="Typo.h6">Editors</MudText>
                    <MudRadioGroup T="string" @bind-Value="SelectedEditorID">
                        @foreach (var editor in Editors)
                        {
                            <MudItem xs="4">
                                <MudRadio T="string" Value="@editor.UserId" Color="Color.Info">@editor.UserName</MudRadio>
                            </MudItem>
                        }
                    </MudRadioGroup>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudPaper>
                    <MudText Typo="Typo.h6">Clients</MudText>
                    <MudRadioGroup T="string" @bind-Value="SelectedClientID">
                        @foreach (var client in Clients)
                        {
                            <MudItem xs="4">
                                <MudRadio T="string" Value="@client.UserId" Color="Color.Info">@client.UserName</MudRadio>
                            </MudItem>
                        }
                    </MudRadioGroup>
                    <div class="d-flex align-center">
                        <MudText Class="ml-4">Selected Option: @SelectedClientID</MudText>
                    </div>
                </MudPaper>
            </MudItem>

            <!-- Empty Third Column -->
            <MudItem xs="4">
                <MudPaper>
                    <MudText Typo="Typo.h6">Projects</MudText>
                    <MudRadioGroup T="int" @bind-Value="SelectedProjectID">
                        @foreach (var project in Projects)
                        {
                            <MudItem xs="4">
                                <MudRadio T="int" Value="@project.ProjectId" Color="Color.Info">@project.ProjectName</MudRadio>
                            </MudItem>
                        }
                    </MudRadioGroup>
                    <div class="d-flex align-center">
                        <MudText Class="ml-4">Selected Option: @SelectedProjectID</MudText>
                    </div>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="SaveAssignments">Save</MudButton>
    </DialogActions>
    </MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private List<UserProjectViewModel> Editors = new List<UserProjectViewModel>();
    private List<UserProjectViewModel> Clients = new List<UserProjectViewModel>();
    private List<Project> Projects = new List<Project>();
    private string SelectedClientID { get; set; } // Stores the selected client ID
    private int SelectedProjectID { get; set; }
    private string SelectedEditorID { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Editors = await userServices.GetEditorsWithProjectsAsync();
        Clients = await userServices.GetClientsWithProjectsAsync();
        Projects = await projectServices.GetProjectsAsync();
    }
    private async Task SaveAssignments()
    {

        Console.WriteLine("Selected Project ID: " + SelectedProjectID);
        Console.WriteLine("Selected Client ID: " + SelectedClientID);
        if (SelectedProjectID != null)
        {
            if (SelectedEditorID != null)
            {
                await projectServices.AssignProjectToPrimaryEditorAsync(SelectedProjectID, SelectedEditorID);
            }
            if (SelectedClientID != null)
            {
                await projectServices.AssignProjectToClientAsync(SelectedProjectID, SelectedClientID);
            }
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }
}